from timeit import timeit
import cProfile


def revers_1(enter_num, revers_num=0):
    if enter_num == 0:
        return revers_num
    else:
        num = enter_num % 10
        revers_num = (revers_num + num / 10) * 10
        enter_num //= 10
        return revers_1(enter_num, revers_num)


def revers_2(enter_num, revers_num=0):
    while enter_num != 0:
        num = enter_num % 10
        revers_num = (revers_num + num / 10) * 10
        enter_num //= 10
    return revers_num


def revers_3(enter_num):
    enter_num = str(enter_num)
    revers_num = enter_num[::-1]
    return revers_num


def revers_4(enter_num):
    enter_num = list(str(enter_num))
    enter_num.reverse()
    return ''.join(enter_num)


num = int(input("Введите число: "))

print('Рекурсия', timeit('revers_1(num)', globals=globals(), number=1000))
print('Цикл', timeit('revers_2(num)', globals=globals(), number=1000))
print('Срез', timeit('revers_3(num)', globals=globals(), number=1000))
print('Реверс', timeit('revers_4(num)', globals=globals(), number=1000))

cProfile.run('revers_1(100000000)')
cProfile.run('revers_2(100000000)')
cProfile.run('revers_3(100000000)')
cProfile.run('revers_4(100000000)')

""" 
Замеры вышеприведенных функций с помощью timeit показало что быстрее всех выполняется срез по возрастанию реверс, 
цикл и рекурсия 
Результаты cProfile показали время выполнения менее 0.000
Пример реверса
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 task_3.py:44(revers_4)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
"""
