"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
import timeit
from random import randint


def bubble_sort_vise_versa(rand_list):
    n = 1
    while n < len(rand_list):
        for i in range(len(rand_list) - n):
            if rand_list[i] < rand_list[i + 1]:
                rand_list[i], rand_list[i + 1] = rand_list[i + 1], rand_list[i]
        n += 1
    return rand_list


#  вариант с флагом на замены

def bubble_sort_vv_flag(rand_list):
    n = 1
    replacement = True
    while n < len(rand_list) and replacement:
        replacement = False
        for i in range(len(rand_list) - n):
            if rand_list[i] < rand_list[i + 1]:
                rand_list[i], rand_list[i + 1] = rand_list[i + 1], rand_list[i]
                replacement = True
        n += 1
    return rand_list


#  вариант с уменьшением длин строки
def bubble_sort_vv_len(rand_list):
    n = 1
    len_list = len(rand_list)
    while n < len_list:
        for i in range(len_list - n):
            if rand_list[i] < rand_list[i + 1]:
                rand_list[i], rand_list[i + 1] = rand_list[i + 1], rand_list[i]
        n += 1
        len_list -= 1
    return rand_list


# Замеры на 10
origin_list = [randint(-100, 100) for i in range(10)]
print('Замеры на 10:')
print(f'Исходный массив: {origin_list}.')
print(f'Отсортированный по убыванию массив: {bubble_sort_vise_versa(origin_list)}.')
print(f'Массив, отсортированный функцией с флагом на замены: {bubble_sort_vv_flag(origin_list)}.')
print(f'Массив, отсортированный функцией с уменьшением длины строки: {bubble_sort_vv_len(origin_list)}.')
print('Время выполнения сортировки без улучшений составляет: ',
      timeit.timeit('bubble_sort_vise_versa(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('Время выполнения сортировки с флагом на замены составляет: ',
      timeit.timeit('bubble_sort_vv_flag(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('Время выполнения сортировки с с уменьшением длины строки составляет: ',
      timeit.timeit('bubble_sort_vv_len(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('-' * 100)

# Замеры на 100
origin_list = [randint(-100, 100) for a in range(100)]
print('Замеры на 100:')
print(f'Исходный массив: {origin_list}.')
print(f'Отсортированный по убыванию массив: {bubble_sort_vise_versa(origin_list)}.')
print(f'Массив, отсортированный функцией с флагом на замены: {bubble_sort_vv_flag(origin_list)}.')
print(f'Массив, отсортированный функцией с уменьшением длины строки: {bubble_sort_vv_len(origin_list)}.')
print('Время выполнения сортировки без улучшений составляет: ',
      timeit.timeit('bubble_sort_vise_versa(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('Время выполнения сортировки с флагом на замены составляет: ',
      timeit.timeit('bubble_sort_vv_flag(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('Время выполнения сортировки с с уменьшением длины строки составляет: ',
      timeit.timeit('bubble_sort_vv_len(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('-' * 100)

# Замеры на 1000
origin_list = [randint(-100, 100) for n in range(1000)]
print('Замеры на 1000:')
print(f'Исходный массив: {origin_list}.')
print(f'Отсортированный по убыванию массив: {bubble_sort_vise_versa(origin_list)}.')
print(f'Массив, отсортированный функцией с флагом на замены: {bubble_sort_vv_flag(origin_list)}.')
print(f'Массив, отсортированный функцией с уменьшением длины строки: {bubble_sort_vv_len(origin_list)}.')
print('Время выполнения сортировки без улучшений составляет: ',
      timeit.timeit('bubble_sort_vise_versa(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('Время выполнения сортировки с флагом на замены составляет: ',
      timeit.timeit('bubble_sort_vv_flag(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('Время выполнения сортировки с с уменьшением длины строки составляет: ',
      timeit.timeit('bubble_sort_vv_len(origin_list[:])', number=1000, globals=globals()), '.', sep='')
print('-' * 100)

"""
Замеры удивили. Я помню, что на уроке обсуждали, что функция с флагом на отсуствие замен должна работать ненамного 
эффективнее, но замеры показали другой результат, особенно разница видна на массиве в 1000. 
Замеры сделала несколько раз, результат примерно одинаковый. 
Сделала проверку, закомментировав всё, что касалось флага, замеры показали одинаковую работу первых 2-х функций, т.е.
разница во времени - результат флага.
Уменьшение длины массива для обхода тоже показал эффективность, но флаг более эффективен.
Результаты замеров приведены ниже, вывод списков не копировала.
Вывод:
- Уменьшение длины массива для прохода эффективно, время выполнения функции уменьшается примерно в 2 раза.
- Либо я что-то сделала не так, либо флаг на отсуствие замен сокращает работу функции значительно.

Результаты замеров:
Замеры на 10:
Время выполнения сортировки без улучшений составляет: 0.024954500000000004.
Время выполнения сортировки с флагом на замены составляет: 0.0048718000000000095.
Время выполнения сортировки с с уменьшением длины строки составляет: 0.012522499999999992.
----------------------------------------------------------------------------------------------------
Замеры на 100:
Время выполнения сортировки без улучшений составляет: 1.3822383999999999.
Время выполнения сортировки с флагом на замены составляет: 0.02812720000000013.
Время выполнения сортировки с с уменьшением длины строки составляет: 0.6821258000000001.
----------------------------------------------------------------------------------------------------
Замеры на 1000:
Время выполнения сортировки без улучшений составляет: 140.78303160000002.
Время выполнения сортировки с флагом на замены составляет: 0.3210348000000067.
Время выполнения сортировки с с уменьшением длины строки составляет: 69.14758330000001.

Повторные замеры:

--- замер 2----
Замеры на 10:
Время выполнения сортировки без улучшений составляет: 0.0241045.
Время выполнения сортировки с флагом на замены составляет: 0.0051482999999999945.
Время выполнения сортировки с с уменьшением длины строки составляет: 0.012119700000000011.
Замеры на 100:
Время выполнения сортировки без улучшений составляет: 1.4388096.
Время выполнения сортировки с флагом на замены составляет: 0.02704200000000001.
Время выполнения сортировки с с уменьшением длины строки составляет: 0.7281154999999999.
Замеры на 1000:
Время выполнения сортировки без улучшений составляет: 143.3830945.
Время выполнения сортировки с флагом на замены составляет: 0.3340067999999974.
Время выполнения сортировки с с уменьшением длины строки составляет: 69.528514.

---  замер 3 --- 
Замеры на 10:
Время выполнения сортировки без улучшений составляет: 0.025262400000000004.
Время выполнения сортировки с флагом на замены составляет: 0.004337600000000011.
Время выполнения сортировки с с уменьшением длины строки составляет: 0.015834600000000004.
Замеры на 100:
Время выполнения сортировки без улучшений составляет: 1.4535708.
Время выполнения сортировки с флагом на замены составляет: 0.026474600000000015.
Время выполнения сортировки с с уменьшением длины строки составляет: 0.6689293000000003.
Замеры на 1000:
Время выполнения сортировки без улучшений составляет: 163.33683979999998.
Время выполнения сортировки с флагом на замены составляет: 0.33588989999998375.
Время выполнения сортировки с с уменьшением длины строки составляет: 89.80809149999999.

--- Замеры с закомментированным флагом ---
Замеры на 10:
Время выполнения сортировки без улучшений составляет: 0.023823999999999998.
Время выполнения сортировки с флагом на замены составляет: 0.022735100000000008.
Время выполнения сортировки с с уменьшением длины строки составляет: 0.012196100000000001.
Замеры на 100:
Время выполнения сортировки без улучшений составляет: 1.4753656000000002.
Время выполнения сортировки с флагом на замены составляет: 1.4237311.
Время выполнения сортировки с с уменьшением длины строки составляет: 0.7325862999999999.
Замеры на 1000:
Время выполнения сортировки без улучшений составляет: 158.8856891.
Время выполнения сортировки с флагом на замены составляет: 151.80667479999997.
Время выполнения сортировки с с уменьшением длины строки составляет: 75.24454099999997.
"""