"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой и по возможности самой лаконичной.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым!
"""

from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    b = max(array, key=array.count)

    return f'Чаще всего встречается число {b}, ' \
           f'оно появилось в массиве {array.count(b)} раз(а)'


print(func_1())
print(func_2())
print(func_3())

print(timeit("func_1()", number=100000, globals=globals()))
print(timeit("func_2()", number=100000, globals=globals()))
print(timeit("func_3()", number=100000, globals=globals()))

"""
func_1() - 0.15478809999999998
func_2() - 0.2024967
func_3() - 0.162329

Самый долгий вариант, второй, т.к. создается массив со счеткиом элементов
и затем из него выбирается максимальное значение.
В первом вариаете, мы проходимся по всему моссвиву и записываем элемент с большим числом его вхождения

Третий вариант мы ищем максимальную частоту элементов в массиве.
Прироста в скорости это не дало!
"""
