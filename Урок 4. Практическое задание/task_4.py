"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой и по возможности самой лаконичной.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым!
"""
from timeit import timeit
from collections import Counter
array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    elem = Counter(array).most_common(1)
    return f'Чаще всего встречается число {elem[0][0]}, оно появилось в массиве {elem[0][1]} раз(а)'


def func_4():
    elem = max(array, key=array.count)
    return f'Чаще всего встречается число {elem}, оно появилось в массиве {array.count(elem)} раз(а)'


print(f"{func_1()}\n{timeit('func_1()', globals=globals(), number=1000)}")
print(f"{func_2()}\n{timeit('func_2()', globals=globals(), number=1000)}")
print(f"{func_3()}\n{timeit('func_3()', globals=globals(), number=1000)}")
print(f"{func_4()}\n{timeit('func_4()', globals=globals(), number=1000)}")


# Хотя проверка на количество вхождений через Counter получилась едва ли не самой лаконичной, она оказалась
# и самой медленной. Это связано видимо с тем, что в ней происходит работа со словарем и это маленький словарь.
# При наращивании размера словаря, ситуация должна измениться в лучшую сторону именно для этой функции,
# так как данные словарей хранятся в хеш таблицах и сложность операции получения данных из словаря является линейной,
# мы получим резкий прирост по производительности.
# Второй по медленности является func_2, связано это с тем, что во время работы функции для каждого числа проводится
# проверка на вхождение по всему массиву, лишь после этого результат переносится в новый список,
# и так проверяется элемент за элементом. Таким образом имеем сложность O(n^2),
# так как и цикл и поиск элемента в списке имеют асимптотическую сложность O(n)
# Самой быстрой оказалась func_4, из-за использования встроенной функции max с линейной сложностью.


