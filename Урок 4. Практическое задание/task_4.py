"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""
from collections import Counter
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1, 3, 3, 1, 1, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    """
    свой вариант через построение словаря (неудачный вариант)
    """
    my_dict = {i: array.count(i) for i in array}
    inverse = [(value, key) for key, value in my_dict.items()]
    return f'Чаще всего встречается число {max(inverse)[1]}, ' \
           f'оно появилось в массиве {my_dict[max(inverse)[1]]} раз(а)'


def func_4():
    """
    (неудачный вариант) через Counter
    Counter -  Это коллекция, в которой элементы хранятся как ключи словаря,
    а их счетчики хранятся как значения словаря.
    most_common([ n ]) возвращает список из n наиболее распространенных элементов и их количество от наиболее
    распространенных до наименьших.
    """

    my_dict = Counter(array).most_common()
    return f'Чаще всего встречается число {my_dict[0][0]}, ' \
           f'оно появилось в массиве {my_dict[0][1]} раз(а)'


print(func_1())
print('Время выполнения func_1:')
print(timeit(stmt="func_1()", globals=globals(), number=100000))
print(func_2())
print('Время выполнения func_2:')
print(timeit(stmt="func_2()", globals=globals(), number=100000))
print(func_3())
print('Время выполнения func_3:')
print(timeit(stmt="func_3()", globals=globals(), number=100000))
print(func_4())
print('Время выполнения func_4:')
print(timeit(stmt="func_4()", globals=globals(), number=100000))


"""
Чаще всего встречается число 1, оно появилось в массиве 6 раз(а)
Время выполнения func_1:
0.296256263
Чаще всего встречается число 1, оно появилось в массиве 6 раз(а)
Время выполнения func_2:
0.36657572499999996
Чаще всего встречается число 1, оно появилось в массиве 6 раз(а)
Время выполнения func_3:
0.4110937109999999
Чаще всего встречается число 1, оно появилось в массиве 6 раз(а)
Время выполнения func_4:
0.3100689230000002

Попытки ускорить задачу оказались неудачными, только func_4 (Модуль collections) получилась не на много быстрее func_2,
делаю вывод что итератор в func_1 самый быстрый вариант
"""