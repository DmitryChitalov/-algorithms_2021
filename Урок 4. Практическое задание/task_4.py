"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым!
"""

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


print(func_1())
print(func_2())

"""спрофилируем данные функции"""
from timeit import timeit

print(timeit('func_1()', globals=globals(), number=100000))
print(timeit('func_2()', globals=globals(), number=100000))
"""результат
0.1550934
0.2267182

Из замеров видно что функция номер один немного быстрее, связано с тем что во второй функции
используется функция max() для получения максимального заначения, имеющая линейную сложность.
Данные функции очень медленные и никуда не годятся, придется написать свою функцию.
"""


def func_3():
    count_array = []
    for i in array:
        count_array.append(array.count(i))
    return f'Чаще всего встречается число {array[count_array.index(max(count_array))]}, ' \
           f'оно появилось в массиве {max(count_array)} раз(а)'

print(timeit('func_3()', globals=globals(), number=100000))

"""
Результаты замеров:
0.158216
0.23024359999999996
0.2264837

Функция номер три получилась приблизительно такой же по времени. Задача "упростить элементарные операции"
не так уж и проста, как может показаться на первый взгляд.
"""