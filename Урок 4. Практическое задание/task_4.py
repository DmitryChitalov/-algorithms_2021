"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым!
"""

from timeit import default_timer, timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    answer = max(array, key=array.count)
    return f'Чаще всего встречается число {answer}, ' \
           f'оно появилось в массиве {array.count(answer)} раз(а)'


def func_4():
    m = 0
    num = 0
    for i in set(array):
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


print(func_1())
print(func_2())
print(func_3())
print(func_4())

print('Профилирование функции func_1 через timeit: ' + str(timeit(
    'func_1()',
    globals=globals())))

print('Профилирование функции func_2 через timeit: ' + str(timeit(
    'func_2()',
    globals=globals())))

print('Профилирование функции func_3 через timeit: ' + str(timeit(
    'func_3()',
    globals=globals())))

print('Профилирование функции func_4 через timeit: ' + str(timeit(
    'func_4()',
    globals=globals())))

'''
Вывод:
Профилирование функции func_1 через timeit: 1.234418
Профилирование функции func_2 через timeit: 1.7827597
Профилирование функции func_3 через timeit: 1.3318720999999996
Профилирование функции func_4 через timeit: 1.0950971999999997

В 1 строчку по советам с урока сделать получилось (func_3), но что-то у меня она работает дольше, чем
первые 2. 
Пришлось для создания быстрой функции сделать еще одну путем оптимизации первой функции.
Еще в голову приходит способ с мемоизацией, и он должен быть поидее сравним с нашей самой быстрой функцией.
Но и без этого получилось уложиться в ТЗ задания.

Второе решение медленне первого ввиду создания еще 1 массива, а так же дополнительных хождений по нему.
Первое достаточно быстрое, решает все за 1 проход, но его можно оптимизировать (func_4)
Третье - быстрое и лаконичное за счет встроенных функций.
'''
