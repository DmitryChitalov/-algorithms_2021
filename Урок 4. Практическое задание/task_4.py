"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым

ВЫВОД ПО ЗАДАНИЮ 4: Алгоритм timeit показал что первая функция быстрее чем вторая.
Вторая функция медленее поскольку ее расчет замедляеет append(), когда в первой реализация отбора через if и простое
сравнение.
У меня получилось написать функцию быстрее чем первые две примерно 1.5 - 1.7 сек,
не уверен что это самый быстрый вариант, я переписал вторую функцию через генератор списков в котором посчитал
сколько каких элементов в изначальном списке, и как во второй функции сделал такой же вывод через функ макс и индекса
элемента в изначальном списке.
"""
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    new_array = [array.count(el) for el in array]
    return f'Число встречается {max(new_array)} раз и это число {array[new_array.index(max(new_array))]}'


print(timeit("func_1()", globals=globals()))
print(timeit("func_2()", globals=globals()))
print(timeit("func_3", globals=globals()))
