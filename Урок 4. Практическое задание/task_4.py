"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""
import timeit
from random import randint

# array = [1, 3, 1, 3, 4, 5, 1]

# много повторяющихся значений в массиве:
array = [randint(400, 409) for _ in range(200)]

# много уникальных значений в массиве
# array = [randint(100, 900) for _ in range(200)]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    max_3 = max(set(array), key=array.count)
    # print(t)
    count_3 = array.count(max_3)
    return f'Чаще всего встречается число {max_3}, ' \
           f'оно появилось в массиве {count_3} раз(а)'


print(array)

print('func_1', func_1())
print('func_2', func_2())
print('func_3', func_3())



print('timeit')

print('func_1',
    timeit.repeat(
        "func_1()",
        setup='from __main__ import func_1',
        number=10000))
print('func_2',
    timeit.repeat(
        "func_2()",
        setup='from __main__ import func_2',
        number=10000))

print('func_3',
    timeit.repeat(
        "func_3()",
        setup='from __main__ import func_3',
        number=10000))


# Добавлен 3 алгоритм -  значение вычисляется с помощью функции max(set(array), key=array.count)
# В начале находим элемент который встречается чаще всего. Затем с помощью count
# отдельно считаем сколько раз он встречается в массиве

# На небольших массивах все три алгоритма выполняются примерно за одинаковое время (второй чуть медленнее),
# однако на больших массивах время выполнения 3 алогиритма значительно ниже чем у первых двух.
# Так происходит за счет того, что массив преобразовывается во множество и количество элементов вычисляется только
# для каждого уникального значения исходного массива.
# То есть больше важен не размер массива, а процент уникальных элементов в нем.
# Подобный подход можно применить и для первых двух алгиритмов, тогда время выполнения будет примерно равным
# или даже ниже чем у 3 алгоритма

# Также нужно учесть следующий момент: в случае когда в массиве присутсвуют несколько элементов, которые встречаются
# чаще других, первые два алгоритма однозначно выведут тот, который ближе к началу массива.
# Но при использовании множества, в котором значения располагаются в случайном порядке,
# может быть выведен любой из таких элементов.


# Первый алгоритм через множество
def func_1_v2():
    m = 0
    num = 0
    set_1 = set(array)
    for i in set_1:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


print('func_1_v2', func_1_v2())

print('func_1_v2',
    timeit.repeat(
        "func_1_v2()",
        setup='from __main__ import func_1_v2',
        number=10000))


