"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""
import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def memoize(f):
    cache = {}

    def decorate(*args):
        if args in cache:
            return cache[args]
        else:
            cache[args] = f(*args)
            return cache[args]

    return decorate


@memoize
def func_3():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


print(f"""Функция: \tfunc_1
Результат: \t{func_1()}
Исполнение: {timeit.repeat('func_1()', globals=globals(), repeat=5)}
""")
print(f"""Функция: \tfunc_2
Результат: \t{func_2()}
Исполнение: {timeit.repeat('func_2()', globals=globals(), repeat=5)}
""")
print(f"""Функция: \tfunc_3
Результат: \t{func_3()}
Исполнение: {timeit.repeat('func_3()', globals=globals(), repeat=5)}
""")

"""
Функция: 	func_1
Результат: 	Чаще всего встречается число 1, оно появилось в массиве 6 раз(а)
Исполнение: [4.1802847, 3.6967269000000007, 4.0126458000000005, 3.7454541, 3.6464133999999984]
Функция: 	func_2
Результат: 	Чаще всего встречается число 1, оно появилось в массиве 6 раз(а)
Исполнение: [4.435579400000002, 4.481831200000002, 4.561017399999997, 4.4932266, 4.823658699999996]
Функция: 	func_3
Результат: 	Чаще всего встречается число 1, оно появилось в массиве 6 раз(а)
Исполнение: [0.2022284999999968, 0.16240069999999918, 0.15545910000000163, 0.1625021999999987, 0.18043210000000443]
Чтобы не строить свои костыли было принято решение использовать мемоизацию для первого варианта в качестве моего решения
Как результат, решение ускорилось более чем в 15 раз, за счет использования уже обработанных данных.
Итог: третий вариант имеет более приятную скорость выполнения. 
"""
