"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой и по возможности самой лаконичной.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым!
"""
import pandas as pd

from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1, 5, 5, 5]


# Создание функции для замеров времени на базе timeit
def get_time(funk_str):
    print(timeit(funk_str, number=10000, globals=globals()))


# Имеющиеся функции
def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


# Предложил вариант функции с использованием Pandas. Сделал из интереса и в силу весьма лаконичного кода.
# Выполняется значительно медленнее.
def func_3():
    df = pd.DataFrame(array, columns=['num']).value_counts().head(1)
    return f'Чаще всего встречается число {df.index.tolist()[0][0]}, ' \
           f'оно появилось в массиве {df.iloc[0]} раз(а)'


# Оптимизировал первую функцию за счет использования в цикле множества.
# Это сокращает количество итераций и не нужно одно и то же число подсчитывать несколько раз.
#
# Время работы уменьшено до 0.00957309999999989
def func_4():
    num = 0
    count = 0
    for el in set(array):
        el_count = array.count(el)
        if el_count > count:
            count = el_count
            num = el
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {count} раз(а)'


print(func_1())
print(func_2())
print(func_3())
print(func_4())

# Создал список функций
func_list = ['func_1()', 'func_2()', 'func_3()', 'func_4()']

# Получил данные по времени
for el in func_list:
    get_time(el)

"""
Результаты замеров дали следующие показатели:
Вывод функций:
Чаще всего встречается число 5, оно появилось в массиве 4 раз(а)
Чаще всего встречается число 5, оно появилось в массиве 4 раз(а)
Чаще всего встречается число 5, оно появилось в массиве 4 раз(а)
Показатели времени на 10000 итераций:
0.01373740000000001
0.017933299999999985
7.6824428
0.00957309999999989

Вывод: func_4() - оптимальный вариант с точки зрения сложности и скорости выполнения.
"""
