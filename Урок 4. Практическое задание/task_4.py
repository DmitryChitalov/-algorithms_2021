"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""

from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    elem = max(array, key=array.count)
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {array.count(elem)} раз(а)'


def func_4():
    m = 0
    num = 0
    for i in set(array):
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


print(func_1())
print(func_2())
print(func_3())
print(func_4())

print('func_1:', timeit('func_1()', globals=globals(), number=10000))
print('func_2:', timeit('func_2()', globals=globals(), number=10000))
print('func_3:', timeit('func_3()', globals=globals(), number=10000))
print('func_4:', timeit('func_4()', globals=globals(), number=10000))

"""
func_1: 0.016273499999999996
func_2: 0.020948100000000004
func_3: 0.015185400000000002
func_4: 0.012437199999999995

Первый алггоритм работает быстрее второго, так как 
находит искомый элемент за один проход по списку.
Второй тратит время на создание дополнительного списка и поиска в нём
максимального элемента.
Третий вариант имеет немного лучшую производительность за счёт
использования встроенных функций.
Можно улучшить производительность первой функции за счёт
убирания дубликатов ф-цией set(). В таком случае мы будем искать
каждое число в списке только 1 раз, что особенно эффективно в 
случае больших списков с повторяющимися элементами.
"""
