"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой и по возможности самой лаконичной.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым!
"""
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    a = max(array, key=array.count)
    return f'Чаще всего встречается число {a}, ' \
           f'оно появилось в массиве {array.count(a)} раз(а)'


print(timeit('func_1()', globals=globals()))
print(timeit('func_2()', globals=globals()))
print(timeit('func_3()', globals=globals()))

"""
Написал третью функцию, используя key в функции max. По замерам функция намного быстрее функции 2 
и чуть быстрее функции 1. Функция 2 самая медленная, на мой взгляд из-за того, что перегружена действиями (создание 
списка, итерция, функция max и т.д.). Функция 1 достаточно быстрая, несмотря на то, что в ней много действий, 
но почти все эти действия (кроме итерации) имеют константный уровень сложности, а потому выполняются очень быстро.
Написанная мной функция состоит только из одной функции - max, а т.к. это встроенная функция, то работает 
она достаточно быстро.
"""