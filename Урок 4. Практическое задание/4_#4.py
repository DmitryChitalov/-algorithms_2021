"""
Задание 4.
Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.
Сделайте профилировку каждого алгоритма через timeit
Попытайтесь написать третью версию, которая будет самой быстрой и по возможности самой лаконичной.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
Без аналитики задание считается не принятым!
"""
from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3(new_array):
    search = max(set(new_array), key=new_array.count)
    return f'Чаще всего встречается число {search}, оно появилось в массиве {new_array.count(search)} раз(а)'

print(func_3(array))
print(func_1())
print(func_2())
print(func_3(array))

"""
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 3 раз(а)
"""

print(timeit('func_1()', globals=globals(), number=100000))
print(timeit('func_2()', globals=globals(), number=100000))
print(timeit('func_3(array)', globals=globals(), number=100000))

"""
0.158984
0.1946367
0.1547405
"""

"""
    Вывод: 
    1 функция показывает хороший результат, т.к. перебирает массив по порядку элемент за элементом, и сразу считает
    сколько находится каждого элемента в списке, затрачивая не так много времени на выведение результата.
    
    2 функция показывает худший результат среди 3 функций, т.к. перебирает каждый элемент в массив, а
    уже затем считается и выводит результат числа у которого больше повторений и его количество
    
    3 функция показывает очень хороший результат немного лучше 1 функции, т.к. функция сразу находит максимальное число
    без переборки массива и его дублировании, а затем просто считает уже известное число из массива
"""

