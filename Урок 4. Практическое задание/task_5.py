"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000

Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма.

Укажите формулу сложности О-нотация каждого алгоритма
и сделайте обоснование результатам.
"""
from timeit import timeit


# сложность O (N**2)
def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return f" Порядковый номер обычного алгоритма {n}"


# сложность O (N**2)
def ero(count):
    # Это явно не правильно, но как рассчитать и построить список изначально неизвестно насколько элементов
    # не имея прямой зависимости это конечно не для моего ума.
    n = count * 20
    a = [i for i in range(n + 1)]
    a[1] = 0
    lst = []

    i = 2
    while i <= n:
        if a[i] != 0:
            lst.append(a[i])
            if len(lst) == count:
                return f" Порядковый номер {count} ----- число: {a[i]}"

            for j in range(i, n+1, i):
                a[j] = 0
        i += 1


print(simple(1000))
print(ero(1000))

print(f"Время функции {simple.__name__} составило {timeit('simple', globals=globals(), number=10000)}")
print(f"Время функции {ero.__name__} составило {timeit('ero', globals=globals(), number=10000)}")

# ----------- 10 ----------------
# Порядковый номер обычного алгоритма 29
# Порядковый номер 10 ----- число: 29
# Время функции simple составило 0.00015530000000000058
# Время функции ero составило 0.0001554999999999994

# ----------- 100 ----------------
# Порядковый номер обычного алгоритма 541
# Порядковый номер 100 ----- число: 541
# Время функции simple составило 0.00016410000000000036
# Время функции ero составило 0.00016399999999999748

# ----------- 1000 ----------------
# Порядковый номер обычного алгоритма 7919
# Порядковый номер 1000 ----- число: 7919
# Время функции simple составило 0.0001516000000000295
# Время функции ero составило 0.00015139999999996823

# Либо программа неправильно работает например из-за этого n = count * 20 либо никакой разницы
# в скорости работы алгоритмов нет.
