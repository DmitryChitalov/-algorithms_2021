"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000

Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма.

Укажите формулу сложности О-нотация каждого алгоритма
и сделайте обоснование результатам.
"""
from timeit import timeit


def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def eratosfen_sieve(searching_num):
    n = 2
    len_of_lst = 8000
    sieve = [x for x in range(len_of_lst)]
    sieve[1] = 0
    while n < len_of_lst:
        if sieve[n] != 0:
            m = n * 2
            while m < len_of_lst:
                sieve[m] = 0
                m += n
        n += 1
    return [p for p in sieve if p != 0][searching_num - 1]


num = int(input('Введите порядковый номер искомого простого числа: '))
print(timeit("simple(num)", globals=globals(), number=100))
print(timeit("eratosfen_sieve(num)", globals=globals(), number=100))

"""
Введите порядковый номер искомого простого числа: 10
0.0014347999999992922
0.2700125
Введите порядковый номер искомого простого числа: 100
0.15789330000000001
0.2687521999999998
Введите порядковый номер искомого простого числа: 1000
26.308290900000003
0.27517620000000065

Решето Эратосфена эффективно на больших значениях порядкового номера простого числа. 
Наивная функция имеет квадратичную сложность, а решето - О(n*log(log N).
"""
