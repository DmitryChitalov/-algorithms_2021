"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000

Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма.

Укажите формулу сложности О-нотация каждого алгоритма
и сделайте обоснование результатам.
"""

import timeit
from random import randint


# Для замеров производительности - добавим декоратор.
def decor(func):
    def wrapper(*args):
        start_time = timeit.default_timer()
        ret = func(*args)
        print(
            f'Для {str(func).split(" ")[1]} [{args}] ожидание составило: {int((timeit.default_timer() - start_time) * 1000)} мс. Ответ функции: {ret}')
        return ret

    return wrapper


@decor
def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


@decor
def e_cieve(i):
    ls = []
    n = i * 15
    cieve = set(range(2, n+1))
    while cieve:
        prime = min(cieve)
        cieve -= set(range(prime, n+1, prime))
        ls.append(prime)
    return max(ls[0:i])


simple(10)
e_cieve(10)
simple(100)
e_cieve(100)
simple(1000)
e_cieve(1000)
simple(5000)
e_cieve(5000)


'''
Наивный алгоритм проигрывает в скрости на больших объемах чисел. Решето начинает сильно отрываться по скорости на 
больших диапазонах. При этом, код функции решета - не оптимален, оно заполняется избыточно.

Для simple [(10,)] ожидание составило: 0 мс. Ответ функции: 29
Для e_cieve [(10,)] ожидание составило: 0 мс. Ответ функции: 29
Для simple [(100,)] ожидание составило: 2 мс. Ответ функции: 541
Для e_cieve [(100,)] ожидание составило: 2 мс. Ответ функции: 541
Для simple [(1000,)] ожидание составило: 384 мс. Ответ функции: 7919
Для e_cieve [(1000,)] ожидание составило: 84 мс. Ответ функции: 7919
Для simple [(5000,)] ожидание составило: 11757 мс. Ответ функции: 48611
Для e_cieve [(5000,)] ожидание составило: 2528 мс. Ответ функции: 48611


'''
