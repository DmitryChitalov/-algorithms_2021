"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (теорию по Решету нужно искать в сети)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000

Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма.

Укажите формулу сложности О-нотация каждого алгоритма
и сделайте обоснование результатам.
"""
from timeit import timeit


def simple(i):
    """Без использования «Решета Эратосфена», квадратичная сложность"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def eratosthenes(b):
    """Сложность O(n log(log n))"""
    a, i = list(range(b+1)), 2
    a[1] = 0
    while i ** 2 <= b:
        if a[i] != 0:
            j = i * 2
            while j <= b:
                a[j] = 0
                j += i
        i += 1
    a = list(set(a))
    a.remove(0)
    return a


# for i in [10, 100, 1000]:
#     print(f"simple({i}): {timeit('simple(i)', globals=globals(), number=1000)}")

for i in [10, 100, 1000]:
    print(f"eratosthenes({i}): {timeit('eratosthenes(i)', globals=globals(), number=1000)}")

"""
simple(10): 0.015522000000000001
simple(100): 1.6937566
simple(1000): 363.6404689
Обычная функция, время на 1000 операций больше пяти минут

eratosthenes(10): 0.0020175000000000054
eratosthenes(100): 0.0162418
eratosthenes(1000): 0.1273657
Решето Эратосфена, время на 1000 операций меньше секунды
Разница алгоритмов начинает быть существенной со 100+ элементов. На тысяче она становится колосальной
"""
