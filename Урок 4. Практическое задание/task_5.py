"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000

Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма.

Укажите формулу сложности О-нотация каждого алгоритма
и сделайте обоснование результатам.
"""
import math
from timeit import timeit


def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:  # O(n)
        t = 1
        is_simple = True
        while t <= n:  # O(n)
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def sieve(n):
    lst = list(range(2, math.ceil(n*math.log(n*math.log(n)))))
    ps = []
    while lst:
        p = lst[0]
        ps.append(p)
        lst = [i for i in lst if i % p != 0]
    return ps[n-1]


i = int(input('Введите порядковый номер искомого простого числа: '))

print(f"Для {i}-го простого числа ({simple(i)}), время поиска наивным алгоритмом: "
      f"{timeit('simple(i)', globals=globals(), number=100)}")
print(f"Для {i}-го простого числа ({sieve(i)}), время поиска решетом Эратосфена: "
      f"{timeit('sieve(i)', globals=globals(), number=100)}")

# Для всех замеров количество повторов равно 100.
# Для 10-го простого числа (29), время поиска наивным алгоритмом: 0.0017481999999997555
# Для 10-го простого числа (29), время поиска решетом Эратосфена: 0.0009535999999998879
# Для 100-го простого числа (541), время поиска наивным алгоритмом: 0.20629480000000022
# Для 100-го простого числа (541), время поиска решетом Эратосфена: 0.04662129999999998
# Для 1000-го простого числа (7919), время поиска наивным алгоритмом: 32.2714276
# Для 1000-го простого числа (7919), время поиска решетом Эратосфена: 3.944714300000001
# Прослеживается увеличение эффективности решета Эратосфена с увеличением диапазона поиска простых чисел.
# Сложность простого алгоритма O(n^2) -  в работе алгоритма применены два цикла, один вложен в другой.
# Сложность "решета"  O(n log(log n)) - каждый проход алгоритма кратно уменьшает количество исследуемых
# элементов, пока не останется один и таких проходов столько, сколько простых чисел окажется в заданном диапазоне.

