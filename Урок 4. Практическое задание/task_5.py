"""
Задание 5.**

Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (теорию по Решету нужно искать в сети)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000

Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма.

Укажите формулу сложности О-нотация каждого алгоритма
и сделайте обоснование результатам.
"""

from timeit import timeit


def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


number = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(number))


def eratosfen_sieve(i):
    n = 2
    l = 10000
    sieve = [x for x in range(l)]
    sieve[1] = 0
    while n < l:
        if sieve[n] != 0:
            m = n * 2
            while m < l:
                sieve[m] = 0
                m += n
        n += 1
    set_sieve = set(sieve)
    set_sieve.remove(0)
    sieve = list(set_sieve)
    sieve.sort()
    return sieve[i - 1]


print(eratosfen_sieve(number))
print(timeit("simple(number)", globals=globals(), number=100))
print(timeit("simple(number)", globals=globals(), number=100))

"""
Порядковый номер числа - 10:
29
29
0.006647928000000025
0.0037155979999998756
Порядковый номер числа - 100:
0.28280993
0.26307961500000054
Порядковый номер числа - 150:
863
863
0.6597167339999999
0.6558775700000004
Порядковый номер числа - 1000:
7919
7919
43.472674898
43.726075731
Порядковый номер числа - 1100:
8831
8831
54.412305767999996
53.715853423999995
До искомого числа под 1000м номером оба алгоритма работают примерно одинаково, 
но функция без применения решета Эратосфена работает в среднем чуть быстрее.
С увеличением порядкового номера числа время работы обеих функций замедляется +- в 100 раз.
После того, как искомый порядковый номер становится больше 1000, работа с решетом Эратосфена получается 
более эффективной.
Простой алгоритм имеет сложность O(n**2) из-за вложенных одна в другую операций сложностью О(n), 
алгоритм с решетом Эратосфена имеет сложность O(n log(log n)).
"""
