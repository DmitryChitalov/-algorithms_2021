"""
Задание 1.
Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива
Сделайте замеры времени выполнения кода с помощью модуля timeit
Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.
Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается
И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""
from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


array_fnc = [1, 3, 10, 20, 41, 2, 4, 5, 9, 90]

func_2 = [i for i in range(len(array_fnc)) if array_fnc[i] % 2 == 0]

print(type(func_1(array_fnc)))
# print(type(func_2))
print(timeit("func_1(array_fnc)", globals=globals()))
print(timeit("func_2", globals=globals()))

# <class 'list'>
# 1.1196811
# 0.020213000000000036
# Выполнение функции func_2 быстрее, чем выполнение функции func_1 на 1.0994681 секунд

num_1 = 1.1196811
num_2 = 0.020213000000000036

if num_2 > num_1:
    nums_1 = num_2 - num_1
    print(f'Выполнение функции func_1 быстрее, чем выполнение функции func_2 на {nums_1} секунд')
else:
    nums_2 = num_1 - num_2
    print(f'Выполнение функции func_2 быстрее, чем выполнение функции func_1 на {nums_2} секунд')

print("_" * 500)
print(timeit("func_1(array_fnc)", globals=globals(), number=10000))
print(timeit("func_2", globals=globals(), number=10000))

# number=10000
# 0.011881799999999998
# 0.00020419999999998772
# Выполнение функции func_2 быстрее, чем выполнение функции func_1 на 0.01167760000000001 секунд

num_3 = 0.011881799999999998
num_4 = 0.00020419999999998772

if num_4 > num_3:
    nums_3 = num_4 - num_3
    print(f'Выполнение функции func_1 быстрее, чем выполнение функции func_2 на {nums_3} секунд')
else:
    nums_4 = num_3 - num_4
    print(f'Выполнение функции func_2 быстрее, чем выполнение функции func_1 на {nums_4} секунд')

"""
    При первом запуске выполнение спискового включения для поиске из одного массива
     индексы четных элементов с сохранением в другой массив, была быстрее чем выполнение привычного вида функции.
     
    При повторном запуске с увелечением запусков на 10000, выполнение спискового включения снова показал 
    хороший результат поиска из одного массива индексы четных элементов с сохранением в другой массив
    чем выполнение привычного вида функции.
"""
