"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание считается не принятым
"""
from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    new_arr = [i for i in range(len(nums)) if nums[i] % 2 == 0]
    return new_arr


print(timeit("""
def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr
"""))

# Результат выполнения иттератора с функцией append получился 0.147166813
# Попробуем замерить реализацию с помощью спискового включения
print('--------------------')
print(timeit("""
def func_2(nums):
    new_arr = [i for i in range(len(nums)) if nums[i] % 2 == 0]
    return new_arr
"""))

# Результат выполнения спискового включения оказался быстрее и составил 0.12426284399999998
# Вывод: списковое включение приоритетнее для использования. (Если бы существовала встроенная функция для формирования
# массива чётных элементов другого массива, то вероятнее она была бы быстрее, но такой функции нет)
