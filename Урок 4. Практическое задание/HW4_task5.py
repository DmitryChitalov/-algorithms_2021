"""
Задание 5.**
Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).
Попробуйте решить эту же задачу,
применив алгоритм "Решето Эратосфена" (https://younglinux.info/algorithm/sieve)
Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма.
Укажите формулу сложности О-нотация каждого алгоритма
и сделайте обоснование результатам.
"""


import timeit



def simple(i):
    # O(n**2)
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def eratosfen(i):
    # O(n log(log n))
    """Используя алгоритм «Решето Эратосфена»"""
    n = 2
    l = 10000
    sieve = [x for x in range(l)]
    sieve[1] = 0
    while n < l:
        if sieve[n] != 0:
            m = n * 2
            while m < l:
                sieve[m] = 0
                m += n
        n += 1
    set_sieve = set(sieve)
    set_sieve.remove(0)
    sieve = list(set_sieve)
    sieve.sort()
    return sieve[i - 1]


i = int(input('Введите порядковый номер искомого простого числа: '))

print(simple(i))
print(eratosfen(i))

print(timeit.timeit("simple(i)", globals=globals(), number=1000))
print(timeit.timeit("eratosfen(i)", globals=globals(), number=1000))



"""
результат

Введите порядковый номер искомого простого числа: 340
2287
2287
32.9490331
3.630360599999996


Введите порядковый номер искомого простого числа: 5
11
11
0.0003780999999998258
0.3083414000000002


Введите порядковый номер искомого простого числа: 115
631
631
0.3186447000000001
0.31932420000000006

на низких порядковых номерах чисел простой алгоритм эффективнее

на высоких порядковых номерах эффективнее Решето Эратосфена

начиная со 115 числа эффективность решета начинает превышать простой алгоритм, при условии небольшого количества повторяемых функций (100)

Введите порядковый номер искомого простого числа: 115
631
631
27.388368399999997
31.570601599999996

При увеличении количества повторений, эффективность решета немного ниже эффективности просто алгоритма

