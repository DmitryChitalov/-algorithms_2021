"""
Задание 4.
Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.
Сделайте профилировку каждого алгоритма через timeit
Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
Без аналитики задание считается не принятым!
"""
import timeit

array = [1, 3, 1, 3, 4, 5, 1, 5]


# array = [5, 5, 5, 5, 5, 5, 5, 5]


def func_1():
    m = 0  # O(1)
    num = 0  # O(1)
    for i in array:  # O(n)
        count = array.count(i)  # O(n)
        if count > m:  # O(1)
            m = count  # O(1)
            num = i  # O(1)
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'
#  Общая сложность О(n^2)

def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'
#  Общая сложность О(n^2) по той же причине, что и в первой функции

def func_3():
    array.sort(reverse=True)  # O(nlogn)
    elem = array[0]  # O(1)
    m = 0  # O(1)
    for i in array:  # O(n), и то, перебор идет не всегда по всем элементам, цикл прерывается, что уменьшает время выполнения
        if i == elem:  # O(1)
            m += 1  # O(1)
        else:
            break
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {m} раз(а)'
#  Общая сложность О(nlogn)

# print(func_1())
# print(func_2())
# print(func_3())
print(timeit.timeit('func_1()', globals=globals()))
print(timeit.timeit('func_2()', globals=globals()))
print(timeit.timeit('func_3()', globals=globals()))

# Функции 1, 2, 3 выдали результаты 1.4157189, 1.8284983, 0.6213129 соответственно для первого списка.
# Причина состоит в использовании встроенных функций в третьей функции и отсутствие дополнительных переборов внутри цикла
#  см. О-нотацию.
