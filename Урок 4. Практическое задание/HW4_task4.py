"""
Задание 4.
Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.
Сделайте профилировку каждого алгоритма через timeit
Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
Без аналитики задание считается не принятым!
"""
from collections import Counter
from timeit import timeit

new_array = [1, 3, 1, 3, 4, 5, 1, 3, 1, 1, 1, 4, 6, 7, 8, 1, 1, 12]


# через пересчет в цикле и переменную
def func_1(array):
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


# через создание нового списка количества элементов и получения максимального значения списка
def func_2(array):
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


# третий вариант со счетчиком-коллекцией и получением пары значений элемент\количество из него
def func_3(array):
    counter_obj = Counter(array)
    list_result = Counter(array).most_common(1)
    elem, max_2 = list_result.pop(0)
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


# четвертый вариант через словарь
def func_4(array):
    count = {}
    for s in array:
        if s in count:
            count[s] += 1
        else:
            count[s] = 1
    elem = max(count, key=count.get)
    max_2 = count[elem] 
    return f'Чаще всего встречается число {elem}, '\
           f'оно появилось в массиве {max_2} раз(а)'


print(func_1(new_array))
print(func_2(new_array))
print(func_3(new_array))
print(func_4(new_array))

# профилировка

print(
    'через пересчет в цикле и переменную ',
    timeit(
        f'func_1({new_array})',
        globals=globals(),
        number=100000))

print(
    'через создание нового списка ',
    timeit(
        f'func_2({new_array})',
        globals=globals(),
        number=100000))

print(
    'через коллекцию-счетчик ',
    timeit(
        f'func_3({new_array})',
        globals=globals(),
        number=100000))

print(
    'через словарь ',
    timeit(
        f'func_4({new_array})',
        globals=globals(),
        number=100000))
"""
Чаще всего встречается число 1, оно появилось в массиве 8 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 8 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 8 раз(а)
Чаще всего встречается число 1, оно появилось в массиве 8 раз(а)
через пересчет в цикле и переменную  0.6182833000000001
через создание нового списка  0.6270091
через коллекцию-счетчик  0.6097476000000002
через словарь  0.3021705000000001

Самое эффективное решение из предложенных получается через помещение элементов в словарь (но не коллекцию-счетчик), без использования встроенного count, 
второе по эффективности через коллекцию-счетчик, третье - цикл и переменная c count. Создание нового списка всегда
менее эффективно, каждый раз заново определяется наибольшее значение в новом списке






