from timeit import timeit

"""
Задание 1.
Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива
Сделайте замеры времени выполнения кода с помощью модуля timeit
Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.
Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается
И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    """
    Я думаю что мы немного снизили время выполнения скрипта за счет того что, ушли от двух функций к одной
    :param nums:
    :return:
    """
    return [i for i, j in enumerate(nums) if not j % 2]


n = [10, 20, 13, 30, 40, 39, 57, 13, 20, 53, 101]
print(timeit('func_1(n)', globals=globals()))
print(timeit('func_2(n)', globals=globals()))

print(func_1(n))
print(func_2(n))
