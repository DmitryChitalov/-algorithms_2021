"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается
"""

from timeit import timeit

def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

# оптимизированный вариант № 1
def func_2(nums):
    new_arr = []
    for i in nums:
        if i % 2 == 0:
            new_arr.append(i)
    return new_arr

# оптимизированный вариант № 2
def func_3(nums):
    new_arr = [el for el in nums if el % 2 == 0]
    return new_arr

if __name__ == '__main__':
    nums = [el for el in range(100)]
    print(f'Время выполнения заданной функции - {timeit("func_1(nums)", globals=globals())} секунд.') # время выполнения - 8.68102151
    print(f'Время выполнения оптимизированной функции (вариант № 1) - {timeit("func_2(nums)", globals=globals())} секунд.') # время выполнения - 6.425388989 
    print(f'Время выполнения оптимизированной функции (вариант № 2) - {timeit("func_3(nums)", globals=globals())} секунд.') # время выполнения - 4.925325863000001

"""
Что сделал и почему:

вариант № 1 - убрал вычисление длины массива с помощью функции len и функцию range, поскольку это чрезмерно и бессмысленно.
вариант № 2 - заменил создание нового массива с использованием цикла на списковое включение, данный механизм в два раза эффективнее заданной функции.
"""

