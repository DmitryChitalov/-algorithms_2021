"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""


from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    return [nums[i] for i in range(len(nums)) if nums[i] % 2 == 0]


my_nums = [i*i for i in range(100000)]
stmnts = ['func_1(my_nums)', 'func_1(my_nums)']

for st in stmnts:
    print(f'{timeit("st", globals=globals(), number=10000000)}')

"""
В данном случае очень удобно использоваться списковое ключение.
Но его использование не ускроило, а наоборот, несколько замедлило работу при работе с небольшим списком.
my_nums = [i*i for i in range(1000)]
0.2346987
0.24731000000000003

При использовании более длинного списка, ситуация изменилась:
my_nums = [i*i for i in range(100000)]
0.21121489999999998
0.20346799999999998
"""
