"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""

from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    return [i for i in range(len(nums)) if nums[i] % 2 == 0]


# def func_3(nums):     # -> усложнение
#     return list(filter(lambda x: x % 2 == 0, nums))


n = [i for i in range(2000)]

print(timeit("func_1(n)", globals=globals(), number=10000))     # 2.901357545
print(timeit("func_2(n)", globals=globals(), number=10000))     # 2.274076903
# print(timeit("func_3(n)", globals=globals(), number=10000))   # 3.2073144769999997

# Проведены замеры времени выполнения кода с помощью модуля timeit -> 2.901357545
# Оптимизирован алгоритм с помощью list comprehension, чтобы снизить время выполнения.
# Проведены повторные замеры -> 2.274076903
# В результате заметно снижение времени выполнения кода ввиду более оптимального алгоритма list comprehension,
# в том числе отсутствия метода append().
