"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""
from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


# Избавимся от append списковым включением, что ускорит работу
def func_2(nums):
    return [num for num in range(len(nums)) if nums[num] % 2 == 0]


# Сделаем тестовый массив
test_list = list(range(1000))

print(timeit('func_1(test_list)', 'from __main__ import func_1, test_list', number=1000))  # 0.0534684
print(timeit('func_2(test_list)', globals=globals(), number=1000))  # 0.043865299999999996

"""
Вывод списковое включение работает быстрее, значит оно является более оптимальным. К тому же выглядит гораздо
лаконичнее
"""