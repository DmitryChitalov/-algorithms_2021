"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается
"""
from timeit import timeit
numbers = [i for i in range(10000)]


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


time_func_1 = timeit('func_1(numbers)', globals=globals(), number=1000)
print(f'Время выполнения функции {func_1.__name__} - {time_func_1} сек.')


# Оптимизация
def func_2(nums):
    return [i for i in range(len(nums)) if nums[i] % 2 == 0]


time_func_2 = timeit('func_2(numbers)', globals=globals(), number=1000)
print(f'Время выполнения функции {func_2.__name__} - {time_func_2} сек.')

"""
Вывод: скорость функции для поиска четного числа с использованием list comprehension выполняется быстрее, чем
функция, реализованная, через итерацию и добавление нужного элемента в пустой список, поскольку
list comprehension - это встроенный в Python механизм генерации списков,
 и у него только одна задача — это построить список, а значит, выполнять свою функцию он будет быстрее.
"""
