"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""

import timeit

def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

# выполнил фенкцию func_1 посредством спискового включения, при этом исключил new_arr.append(i), что привело к уменьшению количества операций
def func_2(nums):
    new_arr = [i for i, el in enumerate(nums) if el % 2 ==0]
    return new_arr

# получил данные для ввода в функции
data_nums = [el for el in range(100)]

print(
    timeit.timeit(
         "func_1(data_nums[:])",
         globals=globals(),
         number=10000))

print(
    timeit.timeit(
         "func_2(data_nums[:])",
         globals=globals(),
         number=10000))
# выполнение функции func_2 быстрее выполнения функции fumc_1 на ~30% (0.1035043 vs 0.1538198)