"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""
from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    return [x for x in nums if x % 2 == 0]


arr_1 = [el for el in range(10)]
arr_2 = [el for el in range(100)]

print(f'Время выполнения func_1 при 10 элементах массива: {timeit("func_1(arr_1)", globals=globals())}')
print(f'Время выполнения func_2 при 10 элементах массива: {timeit("func_2(arr_1)", globals=globals())}')
print(f'Время выполнения func_1 при 100 элементах массива: {timeit("func_1(arr_2)", globals=globals())}')
print(f'Время выполнения func_2 при 100 элементах массива: {timeit("func_2(arr_2)", globals=globals())}')

'''
Время выполнения func_1 при 10 элементах массива: 1.2549259350000002
Время выполнения func_2 при 10 элементах массива: 0.8274711169999998
Время выполнения func_1 при 100 элементах массива: 9.273813895
Время выполнения func_2 при 100 элементах массива: 5.611457085
Выводы:
Используя list comprehension можно добиться решения в 1 строку без использования цикла for и встроенных функций
и добиться более быстрого выполнения функции.
Также пробовался вариант с list(filter(lambda x: x % 2 == 0, nums)), но он не привел к экономии времени 
(время выполнения при 10 элементах списка: 1.2322935899999998, 
время выполнения при 100 элементах списка: 9.532127508000002).
'''
