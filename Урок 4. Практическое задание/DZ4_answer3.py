"""
Задание 3.
Приведен код, формирующий из введенного числа обратное по порядку входящих в него
цифр и вывести на экран.
Сделайте профилировку каждого алгоритма через cProfile и через timeit
Обязательно предложите еще свой вариант решения и также запрофилируйте!
Сделайте вывод, какая из четырех реализаций эффективнее и почему!!!
Без аналитики задание считается не принятым
"""
import timeit, cProfile


def revers_1(enter_num, revers_num=0):
    if enter_num == 0:
        return revers_num
    else:
        num = enter_num % 10
        revers_num = (revers_num + num / 10) * 10
        enter_num //= 10
        return revers_1(enter_num, revers_num)


def revers_2(enter_num, revers_num=0):
    while enter_num != 0:
        num = enter_num % 10
        revers_num = (revers_num + num / 10) * 10
        enter_num //= 10
    return revers_num


def revers_3(enter_num):
    enter_num = str(enter_num)
    revers_num = enter_num[::-1]
    return revers_num


def revers_4(enter_num):
    n = list(str(enter_num))
    n.reverse()
    revers_num = "".join(n)
    return revers_num


# Измерение с помощью timeit
print(f"{timeit.timeit('revers_1(123456789)', globals=globals())} сек.")
print(f"{timeit.timeit('revers_2(123456789)', globals=globals())} сек.")
print(f"{timeit.timeit('revers_3(123456789)', globals=globals())} сек.")
print(f"{timeit.timeit('revers_4(123456789)', globals=globals())} сек.")

# Время выполнения функции 1 оказалось самым долгим, т.к. она содержит рекурсию (2.08376 с).
# Время выполнения функции 2 оказалось менее долгим, но не самым быстрым, т.к. она содержит цикл (1.37518 с).
# Время выполнения функции 3 оказалось самым быстрым, т.к. она содержит только простейшие встроенные функции (0.28388 с).
# Время выполнения функции 4 оказалось несколько большим, чем для 3, что связанно c более сложным алгоритмом, в который
# входит сначала трансформация в строку, потом в список, реверс, а потом опять в строку (0.48794 с).

# Измерение с помощью cProfile
cProfile.run('revers_1(123456789123456789123456789123456789)')
cProfile.run('revers_2(123456789123456789123456789123456789)')
cProfile.run('revers_3(123456789123456789123456789123456789)')
cProfile.run('revers_4(123456789123456789123456789123456789)')

# С помощью cProfile померились одни нули, так что не понятно какая функция отработала быстрее.
# Можно только сказать, что функция 1 отработает намного медленее остальных, т.к. в данном случае она сделала 40 вызовов
# что намного больше чем для других функций (что и понятно, она же рекурсивная)
