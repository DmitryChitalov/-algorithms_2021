"""
Задание 3.
Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

my_dict ={'one': 2000, 'two': 5000, 'three ': 1000, 'four ': 3000, 'five ': 7000, 'six': 8000, 'seven ': 9000, 'eight': 6000};

sorted_values = sorted(my_dict.values(), reverse=True)     #O(n Log n)
sorted_result = sorted_values[:3] #O(3)
my_dict_new = {};  #O(1)
for i in sorted_result: #O(n)
    for j in my_dict.keys(): #O(n)
        if my_dict[j] == i: #O(1)
            my_dict_new[j] = my_dict[j] #O(1)
            break
print('1 вариант: ', my_dict_new);


"""2 вариант
   Сложность: O(n) 
"""

my_dict ={'one': 2000, 'two': 5000, 'three ': 1000, 'four ': 3000, 'five ': 7000, 'six': 8000, 'seven ': 9000, 'eight': 6000};

for i in range(3):  #O(3)
    v = list(my_dict.values())  #O(n)
    k = list(my_dict.keys())   #O(n)
    print(k[v.index(max(v))], max(v)) #O(n)
    my_dict.pop(k[v.index(max(v))]);  #O(1)

# 2 вариант легче, так как сложность

