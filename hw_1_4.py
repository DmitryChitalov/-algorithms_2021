"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


def check_reg_1(users, user_login, user_password):
    list_password = []  # O(1)
    list_activation = []  # O(1)
    for el in list(users.values()):  # O(n)
        list_password.append(el[0])  # O(1)
        list_activation.append(el[1])  # O(1)
    if user_login not in list(users.keys()) or user_password not in list_password:  # O(n)
        return 'Введен неверный логин или пароль'  # O(1)
    elif users[user_login][1]:
        return 'Пользователь допущен к ресурсы'  # O(1)
    else:
        return 'Активируйте учетную запись'  # O(1)


# итоговая сложность O(n)

def check_reg_2(users, user_login, user_password):
    if users.get(user_login):  # O(1)
        if users.get(user_login)[0] != user_password:  # O(1)
            return 'Введен неверный пароль'  # O(1)
        elif users.get(user_login)[0] == user_password and users.get(user_login)[1]:  # O(1)
            return 'Пользователь допущен к ресурсы'  # O(1)
        else:
            return 'Активируйте учетную запись'  # O(1)
    else:
        return 'Введен неверный логин'  # O(1)


# итоговая сложность O(1), следовательно, этот алгоритм лучше


users = {'Иван': ['1234', True],
         'Маша': ['qwerty', False],
         'Aня': ['parol', True]
         }
user_login = input('Введите логин: ')
user_password = input('Введите пароль: ')
print(check_reg_1(users, user_login, user_password))
print(check_reg_2(users, user_login, user_password))
