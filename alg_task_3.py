"""
Задание 3.
Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
Задание творческое. Здесь нет жестких требований к выполнению.
"""

# Первый способ, сложность: # O(N^3 log N)
company = {
    'Sber': 10000,
    'Geekbrains': 30000000,
    'Lukoil': 200000000000,
    'Apple': 500,
    'Tinkoff': 200000
} # O(1)
new_company = {} # O(1)

big_company = [] # O(1)
my_list = [] # O(1)
for key, val in company.items(): # O(n)
    my_list.append(val) # O(1)
    big_company = sorted(my_list, reverse=True) # O(N^2 log N)
max_big_company = big_company[3] # O(1)
for key, val in company.items(): # O(n)
    if val > max_big_company: # O(1)
        new_company.update({key: val})
print(new_company)

print('')
print('')
print('')

# Второй способ, сложность: # O(N^2 Log N)
company = {
    'Sber': 10000,
    'Geekbrains': 30000000,
    'Lukoil': 200000000000,
    'Apple': 500,
    'Tinkoff': 200000
} # O(1)

list_company = list(company.items())# O(n)
list_company.sort(key=lambda i: i[1], reverse=True) # O(N^2 Log N)
big_company = list_company[:3] # O(1)
for i in big_company: # O(n)
    print(i[0], ':', i[1]) # O(1)

"""
Второй вариант более эффективен:
первое - более лаконичное и короткое решение,
второе - меньшая сложность
"""
