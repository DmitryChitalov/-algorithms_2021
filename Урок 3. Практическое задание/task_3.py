"""
Задание 3.
Определить количество различных (уникальных) подстрок с использованием хеш-функции.
Дана строка S длиной N, состоящая только из строчных латинских букв.

Подсказка: примените вычисление хешей для подстрок с помощью хеш-функций и множества
Можно воспользоваться ф-цией hash() (см. материалы к уроку)

Пример:
рара - 6 уникальных подстрок

рар
ра
ар
ара
р
а


Экономия на размере хранимых данных (для длинных строк) и
скорость доступа вместе с уникальностью элементов,
которые даёт множество, сделают решение коротким и эффективным.
"""

""" 
Решил делать по-своему, никак у Вас в примере разбора ДЗ, конечно по-делитантски
наверно, но зато свой вариант и рабочий вроде как :)
"""
my_set = set()
string = 'papa'
# string = 'programs'

for i, j in enumerate(string):
    my_set.add(hash(string[i:]))
    print(string[i:], end=' ')
    my_set.add(hash(string[:i]))
    print(string[:i], end=' ')
    my_set.add(hash(string[i:-i]))
    print(string[i:-i], end=' ')

print(f'\n\n{my_set}\n\nКол-во элементов в множестве равно {len(my_set) - 1}')
"""
Результат: papa   apa p ap pa pa  a pap 
{0, 4812369996583593481, 5380397796456420073, -2519774292450364081, -8242869673442554057, 
-345569417200825868, -2731318877471992681, -1105171371817549124}
не понимаю откуда берется ноль в начале, поэтому для точного подсчёта пришлось в выводе 
f-string ставить {len(my_set) - 1}
"""