"""
Задание 1.
Реализуйте свои пользовательские функции, в которых реализуйте:
a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def time_measure(func):
    def g(n):
        time1 = time.time()
        obj = func(n)
        time2 = time.time()
        print(f'Время выполнения: {time2 - time1} c')
        return obj
    return g


@time_measure
def user_list(n):
    user_list = []
    for i in range(n):
        user_list.append(i)
    return user_list

@time_measure
def user_list_select(us_list):
    for i in range(0, len(us_list)):
        us_list[i]


@time_measure
def user_dict(n):
    user_dict = {}
    for i in range(n):
        user_dict[i] = i
    return user_dict

@time_measure
def user_dict_select(us_dict):
    for i in list(us_dict.keys()):
        us_dict[i]


user_list = user_list(100000000)
user_dict = user_dict(100000000)
# Время заполнения словаря больше, т.к. требуется проведение операций по хэшированию данных

user_list_select(user_list)
user_dict_select(user_dict)
# Время выборки из словаря должно быть меньше, но в данном случае, в связи с особеностями алгоритма оно получилось даже чуть больше чем для списка
# Из-за необходимости вбивать большое количество данных для получения измеряемых времён, возникает необходимость автоматизации этого проесса,
# что влечет усложнение алгоритмов и искажение результатов. В ручную это делать что-то совсем не охота.