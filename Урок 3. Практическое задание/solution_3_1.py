import time

"""
Задание 1.
Реализуйте свои пользовательские функции, в которых реализуйте:
a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать,
   так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""


def profile(f):
    def g(x):
        start_time = time.time()
        value = f(x)
        end_time = time.time()
        print(end_time-start_time)
        return value
    return g


@profile
def create_list_1(n):
    """
    Минимальное время выполнения, потому что скрипту необходимо только перебрать значения и последовательно
    вставлять в конец списка
    O(n)
    :param n:
    :return:
    """
    return [i for i in range(n)]


@profile
def create_list_2(n):
    """
    Время работы скрипта увеличилось, так как необходимо еще вычислить i
    O(n)
    :param n:
    :return:
    """
    return [i+i for i in range(n)]


@profile
def create_dict_1(n):
    """
    Время создания словаря, по сравнению со списком, увеличено, это компенсируется скоростью чтения
    O(n)
    :param n:
    :return:
    """
    return {i: i for i in range(n)}


@profile
def create_dict_2(n):
    """
    Так же наблюдается увеличение времени работы, так как скрипт усложняется вычислением значения i
    O(n)
    :param n:
    :return:
    """
    return {i: i+i for i in range(n)}


@profile
def read_list(n):
    """
    Даже взятие по индексу проигрывает словарю, про обычный поиск можно даже не писать,
    опять же мы нашли случайный элемент в списке, а не значение 9999999:)
    Если мы хотим увеличить скорость по отношению к обычному поиску,
    то надо воспользоваться бинарным поиском.
    O(1)
    :param n:
    :return:
    """
    return n


@profile
def read_dict(n):
    """
    Преимущество словаря заключается в быстром чтении из него, независимо от количества элементов
    O(1)
    :param n:
    :return:
    """
    return n.get(9999999)


val = 10000000
print('Создание списков')
crt_lst = create_list_1(val)
create_list_2(val)

print('Создание словарей')
crt_dct = create_dict_1(val)
create_dict_2(val)

print('Чтение списка')
read_list(crt_lst)

print('Чтение словаря')
read_dict(crt_dct)
