"""
Задание 2.
Ваша программа должна запрашивать пароль
Для этого пароля вам нужно получить хеш, используя функцию sha256
Для генерации хеша обязательно нужно использовать криптографическую соль
Обязательно выведите созданный хеш.

Далее программа должна запросить пароль повторно
Вам нужно проверить, совпадает ли пароль с исходным
Для проверки необходимо сравнить хеши паролей

ПРИМЕР:
Введите пароль: 123
В базе данных хранится строка: 555a3581d37993843efd4eba1921f1dcaeeafeb855965535d77c55782349444b
Введите пароль еще раз для проверки: 123
Вы ввели правильный пароль

Обязательно усложните задачу! Добавьте сохранение хеша в файле и получение его из файла.
А если вы знаете как через Python работать с БД, привяжите к заданию БД и сохраняйте хеши там.
"""

import hashlib
import uuid

with open('saved_pass.txt', 'w') as pass_file:
    pass_str = input('Введите пароль: ')

    salt = uuid.uuid4().hex

    # В первой строке сохраняем соль
    pass_file.write(salt)

    save_pass_str = hashlib.sha256(salt.encode() + pass_str.encode()).hexdigest()

    # Во второй - схешированный пароль
    pass_file.write(save_pass_str)

    print(f'salt = {salt}')
    print(f'saved pass string = {save_pass_str}')

#  Имитируем проверку введенного пароля
with open('saved_pass.txt', 'r') as pass_file:
    saved_str = pass_file.readline()
    salt = saved_str[0:32]
    saved_pass_str = saved_str[32:]

    pass_str = input('Введите пароль повторно для проверки: ')
    if hashlib.sha256(salt.encode() + pass_str.encode()).hexdigest() == saved_pass_str:
        print('Пароль введен верно!')
    else:
        print('Пароль введен неверно!')

# Возможно я что-то упустил в теоретической части. Соль необходимо сохранять в файл в несхешированном виде
# чтобы иметь возможность проверить потом сохраненный пароль?
# И еще один вопрос: в ряде источников в интернете прочитал, что uuid генерит  не случайную, а уникальную
# последовательность, и использовать uuid для генерации соли не рекомендуется. Так ли это?
