"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time

# Сложность константная O(1)
def time_list(n):
    my_list = []
    my_time = time.time()
    for ls in range(n):
        my_list.append(ls)
    return time.time() - my_time

# Сложность константная O(1)
def time_list_1(n):
    my_time = time.time()
    [ls for ls in range(n)]
    return time.time() - my_time

# Сложность константная O(1)
def time_dict(n):
    my_dict = {}
    my_time = time.time()
    for dc in range(n):
        my_dict[dc] = dc
    return time.time() - my_time

# Сложность константная O(1)
def time_dict_1(n):
    my_time = time.time()
    {dc: dc for dc in range(n)}
    return time.time() - my_time

# Сложность линейная O(n) - перебор элементов
def operation_list(n):
    my_list = [ls for ls in range(n)]
    my_time = time.time()
    [ls * 2 for ls in my_list]
    return time.time() - my_time

# Сложность линейная O(n) - перебор элементов
def operation_dict(n):
    my_dict = {}
    for dc in range(n):
        my_dict[dc] = dc
    my_time = time.time()
    for key, value in my_dict.items():
        my_dict[key] = value*2
    return time.time() - my_time

k = 10000000
print(f'time_list(for ... append)          = {time_list(k)}')
print(f'time_list(генератор в одну строку) = {time_list_1(k)}')
print()
print(f'time_dict(for ... my_dict[dc]=dc)  = {time_dict(k)}')
print(f'time_dict(генератор в одну строку) = {time_dict_1(k)}')
print()
print(f'time_operation_list                = {operation_list(k)}')
print(f'time_operation_dict                = {operation_dict(k)}')

'''
    а) Я считаю, что сложность в предоставленных функциях одинаковая - константная O(n), так как
цикл мы задаем фиксировано range(n), где n например 10000000.
    Результаты замеров показывают, что для заполнения списка лучше использовать генератор списка,
написанный в одну строку. Код более локаничный и замер времени min. Для словаря лучше использовать
наполнение путем цикла for и присваивания нового элемента my_dict[dc] = dc
    Также исходя из замеров видно что заполнение списков более быстрый процесс,  чем словарей. Я думаю, 
что это связано с структурой хранение данных в словарях, а именно для хранения одного элемента словаря,
необходимо обрабатывать ключ: значение, а в списках только значение...
    б) Сложность функций операций над словарями и списками линейная O(n). Поэтому время выполлнения
по замером практически одинаковое 

'''

