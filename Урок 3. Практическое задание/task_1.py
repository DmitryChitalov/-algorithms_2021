"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
"""Пример столкновения хешей"""

from random import randint
from time import time


# Декоратор - для определения времени работы функции
def timer(func):
    def times(*args, **kwargs):
        start_time = time()
        result = func(*args, **kwargs)
        end_time = time()
        print(f"Время выполения функции {func.__name__}: {end_time - start_time} секунд.")
        return result

    return times


# Функции для заполнения списка и словаря
@timer
def inserting_value(lst, value):  # O(n) - линейная
    for i in range(value):
        lst.insert(0, randint(1, 100))


@timer
def inserting_value_1(lst, value):  # O(n) - линейная
    for i in range(value):
        lst.append(i)


@timer
def inserting_value_2(dict, value):  # O(1) - константная
    for i in range(value):
        dict[i] = i


new_list = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"]  # O(len(...)) - зависит
# от размера значений, но в моем случай O(1)
new_list_1 = []  # O(1) - константная
new_list_2 = []  # O(1) - константная
new_list.remove("one")  # O(N) - зависит от длины значений
new_list.pop()  # O(1) - константная
print(new_list[2])  # O(1) - константная

new_dict = {1: "one", 2: "two", 3: "three", 4: "four", 5: "five", 6: "six", 7: "seven",
            8: "eight", 9: "nine", 10: "ten"}  # O(len(...)) - зависит от размера значений, но в моем случай O(1)
new_dict_1 = {}  # O(1) - константная
new_dict.pop(1)  # O(1) - константная
print(new_dict.keys())  # Получение ключей, значений - O(1) - константная

inserting_value(new_list_1, 100000)
inserting_value_1(new_list_2, 100000)
inserting_value_2(new_dict_1, 100000)

# print(new_list)
# print(new_list_1)
# print(new_list_2)
# print(new_dict)
# print(new_dict_1)

"""
Вцелом на маленьких значениях, разница не очень большая, но когда я задал 100000 значений, уже появилась разница, 
конечно с использования модуля Random, вреся очень большое - 10.561063 сек., время заполения списка составило - 
0.077953 сек. и время заполения словаря - 0.038981 сек. Здесь уже стало все гораздо яснее, что время заполения словарей
гораздо быстрее и сложность большенства операции со словарем это - О(1).
Вывод: Что операции со словарями испольнаяются, гораздо быстрее, чем со списками.
"""
