"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать,
   так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""


import time
from random import randint


# Сложность O(n)
def my_rand(n):
    str_ = '123456789ABCDEF'
    return randint(0, n) * str_[randint(0, len(str_) - 1)]


def benchmark(func):

    def wrapper(arg1, arg2):
        start = time.time()
        func(arg1, arg2)
        end = time.time()
        print('[*] Время выполнения: {} секунд.'.format(end - start))

    return wrapper


@benchmark
def filling(some_obj, n):
    for i in range(0, n):
        if type(some_obj) == dict:
            some_obj[n] = my_rand(n)     # Сложность O(n)
        if type(some_obj) == list:
            some_obj.append(my_rand(n))  # Сложность O(n)


@benchmark
def my_updating(some_obj, n):
    for i in range(0, n-1):
        some_obj[n] = my_rand(n)  # Сложность O(n)


my_dict = dict()
my_list = []
print(f'Сравнение заполнения')
print('Словарь')
benchmark(filling(my_dict, 10000))
print('Список')
benchmark(filling(my_list, 10000))

"""
Налицо более бысрое заполнение словаря. Похоже, что аппенд затормаживает алгоритм. 
"""

print(f'\nСравнение обновления данных')
print('Словарь')
benchmark(my_updating(my_dict, 9999))
print('Список')
benchmark(my_updating(my_list, 9999))
"""
А вот в уже созданных объектах, наоборот. Словарь медленнее.
"""

