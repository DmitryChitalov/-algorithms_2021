"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка
   и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: если вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


my_list = []
my_list2 = []
my_dict = {}
elem = 100000


def t_delta(func):
    def wrapper(*args, **kwargs):
        start_val = time.time()
        ret = func(*args, **kwargs)
        end_val = time.time()
        delta = end_val - start_val
        print(f'Время выполнения {func.__name__}: {delta}')
        return ret
    return wrapper


@t_delta
def dict_fill(elt):  # Заполнение словаря количеством элементов = elem + поиск элемента в словаре.
    for i in range(elt):
        if i not in my_dict:  # O(1)
            my_dict[i] = i  # O(1)
    return my_dict


@t_delta
def list_fill(elt):  # Заполнение списка количеством элементов = elem + поиск элемента в списке.
    for i in range(elt):
        if i not in my_list:  # O(n)
            my_list.append(i)  # O(1)
    return my_list


@t_delta
def dict_fill2(lst):
    return dict(zip(lst, lst))  # O(1) Хотя здесь и используется итератор (по аналогии с циклом O(n)),
    # но так как количество итераций известно (100000), то асимптотическая сложность будет константной.


@t_delta
def lst_fill2(elt):  # Заполнение списка количеством элементов = elem
    for i in range(elt):
        my_list2.append(i)  # O(1)


@t_delta
def dict_pop(dct):
    for i in range(len(dct)):
        dct.popitem()  # O(1)


@t_delta
def list_pop(lst):
    for i in range(len(lst)-1):
        lst.pop()  # O(1)


@t_delta
def dict_replace(dct, elt):
    for i in range(elt):
        dct[i] = i+1  # O(1)


@t_delta
def list_replace(lst, elt):
    for i in range(elt):
        lst[i] = i+1  # O(1)


@t_delta
def list_get(lst):
    for i in range(len(lst)):
        n = lst[i]  # O(1)


@t_delta
def dict_get(dct):
    for i in range(len(dct)):
        n = dct.get(i)  # O(1)


list_fill(elem)
dict_fill(elem)
lst_fill2(elem)
my_dict2 = dict_fill2(my_list)
list_replace(my_list, elem)
dict_replace(my_dict, elem)
list_get(my_list)
dict_get(my_dict)
list_pop(my_list)
dict_pop(my_dict2)

# Тест на моей машине показал следующие результаты:
# Время выполнения list_fill: 67.897864818573 - Заполнение списка 100 000-ми элементов + поиск элемента в словаре.
# Время выполнения dict_fill: 0.01400613784790039 - Заполнение словаря 100 000-ми элементов + поиск элемента в словаре.
# Такая разница обусловлена тем, что в Python средняя сложность поиска ключа в словаре по времени составляет O (1),
# поскольку они реализованы в виде хеш-таблиц.
# Временная сложность поиска в списке в среднем составляет O(n).

# Время выполнения lst_fill2: 0.00899195671081543 -заполнение списка количеством элементов = elem
# Время выполнения dict_fill2: 0.007984638214111328 - заполнение словаря через zip(lst, lst)
# с использованием заранее созданных списков.
# Время выполнения list_replace: 0.007025957107543945 - замена элементов списка
# Время выполнения dict_replace: 0.009014129638671875 - замена элементов словаря
# Время выполнения list_get: 0.0029871463775634766 - получение значений элементов из списка
# Время выполнения dict_get: 0.006984233856201172 - получение значений элементов из словаря
# Время выполнения list_pop: 0.00606226921081543 - удаление/получение последнего элемента из списка
# Время выполнения dict_pop: 0.007982254028320312 - удаление/получение последнего элемента из словаря
# Для получения более стабильного результата все операции были повторены 100K раз, так как количество итераций
# в цикле известно, то их сложность тоже является константной.
# Почти во всех операциях по скорости выигрывают операции со списками, однако,
# поиск в словарях реализован с использованием хеш-таблиц, что дает колоссальное преимущество по времени.
