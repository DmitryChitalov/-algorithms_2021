"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

from time import time
from random import randint

time_test_list = []
time_test_dict = {}


# Декоратор таймера
def timer(function):
    def wrapper(*args):
        start_time = time()
        function(*args)
        running_time = time() - start_time
        print(running_time)

    return wrapper


""" При заполнении списка и словаря строками из случайного символа,
 время работы функций 2млн записей ~2с заполнение списка против ~3c время заполнения словаря.
 Заполнение списка при одинаковой сложности алгоритма, проиходит быстрее"""


# Функция с линейной сложностью O(n), заполняем список строками

@timer
def int_in_list(leng):
    for i in range(leng):
        time_test_list.append(chr(randint(32, 127)) * 10)


int_in_list(2000000)


# Функция с линейной сложностью O(n), заполняем словарь строками
@timer
def int_in_dict(leng):
    for i in range(leng):
        time_test_dict[f'k{i}'] = chr(randint(32, 127)) * 10


int_in_dict(2000000)

""" Доступ к элементу по индексу в списке и по ключу в словаре проиходит одинаково быстро 
за 0.0сек. Имеют константную сложность"""


# Получаем элемент по индексу O(1)
@timer
def element_by_index(idx):
    return time_test_list[idx]


element_by_index(560)


# Получаем значение по ключу O(1)
@timer
def value_by_key(key):
    return time_test_dict[key]


value_by_key('k560')

""" Удаление элемента из словаря выполняется за 0.0 секунд, из списка занимает время.
При удалении элемента их списка остальные элементы сдвигаются """


# Удаляем элемент по индексу О(1)
@timer
def del_element_lst(idx):
    time_test_list.pop(idx)


del_element_lst(560)


# Удаляем элемент по ключу О(1)
@timer
def del_dict_key(key):
    time_test_dict.pop(key)


del_dict_key('k560')

""" Вставка элемента в словарь выполняется за 0.0 секунд, в список занимает время.
При вставке элемента в список остальные элементы сдвигаются """

@timer
def ins_el_list(idx, val):
    time_test_list.insert(idx, val)


ins_el_list(560, 'dsdfefddsa')

@timer
def ins_ket_dict(key, val):
    time_test_dict[key] = val


ins_ket_dict('k5000000', 'dsdfefddsa')

