"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

# a) По 0-нотации сложность одинаковая, однако при вызове модуля time для заполнения словаря требуется больше времени.
# Могу предположить, что это связано с тем, что в словарь заносится ключ:значение, в то время как в список только элемент.

import time
start_time = time.time()

dct = {}
lst = []

# O(1)


def dct_filling():
    for el in range(100):
        dct[el+1] = el


dct_filling()

print("Заполнение словаря: %s секунд" % (time.time() - start_time))

start_time_2 = time.time()

# O(1)


def lst_filling():
    for el in range(100):
        lst.append(el)


lst_filling()
print("Заполнение списка: %s секунд" % (time.time() - start_time_2))


# б) По 0-нотации сложность у списка линейная, при вызове модуля time для удаления элемента в списке требуется больше времени.
# Это связано с тем, что удаление элемента происходит с помощью remove, который и имееют линейную сложность.


start_time_3 = time.time()

# O(n)


def del_el(lst):
    for el in range(len(lst)):
        lst.remove(el)


del_el(lst)

print("Удаление элементов в списке: %s секунд" % (time.time() - start_time_3))

start_time_4 = time.time()

# O(1)


def del_key(dct):
    for el in range(len(dct)):
        dct.pop(el+1)


del_key(dct)

print("Удаление элементов в словаре: %s секунд" % (time.time() - start_time_4))





