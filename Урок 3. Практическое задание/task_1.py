"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time


def timeit(func):
    def wrapper(*args):
        time_start = time.time()
        function_return = func(*args)
        time_end = time.time()
        print(f'===== >>> Время на выполнение {func.__name__} = {(time_end-time_start)*1000.0:.4f} ms')
        return function_return
    return wrapper


# функции для заполнения списка и словаря ==================== Блок А ====================


@timeit
def fill_list_before(n):
    return [el for el in range(n)]

@timeit
def fill_dictionary_before(n):
    return {el: el for el in range(n)}


# функции операций над списком и словарём ==================== Блок Б ====================


@timeit
def set_operations_list(some_list):
    last_value = some_list.pop()            # последнее знач
    # cp = some_list.copy()                   # копия
    some_list.append(999999)                # добавление
    element = some_list[1]                  # получение по индексу
    del some_list[0]                        # удаление
    return some_list


@timeit
def set_operations_dict(some_dict):
    last_value = some_dict.popitem()        # последнее знач
    # cp = some_dict.copy()                   # копия
    some_dict['999999'] = 999999            # добавление
    element = some_dict[1]                  # получение по ключу
    del some_dict[0]                        # удаление
    return some_dict


set_operations_list(fill_list_before(99999))
print('='*70)
set_operations_dict(fill_dictionary_before(99999))

                                                                        # Запуск с длиной списка/словаря в 300 элементов.
# ===== >>> Время на выполнение fill_list_before = 0.0114               # Время заполнения списка короче, чем словаря.
# ===== >>> Время на выполнение set_operations_list = 0.0021            # Время операций над списком и словарем примерно равно,
# ======================================================================#   связываю с не большой длиной списка и словаря.
# ===== >>> Время на выполнение fill_dictionary_before = 0.0210         #
# ===== >>> Время на выполнение set_operations_dict = 0.0021

# ===== >>> Время на выполнение fill_list_before = 0.0091
# ===== >>> Время на выполнение set_operations_list = 0.0019
# ======================================================================
# ===== >>> Время на выполнение fill_dictionary_before = 0.0176
# ===== >>> Время на выполнение set_operations_dict = 0.0017

# ===== >>> Время на выполнение fill_list_before = 0.0091
# ===== >>> Время на выполнение set_operations_list = 0.0017
# ======================================================================
# ===== >>> Время на выполнение fill_dictionary_before = 0.0186
# ===== >>> Время на выполнение set_operations_dict = 0.0017

                                                                        # Запуск с длиной списка/словаря в 99999 элементов.
# ===== >>> Время на выполнение fill_list_before = 3.5806               # Время заполнения списка короче, чем словаря - 
# ===== >>> Время на выполнение set_operations_list = 0.0849            #   это утверждение все также сохранилось.
# ======================================================================# А вот время операций над объектами изменилось - 
# ===== >>> Время на выполнение fill_dictionary_before = 9.9089         #   где операции на словарем происходят гораздо быстрее
# ===== >>> Время на выполнение set_operations_dict = 0.0100

# ===== >>> Время на выполнение fill_list_before = 3.3598
# ===== >>> Время на выполнение set_operations_list = 0.0646
# ======================================================================
# ===== >>> Время на выполнение fill_dictionary_before = 8.4379
# ===== >>> Время на выполнение set_operations_dict = 0.0076

# ===== >>> Время на выполнение fill_list_before = 3.5162
# ===== >>> Время на выполнение set_operations_list = 0.0679
# ======================================================================
# ===== >>> Время на выполнение fill_dictionary_before = 9.2874
# ===== >>> Время на выполнение set_operations_dict = 0.0067

                                                                        # Запуск с длиной списка/словаря в 99999 элементов и с .copy()
# ===== >>> Время на выполнение fill_list_before = 3.8037               # При этом видно как заполнение и операции словаря происходят дольше.
# ===== >>> Время на выполнение set_operations_list = 1.3020            #   
# ======================================================================#
# ===== >>> Время на выполнение fill_dictionary_before = 9.7773         #
# ===== >>> Время на выполнение set_operations_dict = 5.1835

# ===== >>> Время на выполнение fill_list_before = 4.4787
# ===== >>> Время на выполнение set_operations_list = 1.6730
# ======================================================================
# ===== >>> Время на выполнение fill_dictionary_before = 10.8845
# ===== >>> Время на выполнение set_operations_dict = 3.8402

# ===== >>> Время на выполнение fill_list_before = 4.0932
# ===== >>> Время на выполнение set_operations_list = 1.4994
# ======================================================================
# ===== >>> Время на выполнение fill_dictionary_before = 9.8326
# ===== >>> Время на выполнение set_operations_dict = 4.4665

# Выводы: из урока я понял, что словарь - это хеш таблица(хешируются ключи - уникальные значения)
# обращение к элементу словаря происходит по хешу - это быстро, в тоже время заполнение словаря
# будет происходить медленнее, так как там и происходит скрытое от наших глаз хеширование ключей,
# что конечно, будет влиять на скорость выполнения. А мои эксперементы с .copy() показывают, 
# что за словарями стоит больший обьем памяти(надеюсь правильно выразился).
# То есть, если мне нужно обращаться к объекту и выполнять с ним какие либо действия - то пусть он
# лучше хранится в словаре под ключом. А если же мне необходимо сформировать объект, возможно временный,
# с которым не будет происходить много операций - то тут список из-за его скорости заполнения и экономии памяти
# может быть лучше.