"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка
   и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание 1.
Реализуйте свои пользовательские функции, в которых реализуйте:
a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и
   словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def func_time(func):
    """
    Декоратор для замера времени выполнения функции
    """

    def wrapper(*args):
        start = time.time()
        func(*args)
        end = time.time()
        return end - start
    return wrapper


class MyList:
    """Класс для списков"""
    def __init__(self):
        self.my_list = []

    def append(self, obj):
        """
        Функция добавления элемента в конец списка
        Сложность О(1)
        """
        self.my_list.append(obj)

    def insert_in_list(self, idx, obj):
        """
        Вставка элемента в список по индексу
        :param obj: вставляемый объект
        :param idx: индекс куда вставляем
        Сложность: 0(n)
        """
        self.my_list.insert(idx, obj)

    def pop_from_list(self, idx):
        """Удаление элемента по индексу
        Сложность: O(n)"""
        self.my_list.pop(idx)


class MyDict:
    """Класс для словаря"""
    def __init__(self):
        self.my_dict = dict()

    def insert_in_dict(self, key, value):
        """Функция добавления элемента в словарь
        Сложность О(1)"""
        self.my_dict[key] = value

    def pop_from_dict(self, key):
        """
        Удаляет элемент словаря по ключу
        Сложность: O(1)
        """
        self.my_dict.pop(key)


@func_time
def fill_data(func, quantity):
    """
    Функция передет в полученнуюфункцию числа от 0 до quantity,
    кроме 'pop_from_list'
    :param func: передаваемая функция
    :param quantity: количество цифр
    """
    if func.__name__ == 'insert_in_list':
        for _ in range(quantity):
            func(0, _)
    elif func.__name__ == 'pop_from_list':
        for _ in range(quantity):
            func(0)
    elif func.__name__ in ['append', 'pop_from_dict']:
        for _ in range(quantity):
            func(_)
    else:
        for _ in range(quantity):
            func(_, _)


# Задание а)

ADD = 100000
NEW_LIST = MyList()
NEW_DICT = MyDict()
print('Время добавления в конец списка методом append:', fill_data(NEW_LIST.append, ADD))  # O(1)
del NEW_LIST.my_list[:]
print('Время вставки в список методом insert:', fill_data(NEW_LIST.insert_in_list, ADD))  # O(n)
print('Время вставки в словарь методом insert (dict[key]=value)',
      fill_data(NEW_DICT.insert_in_dict, ADD))  # O(1)

# Время добавления в конец списка методом append: 0.0234529972076416
# Время вставки в список методом insert: 3.3330888748168945
# Время вставки в словарь методом insert (dict[key]=value) 0.0224912166595459
# Добавление в словарь быстрее всего потому что он хэш таблица и сложность операции 0(1)
# но скорость добавления методом append в список ниже незначительно, т.к. сложность
# операции так же 0(1)

# Задание б)
DEL = 100000
print('Время удаления элементов из списка методом pop(i) по индексу:',
      fill_data(NEW_LIST.pop_from_list, DEL))  # O(n)
print('Время удаления элементов из словаря методом pop():',
      fill_data(NEW_DICT.pop_from_dict, DEL))  # O(1)

# Время удаления элементов из списка методом pop(i) по индексу: 2.0763790607452393
# Время удаления элементов из словаря методом pop(): 0.01997828483581543
# Словарь быстрее т.к. сложность алгоритма константая, а удаление элемента из
# списка по индексу - линейная
