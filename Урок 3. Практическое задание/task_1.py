"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time


lst = []
dct = {}


# Создаем функцию декоратор
def get_time(func):
    def the_wrap():
        time_1 = time.time()
        func()
        time_2 = time.time()
        print(time_2 - time_1)
    return the_wrap


# заполняем список и замеряем время
@get_time
def get_list():
    print('Заполнение списка')
    for el in range(1000000):
        lst.append(el + 1)

# Время составляет: 0.06305766105651855


# заполняем словарь и замеряем время
@get_time
def get_dict():
    print('Заполнение словаря')
    for el in range(1000000):
        dct.update({el: el + 1})
# Время составляет: 0.20403385162353516. Словарь составляется дольше,
# поскольку производится контроль значений ключа


get_list()
get_dict()


# Копируем. Значения списка - 0.015644073486328125. Значения словаря - 0.015620708465576172
# Словарь копируется примерно также (чуть быстрее или чуть медленнее - в чем закономерность - на понял)
@get_time
def get_copy_lst():
    print('Копирование списка')
    val = lst.copy()
    return val


@get_time
def get_copy_dct():
    print('Копированик словаря')
    val = dct.copy()
    return val


get_copy_lst()
get_copy_dct()


# Получаем срез. (Ну просто как частотное событие). Срезы предусмотрены в списках и отсутствуют в словарях.
# Если со словарем, получая срез, переносить данные в список, то получается дольше.
# Если делать кортеж, то функция со словарем отрабатывет с той же скоростью.
# Даже с условием на отбор список и словарь показываю 0
@get_time
def get_array_lst():
    print('Получить срез списка')
    val = lst[0:10000]
    return val


@get_time
def get_array_dct():
    print('Получить срез словаря. Словарь не поддерживаает срезы, потому получаем по ключу генераторе')
    val = (dct.get(el) for el in dct.keys() if el < 10000)
    # print(val)
    return val


get_array_lst()
get_array_dct()


# На изменение данных с условием на значение. Чаще словарь отрабатывает немного быстрее:
# Список - 0.08501887321472168 / словарь - 0.07601714134216309
@get_time
def get_update_lst():
    print('Изменить данные списка с условием на значение')
    for i, el in enumerate(lst):
        if el % 10:
            lst[i] = el + 20


@get_time
def get_update_dct():
    print('Изменить данные словаря с условием на значение')
    for key, el in dct.items():
        if el % 10:
            dct[key] = el + 20


get_update_lst()
get_update_dct()
