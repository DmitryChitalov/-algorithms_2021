"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""


def what_time_is_it(func):
    import time

    def wrapper():
        start_time = time.time()
        func()
        end_time = time.time()
        return f'Выполнение кода заняло {end_time - start_time} секунд.'
    return wrapper


@what_time_is_it
def list_app():
    list_1 = [i for i in range(1, 10000) if i % 2 == 0]
    return list_1


@what_time_is_it
def slow_list_app():
    list_1 = []
    for i in range(1, 10000):
        if i % 2 == 0:
            list_1.append(i)
    return list_1


print(list_app())
print(slow_list_app())


###########################################################


@what_time_is_it
def dict_app():
    new_dict = {x: x**2 + 1 for x in range(10000)}
    return new_dict


print(dict_app())


"""
Словарь, как и ожидалось, заполняется намного медленнее списка. Предполагаю, что из-за
операций, происходящийх 'под капотом', которые не происходят при генерации списка. 
То есть, из-за вычесления и присваивания хеша.
"""