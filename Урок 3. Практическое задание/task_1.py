"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и
   словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def func_time(func):
    """
    Декоратора для замера времени выполнения функции
    """

    def wrapper(*args):
        start = time.time()
        func(*args)
        end = time.time()
        print(f'Время выполнения {end - start}')
    return wrapper


class MyList:
    """Класс для списков"""
    def __init__(self):
        self.my_list = []

    def append(self, *args):
        """
        Функция добавления элемента в список
        Сложность О(1)
        """
        self.my_list.append(args[0])

    @func_time
    def insert(self, idx, obj):
        """
        Вставка элемента
        :param obj: вставляемый объект
        :param idx: индекс куда вставляем
        Сложность: 0(n)
        """
        self.my_list.insert(idx, obj)

    @func_time
    def del_by_value(self, val):
        """Удаление элемента по значению
        Сложность: O(n)"""
        self.my_list.remove(val)


class MyDict:
    """Класс для словаря"""
    def __init__(self):
        self.my_dict = dict()

    def append(self, key, value):
        """Функция добавления элемента в словарь
        Сложность О(1)"""
        self.my_dict[key] = value

    @func_time
    def insert(self, key, value):
        """Функция вставки элемента в словарь
        Сложность О(1)"""
        self.append(key, value)

    @func_time
    def del_by_value(self, val):
        """
        Удаляет элемент словаря по значению
        Сложность: O(n)
        """
        for key, value in self.my_dict.items():
            if val == value:
                del self.my_dict[key]
                break


@func_time
def fill_data(func, quantity):
    """
    Функция для заполнения словаря или списка циврами от 0 до quantity
    :param func: передаваемая функция
    :param quantity: количество цифр
    """
    for _ in range(quantity):
        func(_, _)


# Задание а)
# По сложноти функции одинаковые, но по замерам времени выигрывает соварь
# я считаю, что это связано с тем, что список это упорядоченый тип данных
# и перед добавлением в конец списка сначала вычисляется длина списка
# как сказано в документации: "list.append(x)
# Add an item to the end of the list. Equivalent to a[len(a):] = [x]."
ADD = 1000000
print(f'Добавление {ADD} элементов в список:')
NEW_LIST = MyList()
fill_data(NEW_LIST.append, ADD)

print(f'Добавление {ADD} элементов в словарь:')
NEW_DICT = MyDict()
fill_data(NEW_DICT.append, ADD)

# Задание б)
# Удаление элемента по его значению, по сложности функции равносильны,
# но по времени словарь сильно проигрывает, думаю что время тратится
# на генерацию списка кортежей "for key, value in self.my_dict.items():"
DEL_ELEM = 500000
print(f'Удаление элемента из списка по значению {DEL_ELEM}:')
NEW_LIST.del_by_value(DEL_ELEM)
print(f'Удаление элемента из словаря по значению {DEL_ELEM}:')
NEW_DICT.del_by_value(DEL_ELEM)

# Вставка
# вставка в словарь имеет сложноть 0(1), а в список 0(n),
# по времени спиок также проирывает
print('Вставка элемента в список: ')
NEW_LIST.insert(3, 'вставка')
print('Вставка элемента в словарь: ')
NEW_DICT.insert('вставка', 'вставка')
