"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def Time_size(func):
    def times(*args, **kwargs):
        time_first = time.time()
        function = func(*args, **kwargs)
        time_second = time.time()
        t = time_second - time_first
        print(round(float(str(t)[:10]), 2))
        return function

    return times


@Time_size
# T = O(n) + O(len(...)) + O(1) = O(n)
def my_list(*args):  # O(n)
    my_lists = [*args]  # O(len(...))
    print(my_lists)  # время = 5.722                      #O(1)


my_list('q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p')


@Time_size
# T = O(n) + O(len(...)) + O(1) = O(n)
def my_dict(**kwargs):  # O(n)
    my_dicts = {**kwargs}  # O(len(...))
    print(my_dicts)  # время = 2.598                      #O(1)


my_dict(q='q', w='w', e='e', r='r', t='t', y='y', u='u', i='i', o='o', p='p')

'''Вывод: функция заполнения словаря оказаластсь быстрее, разница примерно в 2 раза. Я так думаю что причина 
кроется в том что словарю не надо следить за индексами элементов, а также упращается извлечение элементов из **kwargs
по причине того что ключи захешированы и нет привязки к индексу. Но а сложность функций говорит что функции по сложности 
одинаковы Big O у словарей = О(n) и у списков = О(n).'''

#                       TASK2

# вставка
'''Скорость ниже у словаря, потомучто тратится время на хеширование'''
t1 = time.time()
d = dict({1: 'q', 2: 'w', 3: 'e', 4: 'r', 5: 't', 6: 'y', 7: 'u', 8: 'i', 9: 'o', 10: 'p'})
print(time.time() - t1)  # t = 5.00;  O(len(...))

t1 = time.time()
l = list(['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'])
print(time.time() - t1)  # t = 2.14; O(len(...))

# длина
'''скорость выше у словаря. Наверное потомучто у словаря есть обьект Py_ssize_t ma_used -количество элементов словаря'''
t1 = time.time()
print(len(d))
print(time.time() - t1)  # t = 3.05; O(1)

t1 = time.time()
print(len(l))
print(time.time() - t1)  # t = 9.40; O(1)

# удаление
'''скорость выше у словаряю. Потомучто есть обьект Py_ssize_t ma_used - количество элементов словаря, 
нужно только хеш последнего элемента и удалить, а списку посчитать элементы и удалить последний'''
t1 = time.time()
print(d.popitem())
print(time.time() - t1)  # t = 3.9; O(1)

t1 = time.time()
print(l.pop())
print(time.time() - t1)  # t = 7.8; O(n)

# замена значения
"""скорость выше у словаряю. Потомучто нужно взять только хеш последнего элемента и удалить, 
а списку посчитать элементы и заменить последний"""
t1 = time.time()
d[10] = 're'
print(time.time() - t1)  # t = 3.09; O(1)

t1 = time.time()
l[8] = 're'
print(time.time() - t1)  # t = 7.15; O(n)