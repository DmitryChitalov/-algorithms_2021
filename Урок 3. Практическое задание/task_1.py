"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def stopwatch(func):
    def start_stop(element):
        start = time.time()
        func(element)
        stop = time.time()
        print(f'Время выполнения: {stop - start}')
        return element

    return start_stop


@stopwatch
def dict_add(element):
    """
    Наполнение словаря.
    Сложность O(1)
    """
    for index in range(1000000):
        element[index] = str(index)
    return element


@stopwatch
def list_add(element):
    """
    Наполнения списка.
    Сложность O(1)
    """
    for index in range(1000000):
        element.append(str(index))
    return element


@stopwatch
def dict_delete(element):
    """
    Очистка словаря
    Сложность функции: O(1)
    """
    for index in range(1000000):
        element.pop(index)
    return element


@stopwatch
def list_delete(element):
    """
    Очистка списка
    Сложность функции: O(1)
    """
    for index in range(1000000):
        element.pop()
    return element


@stopwatch
def change_values(element):
    """
    замена 300ого элемента списка по индексу.
    Сложность O(1)
    """
    element[299] = 1
    return element


new_dict = {}
new_list = []
print('Наполнения словаря.')
dict_add(new_dict)
print('Наполнения списка.')
list_add(new_list)
"""
Наполнение словаря происходит медленнее чем в список,
хотя сложности операции одинаковы. я думаю это связано с тем,
что в словарь идет добавление по индексу и при каждом добавлении
необходимо пересчитывать индексы.
"""
print('замена 300ого элемента списка по индексу в словаре.')
change_values(new_dict)
print('замена 300ого элемента списка по индексу в списке.')
change_values(new_list)
"""
замена элемента списка по индексу в словаре происходит значительно
медленнее, так как список неупорядоченный, а список упоряоченный.
"""
print('Очистка словаря.')
dict_delete(new_dict)
print('Очистка списка.')
list_delete(new_list)
"""
Очистка словаря происходит медленне чем списка.
Я думаю это тоже связано с индексами словарей.
"""