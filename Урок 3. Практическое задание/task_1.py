"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time
import random


def check_time(func):
    def wrap(*args):
        time_start = time.time()
        ret = func(*args)
        time_end = time.time()
        print(func.__name__, time_end - time_start)
        return ret

    return wrap

dict = {}
list = []

@check_time
def my_list(): # O(n)
    for i in range(1000000):
        list.append(i + 1)

@check_time
def my_dict(): # O(n)
    for i in range(1000000):
        dict.setdefault(i + 1, chr(97 + 1))

my_list()
my_dict()

'''
Заполнение списка через append составило - 0.10196638107299805

Заполнение соваря через setdefault составило - 0.1729581356048584

Наиболее быстрый способ это заполнение списка через append
И в целом заполнение Словаря более длительный процесс из за созданием ХЕШ-значения KEYs
'''

n = random.randint(1, 10)


@check_time
def pop_el_dict():
    dict.pop(n)         # O(n)

@check_time
def pop_el_list():
    list.pop(n)  # O(n)

pop_el_dict()
pop_el_list()


"""
Удаление элемента из Списка и Словаря:

Удаление элемента списка через POP составило 0.0010001659393310547
Удаление элемента словаря через POP составило  0.0

ИТОГ: Удаление элемента происходит быстрее в Словаре, 
так как поиск элемента оптимизирован балгодаря хешу ключей.
"""
