"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def time_dec(func):
    def wrapper(*args):
        start = time.time()
        result = func(*args)
        end = time.time()
        print(f'Время работы функции "{func}" составляет {end - start}')
        return result
    return wrapper


@ time_dec
def fill_dict(num):
    """Сложность функции заполнения словаря О(n)"""
    res_dict = {num: f'Number {num}' for num in range(num)}
    return res_dict


@time_dec
def fill_list(num1):
    """Сложность функции заполнения списка О(n)"""
    res_list = [num1 for num1 in range(num1)]
    return res_list


# При одинаковом способе заполнения и количестве элементов
# скорость заполнения словаря выше, причем значительно.
# Может из-за создания хэш-таблицы???


# Время работы функции "<function fill_dict at 0x000001771E66B790>" составляет 4.36362099647522
test_dict = fill_dict(10000000)
# Время работы функции "<function fill_list at 0x000001771E66BDC0>" составляет 0.47913432121276855
test_list = fill_list(10000000)


@ time_dec
def search_dict_el(dic, key):
    """Поиск элемента словаря по ключу с замером времени, O(1)"""
    if key in dic:
        return True
    else:
        return False


@ time_dec
def search_list_el(lst, el):
    """Поиск наличия элемента в списке с замером времени, O(n)"""
    if el in lst:
        return True
    else:
        return False


@ time_dec
def dict_len(dic):
    """Определение длины словаря с замером времени. O(1)"""
    return len(dic)


@ time_dec
def list_len(lst):
    """Определение длины списка с замером времени. O(1)"""
    return len(lst)

# Поиск по хэшу в словаре (search_dict_el, O(1)) быстрее чем перебор элементов
#  в списке (search_list_el, O(1))


# Время работы функции "<function search_dict_el at 0x000002C445F890D0>" составляет 0.0
print(search_dict_el(test_dict, 9999000))
# Время работы функции "<function search_list_el at 0x000002C445F891F0>" составляет 0.10691976547241211
print(search_list_el(test_list, 9990000))

# Время работы функции "<function dict_len at 0x000002C445F89310>" составляет 0.0
dict_len(test_dict)
# Время работы функции "<function list_len at 0x000002C445F89430>" составляет 0.0
list_len(test_list)
