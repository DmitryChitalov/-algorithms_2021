"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание:  вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""


from time import time

num_it = 100000000


def time_func(func):
    def timer(*args, **kwargs):
        start_time = time()
        res = func(*args, **kwargs)
        print(time() - start_time)
        return res
    return timer


@time_func
def gen_list(n):
    print('Тест 1. Заполнение списка:')  # 11.687856435775757
    result = [i for i in range(n)]
    return result


gen_l = gen_list(num_it)


@time_func
def gen_dict(n):
    print('Тест 2. Заполнение словаря:')  # 59.83479928970337
    result = {i: i for i in range(n)}
    return result


gen_d = gen_dict(num_it)


''' список быстрее заполняется, чем словарь, так как он генерирует хеши для ключей'''


@time_func
def find_list(n):
    print('Тест 3. Поиск в листе:')  # 15.822580814361572
    n.index(num_it//2)


find_list(gen_l)


@time_func
def find_dict(n):
    print('Тест 4. Поиск в словаре:')  # 0.018548011779785156
    n.get(num_it//2)


find_dict(gen_d)

'''поиска ключа словаря равна O(1), поскольку они реализованы в виде таблиц hash. 
поиск в списке в среднем составляет O(n). словарь быстрее'''


@time_func
def clear_list_list(n):
    print('Тест 5. Очищение списка:')  # 19.67751979827881
    n.clear()


clear_list_list(gen_l)


@time_func
def clear_list_dict(n):
    print('Тест 6. Очищение словаря:')  # 13.626805543899536
    n.clear()


clear_list_dict(gen_d)

'''тут все ясно, список просто меньше, поэтому очищение быстрее'''
