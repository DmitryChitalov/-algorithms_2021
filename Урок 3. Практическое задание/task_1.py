"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
from time import time


def time_work(fun):
    def g(r=1000000):
        t1 = time()
        f = fun(r)
        t2 = time()
        time_out = t2 - t1
        print(time_out)
        return f

    return g


@time_work
def list_1(n):
    lst = []
    for i in range(n):
        lst.append(i)
    return lst


@time_work
def dict_1(n):
    dct = {}
    for i in range(n):
        dct[i] = i
    return dct


print("время создания списка: "),list_1(1000000)
print("время создания словаря: "),dict_1(1000000)
"""Вывод: Словари оказались медленее списка. Так как, словари, выполняет два действия, 
записыват значеие и присваивает к этому
значению ключ."""


def func(arr):
    n = len(arr)
    del arr[n - 1]
    arr2 = n - 1 in arr
    len(arr)
    return arr


@time_work
def list_2(n):
    arr = list_1(n)
    print("полное время работы списка 2-го списка: ")
    return func(arr)


@time_work
def dict_2(n):
    arr = dict_1(n)
    print("полное время работы словаря 2-го списка: ")
    return func(arr)


print("время создания 2-го списка: "),list_2(1000000)
print("время создания 2-го словаря: "),dict_2(1000000)
"""Если не принимать во внимание время создания словаря и списка, то по скорости выполнение задач выйграл словарь. 
Так как он сразу находит то что нужна по ключам не тратя время на перебор элементов в одличии от словаря"""
