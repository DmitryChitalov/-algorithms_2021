"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time


# создаем декортаор
def my_dec(func):
    def lead_time(*args, **kwargs):
        start = time.perf_counter()
        for i in range(1000000):
            func(*args,n=i)
        end = time.perf_counter()
        print('Контрольное время: {:.8}'.format(end - start))
    return lead_time


my_list = []
my_dict = {}
n = 1

print('Сравнение заполнения.')


# наполняем список
@my_dec
def app_list(ls, n=0):
    return ls.append(n)


print(f'Тест для списка: {app_list(my_list)}')


# наполняем словарь
@my_dec
def add_dict(dk, n=0):
    dk[n] = dk.get(n, 0)
    #dk.update([(n, 0)])


print(f'Тест для словаря: {add_dict(my_dict)}')
print()
"""
Сложность функции как для заполнения словаря, так и списка является константной O(1). В примерах N = 1 000 000.
В среднем заполнение списка занимает от 0.1869889 секунды.
Заполнение словаря способом dk[i] = dk.get(i, 0) занимает в среднем от 0.2297759, а способ dk.update([(i, 0)]) 
занимает немного больше времени, в среднем от 0.3079899.
Срванивать результы списка будем с лучшим резульатом словаря. При одинаковой сложности функции заполнения O(n),
наглядно видно, что список заполняется быстрее. При нашей n(миллион) эффективность в скорости заполнения около 35%.
"""
print('Сравнение поиска.')


# поиск по списку
@my_dec
def search_list(ls, n=0):
    if n in ls:
        pass


#print(f'Cписок: {search_list(my_list)}.')

print()


# поиск по словарю
@my_dec
def search_dic(dk, n=0):
    if n in dk:
        pass


print(f'Словарь:{search_dic(my_dict)}')
print()
"""
Сложность функции по нахождению элемента в словаря, и в списке является линейной O(n).
Функция проверяет, находится ли данный элемент в списке, или словаре.
Время нахождения элемента в списке обычным поиском растет соответсвенно его расположению от начала списка, и для каждого
элемента поиск начинает вестись от начала списка. Для проверки 10 000 элементов время у списка заняло 0.4331378 секунды.
Для 100 000 эдементов и 1 000 000 я не смог дождаться окончания.
Время нахождения ключа в словаре во много раз меньше чем в списке, для 10 000 элементов это заняло всего 0.0015562 секунды.
Для миллиона - 0.1585237.
Поиск элеменнтов в словаре превосходит поиск по списку очень сильно.
"""

print('Сравнение методов pop() для list, и метода popitem для dict.')


# удаление списка поэлементно
@my_dec
def del_list(ls, n=0):
    ls.pop()
    #ls.remove(n)


print(del_list(my_list))


# удаление словаря поэлементно
@my_dec
def del_dic(dk, n=0):
    #dk.popitem()
    dk.pop(n)


print(del_dic(my_dict))
print()
"""
Сложность функции по удалению элемента c помощью popitem() в словаре, и в списке с помощью pop() является линейной O(n).
n = 1 000 000
Время для удаления всех элементом с помощью pop() (константная сложность O(1)) для списка в среднем занимает 0.1619112 секунды.
В словаре при удаление popitem() (константная сложность) требуется в среднем 0.1848139 секунды. 
Удаление таким способом занимает у словаря немного больше времени.
Однако при таком способе мы не знаем, какой конкретно элемент удаляем в словаре, а в листе удаляем только последний 
элемент.
Если же мы используем в словаре удаление по ключу dict.pop(key), то время изменяется совсем немного - 
в среднем оно около 0.2164976. Сложность функции остается константной.
В списке же время на удаление как по конкретному элементу для remove(i), так и для удалению по индексу pop(i) растет, так как сложность функции становится линейной O(n).
Для 100000 первых элементов методу remove() требуется 0.9193491 секунды.


Общий вывод.
Списки подходят нам для хранения элементов в определенном порядке, если не предполагается конкретных операций с ними.
Если же мы предполагаем, что нам будет необходимо часто обращаться к конкретным элементам, и нам не принципиален
порядок их расположения, нам стоит использовать словари. 
"""
