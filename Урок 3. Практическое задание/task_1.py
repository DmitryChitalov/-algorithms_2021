"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""
import time


def benchmark(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        return_value = func(*args, **kwargs)
        end = time.time()
        print(f'Время выполнения {func.__name__}: {"%.4f" % (end - start)} секунд.')
        return return_value

    return wrapper


@benchmark
def get_list():
    return [i for i in range(10000000)]


@benchmark
def get_dict():
    return {key: key for key in range(10000000)}


a = get_list()
b = get_dict()


@benchmark
def list_oper():
    global a
    for i in range(1, 100000, 1000):
        a.pop(i)


@benchmark
def dict_oper():
    global b
    for i in range(1, 1000000, 1000):
        b.pop(i)


list_oper()
dict_oper()

"""Генерация словаря проходит медленнее, т.к. для каждого ключа словаря расчитывается хеш. Так же выполняется 
алгоритм предотвращения коллизий. Поиск по ключу в словаре выполняется гораздо быстрее, т.к. поиск выполняется по 
хешу ключа """
