"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time


def timeit(method):
    def timed(*args, **kw):
        ts = time.time()
        result = method(*args, **kw)
        te = time.time()
        if 'log_time' in kw:
            name = kw.get('log_name', method.__name__.upper())
            kw['log_time'][name] = int((te - ts) * 1000)
        else:
            print('%r  %2.2f ms' % \
                  (method.__name__, (te - ts) * 1000))
        return result

    return timed


# a)

@timeit
def for_list(n):  # O(n)
    my_list = []  # O(1)
    for i in range(1, n):  # O(n)
        my_list.append(i)  # O(1)

    return my_list  # O(1)


@timeit
def for_dict(n):  # O(n)
    test_dct = dict()
    for el in range(n):
        test_dct[el] = el
    return test_dct



my_list = for_list(45 * 10 ** 6)
my_dict = for_dict(45 * 10 ** 6)


# Сложность функций у меня вышли одинаковые.
# Cловарь заполняется медленнее, так как словарь посторен на хеш-таблицах и затрачивается время на вычисления хеша.
# b)
@timeit
def operation_for_list(my_list):  # O(n)
    for i in range(1,100):
        my_list.pop(i)


@timeit
def operation_for_dict(my_dict):  # O(n)
    for i in range(1,100):
        my_dict.pop(i)


operation_for_list(my_list)
operation_for_dict(my_dict)

"""
'for_list'  2677.69 ms
'for_dict'  3364.17 ms
'operation_for_list'  2682.65 ms
'operation_for_dict'  0.00 ms

"""
# Если рассматривать случай удаления элементов, то работа со словарем проходит за очень малый промежуток времени,
#  в то время как список даже с весьма небольшим количеством элементов справляется медленно.
#  Это связано с быстрым доступам по ключам в словарях.
