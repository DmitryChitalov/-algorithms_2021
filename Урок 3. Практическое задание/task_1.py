"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def time_dec(func):
    def wrapper(*args):
        start = time.time()
        result = func(*args)
        end = time.time()
        print(f'Время работы функции "{func}" составляет {end - start}')
        return result
    return wrapper


@ time_dec
def fill_dict(num):
    """Сложность функции заполнения словаря О(n)"""
    res_dict = {num: num for num in range(num)}
    return res_dict


@time_dec
def fill_list(num1):
    """Сложность функции заполнения списка О(n)"""
    res_list = [num1 for num1 in range(num1)]
    return res_list

# Убрал форматирование строки при заполнении словаря.
# При одинаковом способе заполнения и количестве элементов (10 000 000)
# скорость заполнения словаря и списка приблизительно одинаковая.
# Скорость заполнения словаря чуть (очень чуть!!!) выше  из-за счет вычисления хеша.
# Приколичестве элементов 1 000 000  скорости: словарь - 0.21, список - 0.6
# При увеличении количества элементов до 100 000 000: словарь - 28.3, список - 7.02 (хеш)


# Время работы функции "<function fill_dict at 0x000001C2730FBE50>" составляет 0.9300417900085449
test_dict = fill_dict(10000000)
# Время работы функции "<function fill_list at 0x000001C2730FBF70>" составляет 0.5758464336395264
test_list = fill_list(10000000)


@ time_dec
def search_dict_el(dic, key):
    """Поиск элемента в словаре с замером времени, O(n)"""  # Сложность линейная
    if key in dic:
        return True
    else:
        return False


@ time_dec
def search_list_el(lst, el):
    """Поиск наличия элемента в списке с замером времени, O(n)"""
    if el in lst:
        return True
    else:
        return False


@ time_dec
def dict_len(dic):
    """Определение длины словаря с замером времени. O(1)"""
    return len(dic)


@ time_dec
def list_len(lst):
    """Определение длины списка с замером времени. O(1)"""
    return len(lst)


@ time_dec
def del_dic_el(dic, key):
    """Удаление элемента словаря по ключу. Сложность О(1)"""
    del dic[key]


@ time_dec
def del_lst_el(lst, idx):
    """Удаление элемента списка по индексу. Сложность О(n)"""
    del lst[idx]

# Поиск в словаре (search_dict_el, O(1)) быстрее чем поиск элемента
#  в списке (search_list_el, O(1)), т.к. поиск в словаре производится по хешу.
# Такая же ситуация и с удалением элемента. Измерение длины списка и словаря
# показывают одинаковый результат.


# Время работы функции "<function search_dict_el at 0x000001C27310C0D0>" составляет 0.0
print(search_dict_el(test_dict, 9999000))
# Время работы функции "<function search_list_el at 0x000001C27310C1F0>" составляет 0.13357043266296387
print(search_list_el(test_list, 9990000))

# Время работы функции "<function dict_len at 0x000001C27310C310>" составляет 0.0
dict_len(test_dict)

# Время работы функции "<function list_len at 0x000001C27310C430>" составляет 0.0
list_len(test_list)

# Время работы функции "<function del_dic_el at 0x000001C27310C550>" составляет 0.0
del_dic_el(test_dict, 9999000)

# Время работы функции "<function del_lst_el at 0x0000018F337EC670>" составляет 0.11508464813232422
del_lst_el(test_list, 9999000)
