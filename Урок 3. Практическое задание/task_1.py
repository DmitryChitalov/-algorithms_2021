"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
#a) Хотя сложность в обоих приведенных случаях O(1), операция со словарем занимает чуть больше времени, чем со списком,
#это связано использованием хеша
def benchmark(func):
    import time

    def check_1(n):
        start_val = time.time()
        res = 0
        for i in range(1, n + 1):
            res = res + i
        func()
        end_val = time.time()
        return res, end_val - start_val

    return print(f'Операция заняла {check_1(100000000)[1]} сек')

@benchmark
def dict_create():
    first_dict = {}
    first_dict['string_'] = 3
    first_dict[(4,)] = ['3']
    first_dict[3.14] = "3,14"
    print(first_dict)

@benchmark
def list_create():
    first_list = []
    first_list.append(3)
    first_list.append(['3'])
    first_list.append("3,14")
    print(first_list)

#б)Сортировка словаря занимает чуть больше времени, потому что встроенная функция sorted() в случае использования в словаре сначала
# задействует формирует список, а затем задействует алгоритм сортировки Тима, т.е. проходит с увеличением операций.

@benchmark
def friends_dict():
    friends_lives = {'Серёга': 'Омск', 'Соня': 'Москва', 'Дима': 'Челябинск'}
    friends_lives = sorted(friends_lives.keys())
    print(friends_lives)

@benchmark
def friends_list():
    friends_lives = ['Серёга', 'Соня', 'Дима']
    friends_lives.sort()
    print(friends_lives)