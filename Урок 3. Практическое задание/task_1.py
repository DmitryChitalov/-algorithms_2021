"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time


def timeit(method):
    def timed(*args, **kw):
        ts = time.time()
        result = method(*args, **kw)
        te = time.time()
        if 'log_time' in kw:
            name = kw.get('log_name', method.__name__.upper())
            kw['log_time'][name] = int((te - ts) * 1000)
        else:
            print('%r  %2.2f ms' % \
                  (method.__name__, (te - ts) * 1000))
        return result

    return timed


# a)

@timeit
def for_list(*args):  # O(n)
    my_list = []  # O(1)
    for i in args:  # O(n)
        my_list.append(i)  # O(1)

    return my_list  # O(1)


@timeit
def for_dict(*args):  # O(n)
    my_dict = {}  # O(1)
    indx = 0  # O(1)
    for i in args:  # O(n)
        indx = indx + 1  # O(1)
        my_dict[indx] = i  # O(1)

    return my_dict  # O(1)


my_list = for_list(5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65, 16, 516, 51, 651, 84, 984, 6, 1, 216, 51,
                   64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, )
my_dict = for_dict(5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65, 16, 516, 51, 651, 84, 984, 6, 1, 216, 51,
                   64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3, 5, 200, 8, 9, 7, 4, 5, 87, 4, 521, 665, 8, 5, 2, 1, 51, 65,
                   16, 516,
                   51, 651, 84, 984, 6, 1, 216, 51, 64, 6513,
                   21, 351, 65, 3, 21, 32, 165, 46, 51, 3)


# Сложность функций у меня вышли одинаковые, быстрее выполняется список, думаю из-за того, что при создании
# словаря происходит хеширование ключей.
# b)
@timeit
def operation_for_list(my_list):  # O(n^2)
    result = 0
    for i in my_list:
        result = result + i
        for j in my_list:
            result = result + j
        result = result / i
    return print(result)


@timeit
def operation_for_dict(my_dict):  # O(n^2)
    result = 0
    for i in my_dict.values():
        result = result + i
        for j in my_dict.values():
            result = result + j
        result = result / i
    return print(result)


operation_for_list(my_list)
operation_for_dict(my_dict)
# Работать со списками быстрее так как там никакого хеширования не происходит, я так понимаю
