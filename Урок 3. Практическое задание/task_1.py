"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time
import functools


def estimation(func):
    @functools.wraps(func)
    def wrapped(*args, **kwargs):
        start = time.time()
        res = func(*args, **kwargs)
        end = time.time()
        print('Время выполнения функции -', end - start)
        return res

    return wrapped


@estimation
def dictionary(val: int):
    return {el: str(el) for el in range(val)}  # O(n)


@estimation
def list_create(val: int):
    return [el for el in range(val)]  # O(n)


@estimation
def list_append(my_list: list, val: int):
    for i in range(1000000):
        my_list.append(val)  # O(1)


@estimation
def dict_append(my_dict: dict, val: str):
    for i in range(1000000):
        my_dict[i] = val  # O(1)


d = dictionary(1000000)
l_new = list_create(1000000)
dict_append(d, 'val')
list_append(l_new, 10)
# несмотря на одну и ту же сложность алгоритмов, намного
# медленнее заполняется словарь
# скорее всего это связано с тем, что словарь - это хэш-таблица
# поэтому заполнение требует больше ресурсов времени, нежели
# список с функцией append
