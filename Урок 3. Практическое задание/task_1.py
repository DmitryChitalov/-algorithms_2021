"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
from random import randint
import time


def res_time(f):
    def wrapped(*args, **kwargs):
        start_val = time.perf_counter_ns()
        res = f(*args, **kwargs)
        return f'Время обработки функции {f.__name__} = {time.perf_counter_ns() - start_val}'
    return wrapped


@res_time
def create_list():                      # O(N)
    lst = []
    for i in range(10):
        lst.append(randint(0, 100))     # O(1)


@res_time
def create_dict():                      # O(N)
    dct = {}
    for i in range(10):
        dct[i] = randint(0, 100)        # O(1)


@res_time
def pop_list(lst):
    for i in range(len(lst)):
        lst.pop()                       # O(N)


@res_time
def pop_dict(dct):
    for i in range(len(dct)):
        dct.pop(i)                      # O(1)


@res_time
def change_list(lst):
    for i in range(len(lst)):
        lst[i] += 1                     # O(1)


@res_time
def change_dict(dct):
    for i in range(len(dct)):
        dct[i] = 0                      # O(1)


lst_1000 = [i for i in range(1000)]
dct_1000 = {i: randint(0, 10) for i in range(1000)}

print(create_list())
print(create_dict())
"""
При создании словаря время исполнения меньше, чем у списка. Хотя по О-нотации, должна быть одинаковая.
Исключением будет вставка элементов в начала списка. 
В таком случае будет перезатираться весь список и скорость в разы увеличиться.
"""
print(change_list(lst_1000))
print(change_dict(dct_1000))
"""
При изменении значений и в списках и в словарях время примерно одинаково.
"""
print(pop_list(lst_1000))
print(pop_dict(dct_1000))
"""
При удалении значений и в списках и в словарях время примерно одинаково. 
Исключением будет удаление любого индекса в списке, кроме последнего. Тогда придёться делать перерасчёт всего списка,
что сильно скажется на времени исполнения.
"""
