"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""

ELEM_OBJECT = 1000000


def check_time(func):
    import time
    timer = time.time()
    result = func()
    print(f'Время выполнения "{func.__name__}": {time.time() - timer}')
    return result


@check_time
def generate_list():
    from random import randint
    return [randint(0, 1000) for _ in range(ELEM_OBJECT)]


@check_time
def generate_dict():
    return {i: v for i, v in enumerate(range(ELEM_OBJECT))}


def main():
    """
    Заполнение словоря должно быть более затратно по времени за счет хэширование ключей и алгоритма, который устраняет коллизии,
    однако у меня получается иначе. При попытке понять происходящее был найден вопрос на stackoverflow,
    где прилагают примеры в пользу словаря.
    https://stackoverflow.com/questions/5790860/and-vs-list-and-dict-which-is-better

    :return:
    """
    generate_list  # среднее время выполнения около 7 сотых секунды
    generate_dict  # среднее время выполнения порядка 1 сотой секунды.


main()
