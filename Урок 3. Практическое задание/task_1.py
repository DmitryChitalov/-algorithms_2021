"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""
"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""
from time import time

def timer_dec(func):
    def timer(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        return result, end - start
    return timer


@timer_dec
def new_list(count):
    list_arr = []
    for i in range(count):
        list_arr.append(i)
    return list_arr

@timer_dec
def new_dict(count):
    dict_arr = {}
    for i in range(count):
        dict_arr[i]=i
    return dict_arr

@timer_dec
def check_list_index(list_arr, list_ind):
    for i in range(len(list_arr)):
        if i == list_ind:
            return(list_arr[i])

@timer_dec
def check_dict_key(dict_arr, dict_ind):
    return(dict_arr[dict_ind])


new_list_100000, list_time_1 = new_list(100000)
new_dict_100000, dict_time_1 = new_dict(100000)
print(list_time_1)
print(dict_time_1)
# Добавление элементов в словарь происходит дольше, т.к. при создании словаря необходимо вычислять хеши ключей

test_number = 55555
print(check_list_index(new_list_100000, test_number))
print(check_dict_key(new_list_100000, test_number))
# Получение элемента по индексу быстрее, чем перебирать значения
