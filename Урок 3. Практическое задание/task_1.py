"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time
import random


def benchmark(func):
    def wraper():
        start = time.time()
        func()
        end = time.time() - start
        print(f'Время выполнения функции составляет {end} секунд')

    return wraper


@benchmark
def main_list_append():
    lst = []
    i = 0
    while i < 1000:
        num = random.randint(0, 100)
        lst.append(num)
        i += 1


@benchmark
def main_dict_append():
    dct = {}
    i = 0
    while i < 1000:
        key = i
        value = random.randint(0, 100)
        dct[key] = value
        i += 1
    print(dct)


"""
По результатам заполнения списка и словаря при одинаковых условиях:
- заполнение списка заняло  0.0009961128234863281 секунд
- заполнение словаря заняло 0.0009930133819580078 секунд
Время заполнения словаря оказалось меньше времени заполнения списка
"""


@benchmark
def operation_list():
    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6,
           7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2,
           3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    i = 0
    while i < 100:
        lst.pop(0)
        i += 1
    print(lst)


@benchmark
def operation_dict():
    dic = {0: 88, 1: 3, 2: 58, 3: 100, 4: 73, 5: 46, 6: 60, 7: 49, 8: 82, 9: 97, 10: 93, 11: 67, 12: 52, 13: 20, 14: 75,
           15: 92, 16: 40, 17: 45, 18: 27, 19: 67, 20: 42, 21: 95, 22: 43, 23: 89, 24: 62, 25: 23, 26: 64, 27: 4,
           28: 76, 29: 0, 30: 11, 31: 69, 32: 6, 33: 20, 34: 51, 35: 18, 36: 52, 37: 47, 38: 26, 39: 66, 40: 77, 41: 85, 42: 66,
           43: 40, 44: 100, 45: 49, 46: 80, 47: 25, 48: 21, 49: 91, 50: 49, 51: 16, 52: 41, 53: 65, 54: 67, 55: 84,
           56: 1, 57: 93, 58: 45, 59: 42, 60: 0, 61: 26, 62: 56, 63: 91, 64: 5, 65: 0, 66: 54, 67: 69, 68: 1, 69: 25, 70: 25,
           71: 92, 72: 36, 73: 93, 74: 3, 75: 84, 76: 84, 77: 21, 78: 90, 79: 37, 80: 31, 81: 46, 82: 25, 83: 85,
           84: 47, 85: 41, 86: 1, 87: 19, 88: 83, 89: 80, 90: 15, 91: 16, 92: 58, 93: 4, 94: 74, 95: 36, 96: 82, 97: 41,
           98: 88, 99: 36
           }
    i = 0
    while i < 100:
        del dic[i]
        i += 1
    print(dic)



"""
Время выполнения функции operation_list() составляет 0.0028994083404541016 секунд,
Время выполнения функции operation_dict() составляет 0.005262851715087891 секунд,
Время удаления элементов из словаря занимает значительное время, чем из списка, наверное потому что ищется и удаляется 
пара ключ-значение, а не просто индекс как в списке

"""
# main_list_append()
# main_dict_append()
# operation_list()
# operation_dict()
