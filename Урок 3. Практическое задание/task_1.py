"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и
   словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def func_time(func):
    """
    Декоратора для замера времени выполнения функции
    """

    def wrapper(*args):
        start = time.time()
        func(*args)
        end = time.time()
        return end - start
    return wrapper


class MyList:
    """Класс для списков"""
    def __init__(self):
        self.my_list = []

    def append(self, *args):
        """
        Функция добавления элемента в конец списка
        Сложность О(1)
        """
        self.my_list.append(args[0])

    @func_time
    def insert(self, idx, obj):
        """
        Вставка элемента в список по индексу
        :param obj: вставляемый объект
        :param idx: индекс куда вставляем
        Сложность: 0(n)
        """
        self.my_list.insert(idx, obj)

    def pop(self, *args):
        """Удаление элемента по индексу
        Сложность: O(n)"""
        self.my_list.pop(args[0])


class MyDict:
    """Класс для словаря"""
    def __init__(self):
        self.my_dict = dict()

    def insert(self, key, value):
        """Функция добавления элемента в словарь
        Сложность О(1)"""
        self.my_dict[key] = value

    def pop(self, *args):
        """
        Удаляет элемент словаря по ключу
        Сложность: O(1)
        """
        self.my_dict.pop(args[0])


@func_time
def fill_data(func, quantity):
    """
    Функция для заполнения словаря или списка циврами от 0 до quantity
    :param func: передаваемая функция
    :param quantity: количество цифр
    """
    for _ in range(quantity):
        func(_, _)


# Задание а)

ADD = 10000000
NEW_LIST = MyList()
NEW_DICT = MyDict()
print('Время добавления в конец списка методом append:', fill_data(NEW_LIST.append, ADD))  # O(1)
del NEW_LIST.my_list[:]
print('Время вставки в список методом insert:', fill_data(NEW_LIST.insert, ADD))  # O(n)
print('Время вставки в словарь методом insert (dict[key]=value)',
      fill_data(NEW_DICT.insert, ADD))  # O(1)

# Время добавления в конец списка методом append: 2.2842061519622803
# Время вставки в список методом insert: 5.665892839431763
# Время вставки в словарь методом insert (dict[key]=value) 2.0209035873413086
# Добавление в словарь быстрее всего потому что он хэш таблица и сложность операции 0(1)

# Задание б)
DEL = 500
print('Время удаления элементов из списка методом pop(i) по индексу:',
      fill_data(NEW_LIST.pop, DEL))  # O(n)
print('Время удаления элементов из словаря методом pop():', fill_data(NEW_DICT.pop, DEL))  # O(1)

# Время удаления элементов из списка методом pop(i) по индексу: 7.247708797454834
# Время удаления элементов из словаря методом pop(): 0.00012540817260742188
# Словарь быстрее т.к. сложность алгоритма константая, а удаление элемента из
# списка по индексу - линейная
