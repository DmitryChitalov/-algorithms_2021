"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
from datetime import datetime


def timeit(func):
    def wrapper(*args, **kwargs):
        start = datetime.now()
        result = func(*args, **kwargs)
        print(f"Скорость выполнения функции {func.__name__} {datetime.now() - start}")
        return result

    return wrapper


# Заполнение списка через генератор
@timeit
def fill_list(n):  # O(1) - общая
    s = [i for i in range(n + 1)]  # O(1)
    return s  # O(1)


# Заполнение словаря через генератор
@timeit
def fill_dict(n):  # O(1) - общая
    d = {i: i for i in range(n + 1)}  # O(1)
    return d  # O(1)


# Поиск значения в списке
@timeit
def find_list(s2, value):  # O(N) - общая
    if value in s2:  # O(N)
        print(f"Значение {value} найдено")  # O(1)
    else:
        print(f"Значение {value} НЕ найдено")  # O(1)


# Поиск по ключу в словаре
@timeit
def find_dict(d2, value):  # O(N) - общая
    if value in d2:  # O(N)
        print(f"Значение ключа {value} найдено")  # O(1)
    else:
        print(f"Значение ключа {value} НЕ найдено")  # O(1)


# Поиск значения в словаре
@timeit
def find_dict_value(d2, value):  # O(N) - общая
    for i in d2:  # O(N)
        if value == d2.get(i):  # O(1)
            print(f"Значение {value} найдено")  # O(1)
            return  # O(1)
    print(f"Значение {value} НЕ найдено")  # O(1)


# Добавление 100 элементов в список, поскольку слишком сложно замереть для одного элемента
@timeit
def append_list(s3):  # O(1) - общая
    for i in range(1, 101):  # O(1)
        s3.append(i)  # O(1)
    return s3  # O(1)


# Добавление 100 ключей со значениями
@timeit
def append_dict(d3):  # O(1) - общая
    for i in range(1, 101):  # O(1)
        d3[str(i)] = i  # O(1)
    return d3  # O(1)


# Удаление элемента в списке
@timeit
def del_list(s2):  # O(1) - общая
    s2.pop()  # O(1)
    return s2  # O(1)


# Удаление элемента в словаре
@timeit
def del_dict(d1):  # O(1) - общая
    d1.pop(125000000)  # O(1)
    return d1  # O(1)


# Очистка cловаря или списка
@timeit
def clear_all(temp):  # O(1) - общая
    temp.clear()  # O(1)
    return temp  # O(1)


s = fill_list(500 ** 3)
d = fill_dict(500 ** 3)
# Примерные данные:
# fill_list 0:00:04.267589
# fill_dict 0:00:14.760532
"""
Вывод: список заполняется быстрее в несколько раз.  
Запись у словаря будет медленнее, потому что надо посчитать хэш и всё в память по индексам 
положить, а в list() (чтобы добавить элемент в конец) достаточно несколько байт записать 
в заранее выделенную память.
"""
# Задаем значение которого нет, для полного перебора.
# Поиск ключа в словаре быстрее чем значения в списке при прочих одинаковых условиях, т.к. хеширование
# Поиск значения в словаре медленне чем в списке.
find_list(s, "gerger")
find_dict(d, "gerger")
find_dict_value(d, "gerger")
# find_list 0:00:08.638901
# find_dict 0:00:00.000997
# find_dict_value 0:00:13.354798

# Вставка элементов в список быстрее, чем вставка такого же количества ключей со значениями
s = append_list(s)
d = append_dict(d)
# append_list 0:00:00.001995
# append_dict 0:00:00.006981

# Удаление последнего элемента в словаре дольше.
s = del_list(s)
d = del_dict(d)
# del_list 0:00:00
# del_dict 0:00:00.002992

clear_all(s)
clear_all(d)
# Примерные данные:
# clear_all 0:00:02.316807 (список)
# clear_all 0:00:01.531903 (словарь)
# Словарь быстрее...
