"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""


import time
start_time = time.time()

lst = []
dct = {}


# ---------------------------------------- O(1)

def dct_fill():
    for el in range(100):
        dct[el+1] = el


dct_fill()

print(f"Заполнение словаря занимает: {time.time() - start_time} секунд")

start_time_2 = time.time()


# ---------------------------------------- О(1)

def lst_fill():
    for el in range(100):
        lst.append(el)


lst_fill()
print(f"Заполнение списка занимает: {time.time() - start_time_2} секунд")


"""
 Cложность у списка линейная, при вызове time для удаления требуется больше времени
 Потому что удаление элемента происходит с помощью remove у которого O(n)
"""


start_time_3 = time.time()


# ---------------------------------------- O(n)

def delete_elem(lst):
    for el in range(len(lst)):
        lst.remove(el)


delete_elem(lst)

print(f"Удаление элементов в списке занимает: {time.time() - start_time_3} секунд")

start_time_4 = time.time()


# ---------------------------------------- O(1)

def delete_key(dct):
    for el in range(len(dct)):
        dct.pop(el+1)


delete_key(dct)

print(f"Удаление элементов в словаре занимает: {time.time() - start_time_4} секунд")
