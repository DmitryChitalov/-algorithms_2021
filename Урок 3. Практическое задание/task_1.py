"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
from time import time

test_lst = []
test_dct = {}
n = 2 ** 15


def timer_dec(func):
    def timer(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        print(f"{func.__name__} выполнилась за {end-start}")
        return result
    return timer


@timer_dec
def fill_lst(lst: list, n: int):
    for i in range(n):
        lst.append(i)  # Сложность: O(1)


print('##### Заполнение списка #####')
fill_lst(test_lst, n)
print()


@timer_dec
def fill_dct(dct: dict, n: int):
    for i in range(n):
        dct[i] = i  # Сложность: O(1)


print('##### Заполнение словаря #####')
fill_dct(test_dct, n)
print()

# Результаты:
# ##### Заполнение списка #####
# fill_lst выполнилась за 0.0019986629486083984
#
# ##### Заполнение словаря #####
# fill_dct выполнилась за 0.002000570297241211

# Очевидно, что в данном случае, заполнение списка методом append и заполнение словаря имеет константную сложность,
# поэтому и результаты получились практически идентичные


@timer_dec
def del_lst(lst: list, n: int):
    for i in range(10000):
        lst.pop(i)  # Сложность: O(n)


print('##### Удаление элементов из списка #####')
del_lst(test_lst, n)
print()


@timer_dec
def del_dct(dct: dict, n: int):
    for i in range(10000):
        dct.pop(i)  # Сложность: O(1)


print('##### Удаление элементов из словаря #####')
del_dct(test_dct, n)
print()

# Результаты:
# ##### Удаление элементов из списка #####
# del_lst выполнилась за 0.029000282287597656
#
# ##### Удаление элементов из словаря #####
# del_dct выполнилась за 0.0

# Так как, для словаря мы имеем констрантную сложность, то выполнение функции del_dct происходит в разы быстрее!


@timer_dec
def edit_lst(lst: list, n: int):
    for i in range(1000):
        lst[i] += 1  # Сложность: O(1)


print('##### Изменение элементов из списка #####')
edit_lst(test_lst, n)
print()


@timer_dec
def edit_dct(dct: dict):
    print()
    #dct[10000] = 'edited'
    for i in range(10000, 11000):
        dct[i] = 'edited'  # Сложность: O(1)



print('##### Изменение элементов из словаря #####')
edit_dct(test_dct)
print()

# Результаты:
# ##### Изменение элементов из списка #####
# edit_lst выполнилась за 0.0
#
# ##### Изменение элементов из словаря #####
#
# edit_dct выполнилась за 0.0

# У обеих функций константная сложность, отсюда ожидаемо одинаково быстрый результат
