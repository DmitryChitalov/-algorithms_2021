"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

from time import time


def timedimension(func):
    def ut(lst, *args):
        start = time()
        func(lst, *args)
        stop = time()
        print(stop - start)
    return ut

@timedimension
def filling_list(lst, args):   # ~0.06367182731628418 на 1млн операций
    for i in args:
        lst.append(i)       # константная

lst = []
filling_list(lst, [x for x in range(1000000)])

@timedimension
def filling_dict(dct, args):   # ~0.08118367195129395 на 1млн операций
    for i in args:
        dct[i] = i       # константная

dct = dict()
filling_dict(dct, [x for x in range(1000000)])

"""
по времени заполнения оба решения имеют константную сложность и выполняются примерно за одно и тоже время
"""


@timedimension
def change_list(lst):   # ~0.0005013942718505859 на 10тыс операций
    for i in range(10000):
        lst[i] += 1       # Константная

change_list(lst)

@timedimension
def change_dict(dct):   # ~0.0010023117065429688 на 10тыс операций
    for i in range(10000):
        dct[i] += 1       # Константная

change_dict(dct)

"""
Обращение по индексу и изменение элемента = константная сложность как для списка так и для словаря
"""

@timedimension
def delete_list(lst):   # ~6.66576361656189 на 10тыс операций
    for i in range(10000):
        lst.pop(i)       # Линейная

delete_list(lst)

@timedimension
def delete_dict(dct):   # ~0.0009741783142089844 на 10тыс операций
    for i in range(10000):
        dct.pop(i)       # Константная

delete_dict(dct)

"""
А вот удаление элементов различается по времени, для списка это линейная сложность, а для словаря константная
"""