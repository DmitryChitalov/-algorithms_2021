"""
Задание 1.
Реализуйте свои пользовательские функции, в которых реализуйте:
a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать,
    так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

from time import time

my_list = []
my_dict = {}


def time_dec(func):
    def timer(*args, **kwargs):
        start = time()
        res = func(*args, **kwargs)
        end = time()
        print(f'Время выполнения {func.__name__} - {end - start}')
        return res

    return timer


@time_dec
def filling_list():
    for i in range(10 ** 5):
        my_list.append(i)


filling_list()


@time_dec
def filling_dict():
    for i in range(10 ** 5):
        my_dict[i] = i


filling_dict()

'''
Время выполнения filling_list - 0.006974935531616211
Время выполнения filling_dict - 0.008976221084594727
Операции сопоставимы по времени, так как имеют сложность O(1), так как N известно.
В частном случае операции имеют сложность O(N) - линейную.
'''


# изменение элементов списка
@time_dec
def change_list(lst):  # O(N)
    for i in range(10 ** 5):
        lst[i] = lst[i - 1]


change_list(my_list)


# удаление элементов списка
@time_dec
def delete_items_list(lst):  # O(N)
    for i in range(10 ** 4):
        lst.pop(i)


delete_items_list(my_list)


# удаление ключей в словаре
@time_dec
def delete_in_dict(dct):  # O(1)
    for i in range(10 ** 4):
        my_dict.pop(i)


delete_in_dict(my_dict)


# изменение значения в словаре
@time_dec
def change_dict(dct):  # O(1)
    for i in range(10 ** 5):
        my_dict[i] = i - 1


change_dict(my_dict)

'''
Время выполнения change_list - 0.006981372833251953
Время выполнения delete_items_list - 0.0019953250885009766

Время выполнения change_dict - 0.007977962493896484
Время выполнения delete_in_dict - 0.0009970664978027344


Время выполнения операций со словарём меньше, т.к. операции имеют сложность O(1), в то время как операции со списком
имеют сложность O(N).
'''
