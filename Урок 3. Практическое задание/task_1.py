"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time

def my_list(n):         # Сложность O(n) - линейная
    a = [i for i in range(0,n)]   # O(n)
    return a                      # O(1)

def my_dict(n):         # Сложность O(n) - линейная
    b = {}                        # O(n)
    for i in range(n):            # O(n)
        b[i]=i                    # O(1)
    return b



n = int(input("Сколько элементов будет в списке и в словаре? "))
start = time.time()
a = my_list(n)
stop = time.time()
#print(f'Список - {a}')
print(f'Время заполнения списка= {stop-start}')

start = time.time()
for i in range(len(a)):     # O(n)
    a[i] = a[i]*5           # O(1)
stop = time.time()
#print(f'Список - {a}')
print(f'Время, за которое каждый элемент списка будет умножен на 5 = {stop-start}')

start = time.time()
b = my_dict(n)
stop = time.time()
#print(f'Словарь - {b}')
print(f'Время заполнения словаря = {stop-start}')

start = time.time()
for key,value in b.items():   # O(n)
    b[key] = value*5          # O(1)
stop = time.time()
#print(f'Словарь - {b}')
print(f'Время, за которое значение каждого ключа будет умножено на 5 = {stop-start}')

# По наблюдениям заполенение списка из n элементов, где значение каждого элемента
# равно его порядоковому номеру в списке, происходит быстрее, чем заполнение словаря,
# который состоит из n пар значений "ключ-значение", со значением равным ключу.
# (Разница заметна при количестве элементов больше 100000)
# В качестве действия над списком и словарем выбрал умножение, в случае списка - элемента,
# а в случае словаря - значения ключа, на число 5.
# Наблюдения показали, что действие над словарем происходит быстрее, чем нам списком