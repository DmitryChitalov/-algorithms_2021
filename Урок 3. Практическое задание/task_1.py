"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time

def pinpoint(func):
    def wrapper(n):
        start = time.perf_counter_ns()
        func(n)
        finish = time.perf_counter_ns()
        print(finish - start, sep='\n')
    return wrapper

# @pinpoint
def gen_list(n):    # O(n)
    list_ = []
    for i in range(n):
        list_.append(i)
    return list_

@pinpoint
def gen_list_2(n):  # O(n)
    list_ = [i for i in range(n)]
    return list_

# @pinpoint
def gen_dict(n):    # O(n)
    dict_ = {}
    for i in range(n):
        dict_[i] = i
    return dict_

@pinpoint
def gen_dict_2(n):  # O(n)
    dict_ = {i: i for i in range(n)}
    return dict_

gen_list(100000)
gen_list_2(100000)
gen_dict(100000)
gen_dict_2(100000)

"""
Список заполняется быстрее, чем словарь. 
Заполнение через тернарные операторы немного выигрывает по времени заполнение обычным циклом.
Приблизительные значения:
8909235 - заполнение списка циклом
5270347 - заполнение списка list comprehension
12739916 - заполнение словаря обычным циклом
11380866 - заполнение словаря тернарным оператором
Списки заполняются быстрее, т.к. им не требуется хеширование.
"""

def list_sort():
    list_ = gen_list(10000000)
    start = time.perf_counter_ns()
    list_.pop(1000000)   # O(n)
    finish = time.perf_counter_ns()
    return f'{finish - start} - список'

def dict_sort():
    dict_ = gen_dict(10000000)
    start = time.perf_counter_ns()
    dict_.pop(1000000)   # O(n)
    finish = time.perf_counter_ns()
    return f'{finish - start} - словарь'

print(list_sort())
print(dict_sort())

"""
Получение максимального значения быстрее происходит у списка, приблизительные значения (141013990 - список, 176153787 - словарь),
Получение размера чуть быстрее происходит у словаря, приблизительные значения (2936 - список, 2286 - сравнение словарь),
Сравнение списков быстрее, чем сравнение словарей, приблизительные значения (12474709 - список, 184008165 - словарь),
Копирование списков гораздо быстрее, чем копирование словарей, приблизительные значения (133314896 - список, 306914836 - словарь),
Получение элемента у списка быстрее, чем у словаря, приблизительные значения (2124 - список, 3046 - словарь),
Удаление элемента у словаря происходит гораздо быстрее, чем у списка, приблизительные значения (11212251 - список, 4040 - словарь).
"""