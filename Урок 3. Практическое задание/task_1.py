"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


# Создаем декоратор
def timer(func):
    def wrapper(*args):
        start = time.time()
        func(*args)
        end = time.time() - start
        print(f'Время выполнения функции "{func.__name__}" {round(end, 2)}')

    return wrapper


lst_obj = []  # Объект списка
dict_obj = {}  # Обьект словаря


@timer
def add_to_lst(ls: list, *args):  # O(n)
    for el in args:  # O(n)
        ls.append(el)  # O(1)


@timer
def add_to_dict(dct: dict, *args):  # O(n)
    for i, el in enumerate(args, start=1):  # O(n)
        dct.setdefault(i, el)  # O(1)


add_to_lst(lst_obj, *[i for i in range(1000000)])  # Время выполнения функции "add_to_lst" 0.12
add_to_dict(dict_obj, *[i for i in range(1000000)])  # Время выполнения функции "add_to_dict" 0.31


###################################################################################################################
# Часть b наборы операций для списка и словаря

@timer
def set_operation_list():  # Набор операций со списком
    for i in range(1000):
        lst_obj.append(i)
        lst_obj.copy()
        lst_obj.pop()


@timer
def set_operation_dict():  # Набор операций со словарем
    for i in range(1000):
        dict_obj.setdefault(i, i)
        dict_obj.copy()
        dict_obj.pop(i)


set_operation_list()  # Время выполнения функции "set_operation_list" 14.32
set_operation_dict()  # Время выполнения функции "set_operation_dict" 39.47
'''
Вывод: При одинаковой сложности алгоритма время заполнения словоря больше времени заполнения словаря
что связано с необходимостью дополнительного хеширования для объекта - словарь
'''
