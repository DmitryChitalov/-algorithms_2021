"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать,
   так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: если вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time


def time_decor(f):
    def func(x=0):
        start = time.time()
        f(x)
        end = time.time()
        return end - start
    return func


@time_decor
def create_x(x=None):
    """
    функция создаёт список если в функцию не передовать значения.
    в ином случаи создаётся словарь.
    """
    if x:
        return {el: el for el in range(1000000)}
    return [el for el in range(1000000)]


if __name__ == '__main__':
    print(f'Время заполнения списка  : {create_x():.4f}сек.\nВремя заполнения словоря : {create_x(1):.4f}сек.')


def create_x(x=None):  # сложность в обоих случиях O(n)
    """
    функция создаёт список если в функцию не передовать значения.
    в ином случаи создаётся словарь.
    """
    if x:
        return {el: el for el in range(1000000)}
    return [el for el in range(1000000)]


@time_decor
def sort_list(x):  # сложность O(n log n)
    x.sort()
    return x


@time_decor
def sort_dict(x):  # сложность O(n log n)
    list_x = sorted(x.items(), key=lambda item: item[1])
    x = {k: v for k, v in list_x}
    return x


if __name__ == '__main__':
    list_1 = create_x()
    dict_1 = create_x(1)
    print(f'Время сортировки списка  : {sort_list(list_1):.4f}сек.'
          f'\nВремя сортировки словоря : {sort_dict(dict_1):.4f}сек.')

# по сложности вобщем равны sort_list and sort_dict, но тем не менее sort_dict предполагает большее количество операций,
# так как словарь превращаем в отсортированный список, а затем опять в словарь.
# вывод список более быстрый так как индексация происходит проще, чем в словаре так как мы сами индексируем значения.
