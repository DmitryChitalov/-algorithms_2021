"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""
from time import time

n = 10 ** 7


def time_calc(func):
    def wrap_timer(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        dif_time = end - start
        print(f'Затрачено времени: {dif_time}')
        return result

    return wrap_timer


@time_calc
def list_gen(length):
    print(f'Создание списка из {length} элементов')
    return [i for i in range(length)]


my_lst = list_gen(n)


@time_calc
def dict_gen(length):
    print(f'Создние словаря из {length} элементов')
    return {i: i for i in range(length)}


my_dct = dict_gen(n)


@time_calc
def list_index_check(lst):
    print('Поиск значения по индексу в списке')
    lst.index(n / 2)


list_index_check(my_lst)


@time_calc
def dict_key_check(dct):
    print('Поиск значения по ключу в словаре')
    dct.get(n - 1, 0)


dict_key_check(my_dct)


@time_calc
def list_clear(lst):
    print('Удаление списка')
    lst.clear()


list_clear(my_lst)


@time_calc
def dict_clear(dct):
    print('Удаление словаря')
    dct.clear()


dict_clear(my_dct)


'''
ПОЛУЧЕННЫЕ РЕЗУЛЬТАТЫ:
Создание списка из 10000000 элементов
Затрачено времени: 0.5856013298034668
Создние словаря из 10000000 элементов
Затрачено времени: 1.2341251373291016
Поиск значения по индексу в списке
Затрачено времени: 0.5013458728790283
Поиск значения по ключу в словаре
Затрачено времени: 0.0
Удаление списка
Затрачено времени: 0.13152384757995605
Удаление словаря
Затрачено времени: 0.16921281814575195
ВЫВОДЫ:
1. Создание списка и словаря, сложность O(n) - линенйная, требует прохода по все элементам.
Создание словаря занимает больше времени, так как требуется создание хешей для каждого значения по ключу
2. Аналогично обстоит дело с удалением списка и словаря.
3. Поиск по списку, сложность О(n) - линейная, нужно перебрать все элементы
Поиск по словарю, сложность О(1) - константная, почти мгновенный поиск значения по хешу ключа.
'''