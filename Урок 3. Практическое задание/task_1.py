"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""
from time import time
from random import randrange as rr


def log_time(func):
    def inner():
        start_time = time()  # -> время до запуска выполнения функции
        f = func()
        print(f'{time() - start_time} - время затраченное на выполнение функции')
        return f

    return inner


@log_time
def gen_list():
    digit_list = [x for x in range(1, 10)]
    return digit_list


@log_time
def gen_dict():
    digit_dict = {'Digit': [[rr(1, 100) for y in range(1, 10)]for y in range(5)]}
    return digit_dict


"""
У меня и список и словарь создаются моментально. Все это зависит от мощности компьютера, hdd или ssd, количество ram,
загруженности компьютера на момент запуска и конечно сложности генерации того или иного объекта. Если все вышесказанное
отринуть и смотреть на сухие данные, то дольше будет создаваться словарь, так как он основан на хэш-таблице. Из-за 
хэширования словарь будет создаваться дольше списка, но в поиске и работе с данными словарь выигрывает по времени у
списка. Если у словаря для поиска используется хэш-поиск, то для нахождения элемента в списке он требует ходьбы по себе,
пока он не найдет результат от начала до результата каждый раз.
"""

print(gen_list())  # -> 0.0сек - время затраченное на генерацию списка
print(gen_dict())  # -> 0.0сек - время затраченное на генерацию словаря
new_list = gen_list()
new_dict = gen_dict()
"""
Не совсем понятно нужно ли писать свои функции для выполнения операций над списком или словарем. Если да, то нужно еще и
написать новый декоратор для отслеживания времени над операциями. 
Если берем операции над работой со словарем, то при поиске он будет быстрее чем поиск в списке. Если удаление элемента,
то в базовом случае словарь будет быстрее(тут мы не расматриваем значение ключа), так как элемент можно быстро найти по 
ключу, а в списке либо перебором, либо указанием индекса, но это при условии что индекс известен.
Если говорить про операции обновления данных, то словарь будет медленее при условии, что мы добавляем еще и ключ, так как
тут будет выполенено хэширование
"""
