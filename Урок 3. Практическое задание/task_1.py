"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность ф-ций для заполнения.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import time


def working_time(fn):
    def fn_time(*args):
        start_time = time.time()
        result = fn(*args)
        print(f'время выполнения {time.time() - start_time}')
        return result
    return fn_time


@working_time
def into_list(num):
    return [el for el in range(num)]  # O(n) - линейная: чем больше число, тем больш элементов и время на заполнение


@working_time
def into_dict(num):
    return {el: el for el in range(num)}  # O(n) - линейная: чем больше число, тем больш элементов и время на заполнение


@working_time
def dict_pop(my_dict, num):
    [my_dict.popitem() for _ in range(num)]  # O(n) - линейная: чем больше число, тем больш элементов и время на удаление
    return my_dict


@working_time
def list_pop(my_list, num):
    [my_list.pop() for _ in range(num)]  # O(n) - линейная: чем больше число, тем больш элементов и время на удаление
    return my_list


@working_time
def change_value_dict(my_dict):
    return {key: val**2 for key, val in my_dict.items()}  # O(n)


@working_time
def change_value_list(my_list):
    return [el**2 for el in my_list]  # O(n)


if __name__ == '__main__':
    my_list = into_list(1000000)  # 0.0838174819946289
    my_dict = into_dict(1000000)  # 0.1490340232849121
    """
    время заполнения при небольшом числе у списка выше.
    однако после значения 10000 заполнение словаря становится медленнее.
    это связано с выделением у словаря дополнительной памяти по хеш
    """
    list_pop(my_list, 50000)  # 0.0035445690155029297
    dict_pop(my_dict, 50000)  # 0.022124052047729492
    """
    процесс извлечения методом pop также у словаря занимает больше времени
    """
    change_value_list(my_list)  # 0.2640094757080078
    change_value_dict(my_dict)  # 0.3326246738433838
    """
    изменение значений также у словаря занимают больше времени
    """


