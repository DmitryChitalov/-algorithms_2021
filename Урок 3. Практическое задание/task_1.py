"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
from time import time
from random import randint


def time_decorator(func):
    """ Функция-декоратор для расчёта времени выполнения """
    def timer(*args, **kwargs):
        start = time()
        result = func(*args, **kwargs)
        end = time()
        print(f'Время выполнения функции {func.__name__} '
              f'составило {end - start}')
        return result

    return timer


'''
Задание a
'''

N = 10**7   # Число операций


@time_decorator
def get_list_comprehension(n=1000):
    """ Заполняет список - генератор """
    return [i for i in range(1, n)]


ex_list = get_list_comprehension(N)


@time_decorator
def get_dict_comprehension(n=1000):
    """ Заполняет словарь - генератор """
    return {i: i for i in range(1, n)}


ex_dict = get_dict_comprehension(N)


'''
Время выполнения функции get_list_comprehension составило 0.5020287036895752
Время выполнения функции get_dict_comprehension составило 0.7540431022644043
Заполнение словаря занимает больше времени, из-за необходимости вычислять хэш или использовать закэшированный,
изменять размер области памяти для словаря и других особенностей внутренней реализации.

Сравнивал время LOOP-заполнения списков и словарей, разница по времени получилась не очень большая, но 
отличается от реализации через генераторы. Интересно. Надо бы посмотреть реализацию внутри, но времени нет.
Время выполнения функции get_list_loop составило 0.7970457077026367
Время выполнения функции get_dict_loop составило 0.8010458946228027
'''


@time_decorator
def get_list_loop(n=1000):
    """ Заполняет список - LOOP """
    some_list = []
    for i in range(n):
        some_list.append(i)
    return some_list


get_list_loop(N)


@time_decorator
def get_dict_loop(n=1000):
    """ Заполняет словарь - LOOP """
    some_dict = {}
    for i in range(n):
        some_dict[i] = i
    return some_dict


get_dict_loop(N)

'''
Задание b
Создаем случайный список индексов и удаляем из списка и из словаря 1000 значений по индексу-ключу
Сравниваем время.
'''
print('-------------')

rand_idx = []
for i in range(1000):
    rand_idx.append(randint(1, N - 10000))


@time_decorator
def del_list_value():
    """ Удаляет из списка значения """
    for i in rand_idx:
        ex_list.pop(i)


del_list_value()


@time_decorator
def del_dict_value():
    """ Удаляет из словаря значения """
    for i in rand_idx:
        ex_dict.pop(i)


del_dict_value()

'''
Время выполнения функции del_list_value составило 4.31524658203125
Время выполнения функции del_dict_value составило 0.0010001659393310547
Временная сложность поиска в списке O(n)
Временная сложность поиска в словаре O(1)
Поиск в словаре - быстрее.
'''