"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря программно,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
"""
import random

from time import time


def func_time(func):

    def wrapper(*args, **kwargs):

        function_time = time()

        result = func(*args, **kwargs)

        function_time = time() - function_time

        print(f'Время выполнения {func.__name__} составило {function_time}')
        return result

    return wrapper



@func_time
def rand_list(el_cnt):
    """
    Заполняем список случайными элементами
    """
    return [random.randint(1, 10) for _ in range(el_cnt)]

@func_time
def rand_dict(el_cnt):
    """
    Заполняем словарь случайными элементами
    """
    return {i: random.randint(1, 10) for i in range(el_cnt)}

@func_time
def pop_list(lst, el_cnt):
    """
    Удаление последнего элемента списка
    """
    for i in range(el_cnt):
        lst.pop()

@func_time
def pop_dict(dct, el_cnt):
    """
    Удаление последнего элемента словоря
    """
    for i in range(el_cnt):
        del dct[i]


@func_time
def ins_list(lst, idx):
    """
    Вставка значения по индексу
    """
    lst.insert(idx, random.randint(1, 10))


@func_time
def ins_dict(dct, key):
    """
    Вставка значения по ключу
    """
    dct[key] = random.randint(1, 10)


new_lst = rand_list(10000000)
new_dict = rand_dict(10000000)
"""
Время выполнения rand_list составило 0.7206630706787109
Время выполнения rand_dict составило 0.7863268852233887

Сложность одинаковая O(n), словарь заполняется медленнее из-аз расчета хешей
"""

pop_list(new_lst, 100000)
pop_dict(new_dict, 100000)

"""
Удаление с конца списка выполняется за постоянное время , т.к. не перестаивается весь список целиком.
Удаление из словоря всегда быстро , т.к один элемент не влияет на другой. Словарь не упорядочен.
"""

ins_list(new_lst, 5000)
ins_dict(new_dict, 5000)

"""
Вставка в словарь происходит мнгновенно, т.к. сложность O(n)  и при вставке в список идет перестраивание ,
Операция выполняется медленее
"""