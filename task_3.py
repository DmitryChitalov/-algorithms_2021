"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные по длине части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.
Задачу можно решить без сортировки исходного массива.
Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках: Шелла, Гномья, Кучей...
Важно: стройте массив именно по формуле 2m+1
Потому что параметр m вам пригодится при поиске медианы, когда массив будет отсортирован.
Этот парамет m вам нужно запрашивать у пользователя.
[5, 3, 4, 3, 3, 3, 3]
[3, 3, 3, 3, 3, 4, 5]
my_lst
new_lts
arr[m]
from statistics import median
[3, 4, 3, 3, 5, 3, 3]
left = []
right = []
left == right and
for i in
    for
    left == right
    left.clear()
    right.clear()
"""
import timeit
import random
from statistics import median


def shell(data): # Метод сортировки Шелла
    inc = len(data) // 2
    while inc:
        for i, el in enumerate(data):
            while i >= inc and data[i - inc] > el:
                data[i] = data[i - inc]
                i -= inc
            data[i] = el
        inc = 1 if inc == 2 else int(inc * 5.0 / 11)
    return data

def median_for_remove(list_obj, med): # удаление маклимальных элементов
    list_temp = list_obj[:]
    for el in range(med):
        list_temp.remove(max(list_temp))
    return max(list_temp)

m = int(input('Введите число: '))
test_list = [random.randint(0, 100) for _ in range(2 * m + 1)]

print(f'Сгенерированный массив: {test_list}')
print(f'Медианный элемент по индексу после сортировки Шеллом: {shell(test_list)[m]}')
print(f'Медианный элемент с помощю удаления: {median_for_remove(test_list, m)}')
print(f'Медианный элемент с помощью встроенной функции: {median(test_list)}')
print(f'Отсортированный массив: {shell(test_list)}')

print(
    timeit.timeit(
        "shell(test_list[:])[m]",
        globals=globals(),
        number=1000))

print(
    timeit.timeit(
        "median_for_remove(test_list[:], m)",
        globals=globals(),
        number=1000))

print(
    timeit.timeit(
        "median(test_list)",
        globals=globals(),
        number=1000))
"""
Введите число: 10
0.013609699999999947 - сортировка шеллом 
0.010657399999999928 - удаление максимальных
0.0008181000000000438 - встроенная

Введите число: 100
0.21980319999999987 - сортировка шеллом 
0.6652326 - удаление максимальных
0.0023699999999999832 - встроенная

Введите число: 1000
3.5520511 - сортировка шеллом 
59.388069800000004 - удаление максимальных
0.016854199999997377 - встроенная
"""

"""
Встроенная функция оказалась конечно же самой быстрой для поиска медианы
на втором месте по скорости идет нахождение медианы с предварительной сортировкой методом Шелла
Самым медленным методом оказалось удаление максимальных элементов массива 
"""

