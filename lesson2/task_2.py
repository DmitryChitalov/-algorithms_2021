"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""
cnt_even = 0
cnt_uneven = 0

def even_uneven_numbers(nums):
    global cnt_even
    global cnt_uneven
    if nums == 0:
        return f'Четных: {cnt_even}, Нечетных: {cnt_uneven}'
    elif nums % 2 == 0:
        cnt_even += 1
        return even_uneven_numbers(nums // 10)
    else:
        cnt_uneven += 1
        return even_uneven_numbers(nums // 10)

print(even_uneven_numbers(int(input('Введите число: '))))
