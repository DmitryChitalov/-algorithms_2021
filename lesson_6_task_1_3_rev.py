"""
Задание 1.
Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 3-5 ваших РАЗНЫХ скриптов!
(хотя бы 3 разных для получения оценки отл).
На каждый скрипт вы должны сделать как минимум по две реализации.
Можно взять только домашние задания с курса Основ
или с текущего курса Алгоритмов
Результаты профилирования добавьте в виде комментариев к коду.
Обязательно сделайте аналитику (что с памятью в ваших скриптах, в чем ваша оптимизация и т.д.)
ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""

"""
Для 3-го примера взяла задание 4 к уроку 2 Алгоритмов
---
Задание 4 к уроку 2:

4.	Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.
Пример:
Введите количество элементов: 3
Количество элементов: 3, их сумма: 0.75...

Для оптимизации заменяю рекурсию циклом 
"""

from memory_profiler import profile


@profile
def recursion(number):
    def row_sum(counter, elem=1):
        if counter <= 0:
            return 0
        return elem + row_sum(counter - 1, -elem / 2)

    print(f'Количество элементов: {number}, их сумма: {row_sum(number)}.')


# после улучшения
@profile
def row_sum_upgd(number):
    elem = 1
    amount = 0
    for i in range(number):
        amount += elem
        elem /= -2
    print(f'Количество элементов: {number}, их сумма: {amount}.')


print('Программа считает сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125.')
n = int(input('Введите количество элементов числового ряда '))
recursion(n)
row_sum_upgd(n)
'''
Результаты показали, что рекурсия требует больше памяти (хранится стек вызовов)

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    38     24.2 MiB     24.2 MiB           1   @profile
    39                                         def recursion(number):
    40     24.7 MiB      0.3 MiB         502       def row_sum(counter, elem=1):
    41     24.7 MiB      0.1 MiB         501           if counter <= 0:
    42     24.7 MiB      0.0 MiB           1               return 0
    43     24.7 MiB      0.0 MiB         500           return elem + row_sum(counter - 1, -elem / 2)
    44                                         
    45     24.7 MiB      0.0 MiB           1       print(f'Количество элементов: {number}, их сумма: {row_sum(number)}.')


Количество элементов: 500, их сумма: 0.6666666666666667.
Filename: D:/Олеся/Python/GEEK BRAINS/Algorithms/Lesson_6/lesson_6_task_1_3_rev.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    49     24.7 MiB     24.7 MiB           1   @profile
    50                                         def row_sum_upgd(number):
    51     24.7 MiB      0.0 MiB           1       elem = 1
    52     24.7 MiB      0.0 MiB           1       amount = 0
    53     24.7 MiB      0.0 MiB         501       for i in range(number):
    54     24.7 MiB      0.0 MiB         500           amount += elem
    55     24.7 MiB      0.0 MiB         500           elem /= -2
    56     24.7 MiB      0.0 MiB           1       print(f'Количество элементов: {number}, их сумма: {amount}.')




'''
