"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

accounts = {
    'kas': ['qwerty', True],
    'heromarine': ['qwe123', True],
    'rogue': ['Qwerty111', True],
    'serral': ['qwe', True],
    'kaby': ['asd12', True],
    'basset': ['qax123', False],
    'dark': ['zaq', False],
    'jaedong': ['qwer321', False],
    'parting': ['Asd1', True],
    'reynor': ['zxcv123', True],
}

user_name_input = input('Введите имя пользователя: ')

# первый алгоритм O(n)

def check_user_1(user_name):   # не будем передавать имя словаря, функция будет работать только с accounts{}
    for k, v in accounts.items():                           # O(n)
        if k == user_name:                                  # O(1)
            if v[1]:                                        # O(1)
                user_pass_input = input('Введите пароль: ')
                if v[0] != user_pass_input:                 # O(1)
                    return f'неправильный пароль! (подсказка: правильный пароль: {v[0]})'
                else:
                    return 'доступ разрешен'
            else:
                activate = input('Учетная запись не активирована. Активировать? (y/n) ')
                if activate in ('y', 'yes'):
                    accounts[k] = [v[0], True]
                    return 'Учетная запись активирована'
                elif activate in ('n', 'no'):
                    return 'Учетная запись осталась неактивированой'
                else:
                    return 'Команда не распознана. Учетная запись осталась неактивированой'


    return 'Учетная запись не найдена'

print(check_user_1(user_name_input))

print(accounts)

def check_user_2(user_name, user_password):     # O(1)
    if accounts.get(user_name):
        if accounts[user_name][0] == user_password and accounts[user_name][1]:
            return 'доступ разрешен'
        elif accounts[user_name][0] == user_password and not accounts[user_name][1]:
            return 'Учетная запись не активна! Пройдите активацию!'
        elif accounts[user_name][0] != user_password:
            return (f'неправильный пароль! (подсказка: правильный пароль: {v[0]})')
    else:
        return 'Учетная запись не найдена'

print(check_user_2('kaby', 'asd12'))

# Второй вариант предпочтельней