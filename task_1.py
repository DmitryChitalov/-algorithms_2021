"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

import timeit
import random


# по убыванию
def bubble_sort(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj) - n):
            if lst_obj[i + 1] > lst_obj[i]:
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
        n += 1
    return lst_obj


# по убыванию
def bubble_sort_better(lst_obj):
    n = 1
    while n < len(lst_obj):
        flag = True
        for i in range(len(lst_obj) - n):
            if lst_obj[i + 1] > lst_obj[i]:
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
                flag = False
        if flag:
            break
        n += 1
    return lst_obj


orig_list = [random.randint(-100, 100) for _ in range(100)]
print(f'Исходный массив {orig_list} \n')
print(f'Обычная пузырьковая сортировка\n {bubble_sort(orig_list[:])}')
print(f'Время обычной сортировки {timeit.timeit("bubble_sort(orig_list[:])", globals=globals(), number=1000)}')
print('-' * 50)
print(f'Модифицированная пузырьковая сортировка\n {bubble_sort_better(orig_list[:])}')
print(
    f'Время модифицированной сортировки {timeit.timeit("bubble_sort_better(orig_list[:])", globals=globals(), number=1000)}')

'''
Исходный массив [80, -6, 78, -84, -99, -58, 66, -59, -11, 10, 98, 80, 29, 47, -2, 86, -23, 88, 46, -44, -91, -72, -87, -53, 35, -74, 96, 2, 92, 20, -10, -30, -14, 81, 3, -56, -43, 40, 71, -87, -23, -32, -71, -48, -49, 14, -1, 58, 57, -10, -82, -28, -48, 74, 84, 59, -93, -57, 58, -4, 21, 29, -67, 59, -93, 32, 94, -57, 28, 82, 63, -43, -78, 89, 79, 40, 29, -77, -13, 9, -24, -30, -47, 56, -62, -47, -73, 74, 98, -53, -57, -3, -1, 72, 70, -76, 35, 23, 54, -50] 

Обычная пузырьковая сортировка
 [98, 98, 96, 94, 92, 89, 88, 86, 84, 82, 81, 80, 80, 79, 78, 74, 74, 72, 71, 70, 66, 63, 59, 59, 58, 58, 57, 56, 54, 47, 46, 40, 40, 35, 35, 32, 29, 29, 29, 28, 23, 21, 20, 14, 10, 9, 3, 2, -1, -1, -2, -3, -4, -6, -10, -10, -11, -13, -14, -23, -23, -24, -28, -30, -30, -32, -43, -43, -44, -47, -47, -48, -48, -49, -50, -53, -53, -56, -57, -57, -57, -58, -59, -62, -67, -71, -72, -73, -74, -76, -77, -78, -82, -84, -87, -87, -91, -93, -93, -99]
Время обычной сортировки 0.6029377
--------------------------------------------------
Модифицированная пузырьковая сортировка
 [98, 98, 96, 94, 92, 89, 88, 86, 84, 82, 81, 80, 80, 79, 78, 74, 74, 72, 71, 70, 66, 63, 59, 59, 58, 58, 57, 56, 54, 47, 46, 40, 40, 35, 35, 32, 29, 29, 29, 28, 23, 21, 20, 14, 10, 9, 3, 2, -1, -1, -2, -3, -4, -6, -10, -10, -11, -13, -14, -23, -23, -24, -28, -30, -30, -32, -43, -43, -44, -47, -47, -48, -48, -49, -50, -53, -53, -56, -57, -57, -57, -58, -59, -62, -67, -71, -72, -73, -74, -76, -77, -78, -82, -84, -87, -87, -91, -93, -93, -99]
Время модифицированной сортировки 0.5415779

Прерывание  итерации дает некоторый выигрыш по времени 
'''
