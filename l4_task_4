from collections import Counter
from timeit import timeit

"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.

Без аналитики задание считается не принятым
"""

array = [1, 3, 1, 3, 4, 5, 13, 1, 3, 4, 5, 3, 1, 3, 4, 5, 3, 1, 3, 4, 5, 3, 1, 3, 4, 5, 3, 1, 3, 4, 5, 3, 1, 3, 4, 5,]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    elem = max(array, key=array.count)
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {array.count(elem)} раз(а)'


def func_4():
    arr = Counter(array).most_common()[0]
    return f'Чаще всего встречается число {arr[0]}, ' \
           f'оно появилось в массиве {arr[1]} раз(а)'


print(func_1())
print(func_2())
print(func_3())
print(func_4())

print(timeit('func_1()', globals=globals()))
print(timeit('func_2()', globals=globals()))
print(timeit('func_3()', globals=globals()))
print(timeit('func_3()', globals=globals()))

"""
Замеры стандартного списка
1.2571037
1.8340669
1.1538121000000001
1.1917185000000003
Замеры увеличенного списка
14.0616804
15.923367699999998
12.383925100000003
12.269664600000006

Написал пару версий, наиболее быстрые через max и Counter разница незначительная... на уровне погрешности
"""