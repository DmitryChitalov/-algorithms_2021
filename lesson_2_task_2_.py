"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def ev_od_counter(n, even_counter, odd_counter):
    if n // 10 == 0:  # если последняя цифра, то добавляем её в соответствующий счётчик и завершаем рекурсию
        if (n % 10) % 2 == 0:
            even_counter += 1
        else:
            odd_counter += 1
        return even_counter, odd_counter
        quit()
    elif (n % 10) % 2 == 0:
        even_counter += 1
    else:
        odd_counter += 1
    return ev_od_counter(n // 10, even_counter, odd_counter)


print('Программа считает количество чётных и нечетных цифр введенного натурального числа.')
number = input('Введите натуральное число: ')
try:
    number = int(number)
except:
    print('Вы ввели не натуральное число, пожалуйста, перезапстите программу и введите число')
    quit()
print(f'Количество чётных и нечётных цифр в числе равно: {ev_od_counter(int(number), 0, 0)}.')
