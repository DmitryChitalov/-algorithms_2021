from timeit import timeit
from random import randint
from functools import lru_cache


def recursive_reverse(number):
    if number == 0:
        return str(number % 10)
    return f'{str(number % 10)}{recursive_reverse(number // 10)}'


num_100 = randint(10000, 1000000)
num_1000 = randint(1000000, 10000000)
num_10000 = randint(100000000, 10000000000000)

print('Не оптимизированная функция recursive_reverse')
print(
    timeit(
        "recursive_reverse(num_100)",
        setup='from __main__ import recursive_reverse, num_100',
        number=10000))
print(
    timeit(
        "recursive_reverse(num_1000)",
        setup='from __main__ import recursive_reverse, num_1000',
        number=10000))
print(
    timeit(
        "recursive_reverse(num_10000)",
        setup='from __main__ import recursive_reverse, num_10000',
        number=10000))


def memoize(f):
    cache = {}

    def decorate(*args):

        if args in cache:
            return cache[args]
        else:
            cache[args] = f(*args)
            return cache[args]

    return decorate


@memoize
def recursive_reverse_mem(number):
    if number == 0:
        return ''
    return f'{str(number % 10)}{recursive_reverse_mem(number // 10)}'


print('Оптимизированная функция recursive_reverse_mem')
print(
    timeit(
        'recursive_reverse_mem(num_100)',
        setup='from __main__ import recursive_reverse_mem, num_100',
        number=10000))
print(
    timeit(
        'recursive_reverse_mem(num_1000)',
        setup='from __main__ import recursive_reverse_mem, num_1000',
        number=10000))
print(
    timeit(
        'recursive_reverse_mem(num_10000)',
        setup='from __main__ import recursive_reverse_mem, num_10000',
        number=10000))

"""В данном примере мемоизация ускоряет выполнение рекурсии с каждым последующим применением, однако в виду 
незначительного обращения к кешу не требуется ее применение для однократных вызовов.

Не оптимизированная функция recursive_reverse
0.0219459
0.029339099999999993
0.04957049999999999
Оптимизированная функция recursive_reverse_mem
0.0039577999999999836
0.003327699999999989
0.001371299999999992
"""

""" 
Ускорить работу можно используя декортатора lru_cash
lru recursive_reverse_lru
0.0010090000000000099
0.0011230000000000129
0.0008268000000000164
"""


@lru_cache(maxsize=256)
def recursive_reverse_lru(number):
    if number == 0:
        return str(number % 10)
    return f'{str(number % 10)}{recursive_reverse_lru(number // 10)}'


print('lru recursive_reverse_lru')
print(
    timeit(
        'recursive_reverse_lru(num_100)',
        setup='from __main__ import recursive_reverse_lru, num_100',
        number=10000))
print(
    timeit(
        'recursive_reverse_lru(num_1000)',
        setup='from __main__ import recursive_reverse_lru, num_1000',
        number=10000))
print(
    timeit(
        'recursive_reverse_lru(num_10000)',
        setup='from __main__ import recursive_reverse_lru, num_10000',
        number=10000))
