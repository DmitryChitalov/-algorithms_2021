import time
from collections import OrderedDict

storage_dct = {}
storage_odt = OrderedDict()
filling = (10 ** 7) * 2


def my_decorator(function_to_decorate):
    def time_calculation(*args, **kwargs):
        start_time = time.time()
        result = function_to_decorate(*args, **kwargs)
        end_time = time.time()
        print(f'* Время выполнения функции {function_to_decorate.__name__} составляет: '
              f'{end_time - start_time} секунд.' + " ")
        return result

    return time_calculation


@my_decorator
def sd(bulkhead, dct):
    for i in range(bulkhead):
        dct[i] = i


@my_decorator
def dcs(bulkhead):
    for key, value in bulkhead.items():
        bulkhead[key] = value


sd(filling, storage_dct)
sd(filling, storage_odt)
print('_' * 100)
dcs(storage_dct)
dcs(storage_odt)

# * Время выполнения функции sd составляет: 1.644040822982788 секунд.
# # * Время выполнения функции sd составляет: 2.666491985321045 секунд.
# # ____________________________________________________________________________________________________
# # * Время выполнения функции dcs составляет: 1.1793322563171387 секунд.
# # * Время выполнения функции dcs составляет: 2.089787721633911 секунд.

"""
    Нет необходимости в использовании OrderedDict(), т.к. 
    во первых он использовался с версии Python 3.1 и до версии Python 3.5, а начиная с версии Python 3.6
    уже в библиотеке Python обновили метод dict и тепреь он сохраняет порядок который был предоставлен, кроме этого 
    он работает быстрее используя при этом меньше памяти. 
"""

"""
    Из документации:
    OrderedDict был добавлен в стандартную библиотеку Python 3.1. 
Его API практически такой же, как у dict. 
Однако OrderedDict перебирает ключи и значения в том же порядке, в котором производилась вставка ключей. 
Если новая запись перезаписывает существующую запись, то порядок элементов остается неизменным. 
Если запись удалена и вставлена повторно, она будет перемещена в конец словаря.

    Python 3.6 представил новую реализацию dict. 
Эта новая реализация представляет собой большой выигрыш с точки зрения использования памяти и эффективности итераций. 
Кроме того, новая реализация предоставляет новую и несколько неожиданную функцию: 
объекты dict теперь сохраняют свои элементы в том же порядке, в котором они были представлены.
Первоначально эта функция считалась деталью реализации, и в документации не рекомендовалось полагаться на неё.
"""
