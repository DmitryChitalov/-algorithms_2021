"""
1.	Пользователь вводит данные о количестве предприятий, их наименования и прибыль
за 4 квартала (т.е. 4 отдельных числа) для каждого предприятия.
Программа должна определить среднюю прибыль (за год для всех предприятий)
и вывести наименования предприятий, чья прибыль выше среднего и отдельно
вывести наименования предприятий, чья прибыль ниже среднего.

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections.

Пример:
Введите количество предприятий для расчета прибыли: 2
Введите название предприятия: Фирма_1
через пробел введите прибыль данного предприятия
за каждый квартал(Всего 4 квартала): 235 345634 55 235

Введите название предприятия: Фирма_2
через пробел введите прибыль данного предприятия
за каждый квартал(Всего 4 квартала): 345 34 543 34

Средняя годовая прибыль всех предприятий: 173557.5
Предприятия, с прибылью выше среднего значения: Фирма_1

Предприятия, с прибылью ниже среднего значения: Фирма_2
"""
from collections import Counter, namedtuple, defaultdict
from statistics import mean

companies_data = {'Фирма1': '100 100 100 100',
                  'Фирма2': '100 200 300 400',
                  'Фирма3': '300 300 300 300'
                  }


def info1():
    titles = ['company', 'mean', 'data']

    l = list()
    firms = namedtuple('Firms', titles)
    for i in companies_data.keys():
        print(f'Организация {i}, квартальные данные {companies_data[i]}')
        qdata = [int(x) for x in companies_data[i].split(' ')]
        l.append(firms(i, mean(qdata), Counter(qdata)))

    common_avg = mean([el.mean for el in l])
    print('Средняя годовая прибыль всех предприятий:', round(common_avg, 0))
    print('Предприятия, с прибылью выше среднего значения:',
          *[el.company for el in l if el.mean > common_avg])
    print('Предприятия, с прибылью ниже среднего значения:',
          *[el.company for el in l if el.mean < common_avg])


def info2():
    d, tmp = dict(), list()
    for i in companies_data.keys():
        print(f'Организация {i}, квартальные данные {companies_data[i]}')
        d[i] = Counter([int(x) for x in companies_data[i].split(' ')])
    _ = list(map(tmp.extend, (x.elements() for x in [y for y in d.values()])))
    common_avg = mean(tmp)

    print('Средняя годовая прибыль всех предприятий:', round(common_avg, 0))
    print('Предприятия, с прибылью выше среднего значения:',
          *[x for x in d if mean(d[x].elements()) > common_avg])
    print('Предприятия, с прибылью ниже среднего значения:',
          *[x for x in d if mean(d[x].elements()) < common_avg])


if __name__ == '__main__':
    print(str.center('ВАРИАНТ 1 namedtuple',50,'*'))
    info1()
    print(str.center('ВАРИАНТ 2 Counter',50,'*'))
    info2()
    exit(0)

'''
***************ВАРИАНТ 1 namedtuple***************
Организация Фирма1, квартальные данные 100 100 100 100
Организация Фирма2, квартальные данные 100 200 300 400
Организация Фирма3, квартальные данные 300 300 300 300
Средняя годовая прибыль всех предприятий: 217.0
Предприятия, с прибылью выше среднего значения: Фирма2 Фирма3
Предприятия, с прибылью ниже среднего значения: Фирма1
****************ВАРИАНТ 2 Counter*****************
Организация Фирма1, квартальные данные 100 100 100 100
Организация Фирма2, квартальные данные 100 200 300 400
Организация Фирма3, квартальные данные 300 300 300 300
Средняя годовая прибыль всех предприятий: 217.0
Предприятия, с прибылью выше среднего значения: Фирма2 Фирма3
Предприятия, с прибылью ниже среднего значения: Фирма1

пояснения к коду:
а. ввод с клавиатуры не делал, оставил вариант отладочный с фиксированными данными.
б. код корректно отрабатывает если не ввести какой-то из кварталов для фирмы 

выводы:
1. пока не до конца понял как эффективно применить типы из collections
2. в данном задании применил namedtuple, что упрощает доступ к данным кортежа (+++)!!!
3. во втором варианте Counter, применить удалось.
4. эффективность в решении дает наличие в питоне стандартных, дополнительных типов данных и LC
5. надо пробовать примеРять типы  collections в проектах.
6. плюсы даёт лаконичность самого питона.
'''
