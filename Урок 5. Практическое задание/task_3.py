"""
Задача 3.
В соответствии с документацией Python,
deque – это обобщение стеков и очередей.
Вот основное правило: если вам нужно что-то быстро дописать или вытащить, используйте deque.
Если вам нужен быстрый случайный доступ, используйте list.

Задача: создайте простой список (list) и очередь (deque).
Выполните различные операции с каждым из объектов.
Сделайте замеры и оцените, насколько информация в документации
соответствует дейстивтельности.

Операции равные по семантике (по смыслу)
Но разные по используемым ф-циям

И добавить аналитику, так ли это или нет.!
"""

from collections import deque
from timeit import timeit

my_list = [200, 300, 400]
pattern = [200, 300, 400]
deq_obj = deque(pattern)


print(timeit("my_list.insert(0, 100)", globals=globals(), number=10000))
print(timeit("my_list.reverse()", globals=globals(), number=10000))
print(timeit("my_list.pop(0)", globals=globals(), number=10000))
print(timeit("my_list.append(500)", globals=globals(), number=10000))
print(timeit("my_list.pop(-1)", globals=globals(), number=10000))
print()
print(timeit("deq_obj.appendleft(100)", globals=globals(), number=10000))
print(timeit("deq_obj.reverse()", globals=globals(), number=10000))
print(timeit("deq_obj.popleft()", globals=globals(), number=10000))
print(timeit("deq_obj.append(500)", globals=globals(), number=10000))
print(timeit("deq_obj.pop()", globals=globals(), number=10000))

'''
Результаты замеров на моём пк:
0.023138128002756275
0.03583305399661185
0.006189241001266055
0.0006368340036715381
0.0008229929953813553

0.0006223979944479652
0.05761015600000974
0.00034450599923729897
0.00035932500031776726
0.0004483419979806058

Как мы видим операция вставки в начало в deque работает быстрее
чем у списков. 0.023138128002756275 против 0.0006223979944479652.
Что соотносится с документацией ибо там добавление в начало тоже
быстрее чем у списков. Операции с обоих концов у deque O(1) сложность
что очень производительно. Операция reverse незначительно уступает у
deque 0.05761015600000974 против 0.03583305399661185 что является
почти одинаковым показателем. Вернуть и удалить первый элемент 
быстрее выходит у deque 0.00034450599923729897 против 0.006189241001266055.
А вот добавить элемент в конец они могут приблизительно на одинаковой
скорости. Иногда побеждает список, а иногда очередь. Докуметация нам
говорит что победа тут за списками. Но сколько я не повышал нагрузку
результаты оставались приблизительно одинаковыми. Достать последний элемент
на удивление получилось быстро и в списке и в deque, но незначительно
выигрывает deque. Документация нам тоже говорит что здесь преимущества
у deque. Общий вывод таков что очередь отрабатывает свою функцию это
быстро достать элемент и быстро его добавить с любой стороны очереди.
'''
