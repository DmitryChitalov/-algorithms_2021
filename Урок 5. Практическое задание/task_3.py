"""
Задача 3.
В соответствии с документацией Python,
deque – это обобщение стеков и очередей.
Вот основное правило: если вам нужно что-то быстро дописать или вытащить, используйте deque.
Если вам нужен быстрый случайный доступ, используйте list.
Задача: создайте простой список (list) и очередь (deque).
Выполните различные операции с каждым из объектов.
Сделайте замеры и оцените, насколько информация в документации
соответствует дейстивтельности.
Операции равные по семантике (по смыслу)
Но разные по используемым ф-циям
И добавить аналитику, так ли это или нет.!
"""

from collections import deque
from timeit import timeit

simple_list = [i for i in range(1000)]
deq_obj = deque(simple_list)

# результат показывает, что для дека добавление слева выполняется за 7.2 * 10^{-5} с, для списка - 9.3 * 10^{-4} с
print(f'время добавления в начало для списка: {timeit("simple_list.insert(0, 1)", number=1000, globals=globals())}')
print(f'время добавления в начало для дека: {timeit("deq_obj.appendleft(1)", number=1000, globals=globals())}')

# для дека добавление справа выполняется за 6.3 * 10^{-5} с, для списка - 7.8 * 10^{-5} с
print(f'время добавления в конец для списка: {timeit("simple_list.append(1)", number=1000, globals=globals())}')
print(f'время добавления в конец для дека: {timeit("deq_obj.append(1)", number=1000, globals=globals())}')

# получение последнего элемента из дека выполняется за 5.84 * 10^{-5} с, из списка - 5.57 * 10^{-5} с
print(f'время получения последнего элемента из списка: {timeit("simple_list.pop()", number=1000, globals=globals())}')
print(f'время получения последнего элемента из дека: {timeit("deq_obj.pop()", number=1000, globals=globals())}')

# получение первого элемента из дека выполняется за 5.49 * 10^{-5} с, из списка - 4.19 * 10^{-4} с
print(f'время получения первого элемента из списка: {timeit("simple_list.pop(1)", number=1000, globals=globals())}')
print(f'время получения первого элемента из дека: {timeit("deq_obj.popleft()", number=1000, globals=globals())}')

# получение случайного элемента из дека выполняется за 0.06 с, из списка - 0. 046 с при umber = 1000
# при number = 100000 для дека - 5.6 с, для списка 4.5 с
# при number = 1000000 для дека - 56.73 с, для списка 43.02 с
print(f'время получения случайного элемента \
    из списка: {timeit("for i in range(1000): simple_list[i]", number=1000, globals=globals())}')
print(f'время получения случайного элемента \
    из дека: {timeit("for i in range(1000): deq_obj[i]", number=1000, globals=globals())}')

# результаты проведения замеров показывают, что для дека операции по добавлении элемента слева выполняется быстрее,
# чем для списка, добавление элемента справа - незначительно быстрее, чем для списка. Извлечение последнего элемента
# выполняется, примерно, с одинаковой скоростью, извлечение первого элемента быстрее происходит в деке.
# Однако при необходимости получить случайный элемент, предпочтительнее использовать список, т.к. для него данная
# операция выполняется быстрее
