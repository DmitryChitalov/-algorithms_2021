"""
Задача 4.
Поработайте с обычным словарем и OrderedDict.
Выполните операции, равные по смыслу, с каждым из объектов и сделайте замеры.
Опишите полученные результаты, сделайте выводы.
И есть ли смысл исп-ть OrderedDict в Python 3.6 и более поздних версиях?
"""

from collections import OrderedDict
from timeit import timeit

simple_dict = {i + 1: i + 1 for i in range(1000)}
ord_dict = OrderedDict(simple_dict)

# время получения ключей для обычного словаря 6.86 * 10^{-5} с, для упорядоченного словаря - 8.73 * 10^{-5} с
print(f'получение ключей обычного словаря: {timeit("simple_dict.keys()", number=1000, globals=globals())}')
print(f'получение ключей упорядоченного словаря: {timeit("ord_dict.keys()", number=1000, globals=globals())}')

# время получения значений для обычного словаря 7.1 * 10^{-5} с, для упорядоченного словаря - 8.2 * 10^{-5} с
print(f'получение значений обычного словаря: {timeit("simple_dict.values()", number=1000, globals=globals())}')
print(f'получение значений упорядоченного словаря: {timeit("ord_dict.values()", number=1000, globals=globals())}')

# время получения пар ключ: значение для обычного словаря 6.76 * 10^{-5} с, для упорядоченного
# словаря - 8.35 * 10^{-5} с
print(f'получение пар ключ: значение обычного словаря: {timeit("simple_dict.items()", number=1000, globals=globals())}')
print(
    f'получение пар ключ: значение упорядоченного словаря: {timeit("ord_dict.items()", number=1000, globals=globals())}')

# время получения значения по ключу: для обычного словаря 6.07 * 10^{-5} с, для упорядоченного
# словаря - 6.43 * 10^{-5} с
print(f'получение значения по ключу обычного словаря: {timeit("simple_dict.get(1)", number=1000, globals=globals())}')
print(
    f'получение значения по ключу упорядоченного словаря: {timeit("ord_dict.get(1)", number=1000, globals=globals())}')

# время получения значения по ключу в цикле с использованием get():
# для обычного словаря 0.076 с,
# для упорядоченного словаря - 0.078 * 10^{-5} с
print(
    f'получение всех значений по ключу в цикле обычного словаря c использованием get(): '
    f'{timeit("for i in range(1000): simple_dict.get(i)", number=1000, globals=globals())}')
print(
    f'получение всех значений по ключу в цикле упорядоченного словаря c использованием get():'
    f' {timeit("for i in range(1000): ord_dict.get(i)", number=1000, globals=globals())}')

# время получения значения по ключу без использования get():
# для обычного словаря 4.23 * 10^{-5} с,
# для упорядоченного словаря - 4.03 * 10^{-5} с
print(f'получение значения по ключу обычного словаря без использования get(): '
      f'{timeit("simple_dict[1]", number=1000, globals=globals())}')
print(f'получение значения по ключу упорядоченного словаря без использования get(): '
      f'{timeit("ord_dict[1]", number=1000, globals=globals())}')

# время получения всех значений по ключу в цикле без использования get():
# для обычного словаря 0.064 * 10^{-5} с,
# для упорядоченного словаря - 0.062 * 10^{-5} с
print(
    f'получение всех значений по ключу в цикле обычного словаря без использования get(): '
    f'{timeit("for i in range(1, 1000): simple_dict[i]", number=1000, globals=globals())}')
print(
    f'получение всех значений по ключу в цикле упорядоченного словаря без использования get():'
    f' {timeit("for i in range(1, 1000): ord_dict[i]", number=1000, globals=globals())}')

# результаты замеров показывают, что обычный словарь незначительно проигрывает OrderDict лишь при получении одного
# значения по ключу с использованием функции get() и при получении одного значения без использования функции get(). Во
# всех остальных случаях обычный словарь оказался быстрее, чем OrderDict, но незначительно. Использовать OrderDict в
# Python 3.6 и более поздних версиях есть смысл лишь при крайней необходимости (например, при работе с csv файлами)
