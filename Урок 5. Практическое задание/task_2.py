"""
2.*	Написать программу сложения и умножения двух шестнадцатиричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections
Также попробуйте решить задачу вообще без collections и применить только ваши знания по ООП
(в частности по перегрузке методов)

__mul__
__add__

Пример:
Например, пользователь ввёл A2 и C4F.
Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’]
Произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

1. вариант
defaultdict(list)
int(, 16)
reduce

2. вариант
class HexNumber:
    __add__
    __mul__

hx = HexNumber
hx + hx
""" #Сделал только через классы
class HexNumber():
    def __init__(self, number):
        self.number = number

    def __mul__(self, other):
        try:
            return hex(int(self.number, 16) * int(other.number, 16)).upper()[2:]
        except ValueError:
            print('Ошибка')
            return
    def __add__(self, other):
        try:
            return hex(int(self.number, 16) * int(other.number, 16)).upper()[2:]
        except ValueError:
            print('Ошибка')
            return

a = HexNumber(input('Введите первое число '))
b = HexNumber(input('Введите второе число '))


print('Умножение',  a * b)
print('Сложение',  a + b)
