"""
2. Написать программу сложения и умножения двух шестнадцатиричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections
Также попробуйте решить задачу вообще без collections и применить только ваши знания по ООП
(в частности по перегрузке методов)

__mul__
__add__

Пример:
Например, пользователь ввёл A2 и C4F.
Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’]
Произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

1. вариант
defaultdict(list)
int(, 16)
reduce

2. вариант
class HexNumber:
    __add__
    __mul__

hx = HexNumber
hx + hx
hex()
"""
# Насильно применяю defaultdict, потому что не понял, каким боком он тут полезен. Честно старался.

from collections import defaultdict


def add_to_dict(user_dict, el):
    user_dict[el] = list(el)


a1 = input(f'Введите первое шестнадцатиричное число: ')
a2 = input(f'Введите второе шестнадцатиричное число: ')
d = defaultdict(int)
add_to_dict(d, a1)
add_to_dict(d, a2)
sum16 = hex(int(a1, 16)+int(a2, 16))[2:]
mlt16 = hex(int(a1, 16)*int(a2, 16))[2:]
add_to_dict(d, sum16)
add_to_dict(d, mlt16)
print(d)
print(f'Сумма чисел из примера: {d[sum16]}')
print(f'Произведение чисел из примера: {d[mlt16]}')





