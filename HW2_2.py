"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def check_to_even(n, s=0, sn=0):  # s - количество четных цифр,  sn - количество нечетных цифр
    if n // 10 == 0:
        if n % 2 == 0:
            s += 1
        else:
            sn += 1
        return s, sn  # возвращаем в формате (количество четных, количество нечетных)
        # Шаг рекурсии / рекурсивное условие
    elif (n % 10) % 2 == 0:
        s += 1  # количество четных цифр
        return check_to_even(n // 10, s, sn)
        # Шаг рекурсии / рекурсивное условие
    elif (n % 10) % 2 != 0:
        sn += 1
        return check_to_even(n // 10, s, sn)


user_number = input('введите число и нажмите Enter:')
print(check_to_even(int(user_number)))
