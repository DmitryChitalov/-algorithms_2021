Алгоритмы и структуры данных на Python. Базовый курс (Д.Читалов)
Урок 1. Введение в алгоритмы и структуры данных на Python
================================================================


ДЗ берем из репо 
https://github.com/DmitryChitalov/-algorithms_2021 
и делаем форк к себе.
ДЗ сдаем в виде ссылки на pull request.


Задание 1. task_1.py
====================
Для каждой из трех функций выполнить следующее:
1) для каждого выражения вместо !!! укажите сложность этого выражения.
2) определите сложность каждой функции в целом.
Сложность нужно определять только там, где указаны символы !!!
--------------------------------------------------------------------------

Особых проблем не вызвало, кроме сомнений в правильности оценки динамически
изменяющегося выражения внутри цикла в функции check_2(lst_obj).


Задание 2. task_2.py
====================
Реализуйте два алгоритма.
Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Не забудьте указать сложность каждого из двух алгоритмов. Для лучшего закрепления темы
можете определить и указать сложность еще и у каждого выражения этих двух алгоритмов.

Примечание: Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
Постарайтесь не использовать ф-ции min() и sort() и другие ф-ции!
Подход должен быть максимально алгоритмическим.
-------------------------------------------------------------------------------------

С момента прохождения базового Питона прошло пара месяцев и без практики (пока шли курсы
по Линукс, SQL) - синтаксис начал подзабываться, поэтому сначала немного тяжеловато пошло.
Особенно тяжело было квадратичный алгоритм писать, понимая, что это плохой алгоритм... ))
min_simple_alg(lst_in) - квадратичный
min_smart_alg(lst_in) - линейный


Задание 3. task_3.py
====================
Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным.
Пункты 2 и 3 можно выполнить через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
--------------------------------------------------------------------------

Реализация хранилища на класса, в основе - словарь, в котором ключ - название компании,
значение - годовая прибыль компании. Реализованы методы добавления, удаления, чтения,
получения n-компаний с максимумом годовой прибыли в 2х вариантах методов
1) метод get_max_income_v1() - с помощью сортировки по значениям прибыли и последующей
выдачей нужного кол-ва максимумов.
Сложность метода О(N*LogN).
2) метод get_max_income_v2() - с помощью последовательного поиска нужного кол-ва
максимумов. При небольшом кол-ве запрошенных максимумов - сложность O(N), при кол-ве
максимумов, близком к N - сложность приближается к O(N**2).

Т.о. при небольших кол-вах поиска максимумов - выгоднее использовать 2й метод, при кол-вах
максимумов, близких к N - выгоднее использовать 1й метод.


Задание 4. task_4.py
====================

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
----------------------------------------------------------------------------------------

Пошло легче, чем п.3 - больше убил времени на доводку "красоты", но в целом результатом
остался удовлетворен.
1) Вариант 1 - полный перебор логина по "базе учетных записей", сложность линейная - O(N).
2) Вариант 2 - использование свойства хранения ключей в словарях с использованием хеша
и доступом за O(1). Итого - сложность - константная - O(1).
Естественно - вариант 2 - наиболее предпочтительный.



Задание 5. task_5.py
====================

Задание на закрепление навыков работы со стеком
Реализуйте структуру "стопка тарелок".
Мы можем складывать тарелки в стопку и при превышении некоторого значения
нужно начать складывать тарелки в новую стопку.

Структура должна предусматривать наличие нескольких стеков.
Создание нового стека происходит при достижении предыдущим стеком порогового
значения. Реализуйте по аналогии с примером, рассмотренным на уроке,
необходимые методы, для реализации это структуры, добавьте новые методы (не
рассмотренные в примере с урока) для реализации этой задачи.
После реализации структуры, проверьте ее работу на различных сценариях

Подсказка:
Отдельне стопки можно реализовать через:
1) созд-е экземпляров стека (если стопка - класс)
или
2) lst = [[], [], [], [],....]

Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
-----------------------------------------------------------------

Убил кучу времени на попытку сразу реализовать в ООП - хорошенько все забылось
с базового курса (да и ООП там касались вскользь - особого опыта работы в ООП и не было). 
Реализовал все в функциональном стиле через список списков (стеков) - task_5_1.py.

На базе функционального решения - реализовал все-таки стуктуру хранилища стеков
(стека стеков) на базе списков в ООП - task_5_2.py.
Метод push_in - получился достаточно лаконичным, но при написании метода pop_out -
получилось как-то черезчур громоздко (попробовал реализовать концепцию не поэлементной
работы, а оптимизировать и работать "постечно").
Время сдачи вышло, поэтому, чтобы не отстать сильно - задачи 6 и 7 - оставил до
лучших времен, когда будет свободное время.



Задание 6. task_6.py
====================
Задание на закрепление навыков работы с очередью

Реализуйте структуру "доска задач".

Структура должна предусматривать наличие несольких очередей задач, например,
1) базовой, откуда задачи берутся, решаются и отправляются в список решенных
2) очередь на доработку, когда нерешенные задачи из первой очереди отправляются
на корректировку решения

После реализации структуры, проверьте ее работу на различных сценариях

Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.



Задание 7. task_7.py
====================
Задание на закрепление навыков работы с деком

В рассмотренном на уроке листинге есть один недостаток
Приведенный код способен "обработать" только строку без пробелов, например, 'топот'

Но могут быть и такие палиндромы, как 'молоко делили ледоколом'

Вам нужно доработать программу так, чтобы она могла выполнить проверку на палиндром
и в таких строках (включающих пробелы)

Примечание:
Вам не нужно писать код с нуля. Вам нужно доработать пример с урока.