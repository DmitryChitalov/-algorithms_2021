"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


users = [
         ['user_1', '1111', False],
         ['user_2', '2222', False],
         ['user_3', '3333', True],
         ['user_4', '4444', True]
]


def user_check(login_pass_list):
    for i in users:
        if login_pass_list[0] == i[0] and login_pass_list[1] == i[1] and i[2] is True:
            return f'Доступ разрешен.'
        if login_pass_list[0] == i[0] and login_pass_list[1] == i[1] and i[2] is False:
            ans = input('Вход осуществлен, но учетная запись не активирована.\nПройти активацию? y/n: ')
            if ans == 'y' or 'Y':
                return f'Учетная запиь активирована'
            else:
                return f'В доступе отказано.'
    return f'Неверный логин, или пароль.'


print(user_check(['user_2', '2222']))

'''
Сложность данного алгоритма - квадратичная. Мы последовательно проходим по всему списку юзеров,
сравнивая входных данные с данными в кортеже. При полном совпадении требуемых данных - получаем
True.
'''
