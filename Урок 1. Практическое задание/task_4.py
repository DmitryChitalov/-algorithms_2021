"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


# Вариант 1: O(1)
def check_user_1(user):
    if user_1[user][1]:                                              # O(1)
        return 'Проверка пройдена.'                                  # O(1)
    return 'Проверка не пройдена, активируйте учетную зпись.'        # O(1)


# Вариант 2: O(n)
def check_user_2(user):
    for key, val in user_1.items():                                       # O(n)
        if key is user:                                                   # O(1)
            if val[1]:                                                    # O(1)
                return 'Проверка пройдена.'                               # O(1)
            return 'Проверка не пройдена, активируйте учетную зпись.'     # O(1)


user_1 = {'name_1': ['pass', True], 'name_2': ['pass', False], 'name_3': ['pass', True],
          'name_4': ['pass', False], 'name_5': ['pass', False]}


print(check_user_1('name_1'))
print(check_user_2('name_1'))

print(check_user_1('name_2'))
print(check_user_2('name_2'))

"""
Вариант 1 выглядит лучше, как по сложности алгоритма так, и с точки зрения лаконичности.
Во втором варианте используется цикл for, в котором совершенно нет необходимости, так как поиск в словаре по ключу 
имеет сложность o(1) и в переборе всего словаря нет необходимости.
"""












