"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


def valid_users_metod_1():                                               # O(n^2) - квадратичная сложность
    username = input('Введите имя пользователя')                         # O(1) - константная сложность
    password = input('Введите пароль')                                   # O(1) - константная сложность
    for name in users:                                                   # O(n) - линейная сложность
        if name == username:                                             # O(1) - константная сложность
            for key, value in users.get(username).items():               # O(n) - линейная сложность
                if key == 'passwd':                                      # O(1) - константная сложность
                    if password == value:                                # O(1) - константная сложность
                        pass_valid = True                                # O(1) - константная сложность
                    else:                                                # O(1) - константная сложность
                        return print('Пароль неверный')                  # O(1) - константная сложность
                if key == 'active':                                      # O(1) - константная сложность
                    if pass_valid == True:                               # O(1) - константная сложность
                        if value == True:                                # O(1) - константная сложность
                            return print('Вы получили доступ!')          # O(1) - константная сложность
                        else:                                            # O(1) - константная сложность
                            return print('Активируйте учетную запись!')  # O(1) - константная сложность
    return print('Такого пользователя нет')                              # O(1) - константная сложность


def valid_users_metod_2():                                      # O(1) - константная сложность
    username = input('Введите имя пользователя')                # O(1) - константная сложность
    password = input('Введите пароль')                          # O(1) - константная сложность
    if users.get(username) is None:                             # O(1) - константная сложность
        return print('Такого пользователя нет')                 # O(1) - константная сложность
    else:                                                       # O(1) - константная сложность
        passwd = users.get(username).get('passwd')              # O(1) - константная сложность
        active = users.get(username).get('active')              # O(1) - константная сложность
        if passwd == password:                                  # O(1) - константная сложность
            if active == True:                                  # O(1) - константная сложность
                return print('Вы получили доступ!')             # O(1) - константная сложность
            else:                                               # O(1) - константная сложность
                return print('Активируйте учетную запись!')     # O(1) - константная сложность
        else:                                                   # O(1) - константная сложность
            return print('Пароль неверный')                     # O(1) - константная сложность



users = {
    'username_1': {'passwd': '11111', 'active': True},
    'username_2': {'passwd': '22222', 'active': False},
    'username_3': {'passwd': '33333', 'active': True},
    'username_4': {'passwd': '44444', 'active': True},
    'username_5': {'passwd': '55555', 'active': False},
    'username_6': {'passwd': '66666', 'active': True}
        }



valid_users_metod_1()
valid_users_metod_2()

'''Второй метод лучше так как константная сложность лучше чем линейная'''
