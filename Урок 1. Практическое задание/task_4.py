"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


# 1) Сложность O(1)
def checking(name_user, passw_user):
    if users.get(name_user):
        if users[name_user]['password'] == passw_user and users[name_user]['status']:
            return 'Вход'
        elif users[name_user]['password'] == passw_user and not users[name_user]['status']:
            return 'Не активна'
        elif users[name_user]['password'] != passw_user:
            return 'Пароль не верный'
    else:
        return 'Нет пользователя'


# 2) Сложность O(n)

def checking_1(name_user, passw_user):
    if name_user in users:
        if users[name_user]['password'] == passw_user and users[name_user]['status']:
            return 'Вход'
        elif users[name_user]['password'] == passw_user and not users[name_user]['status']:
            return 'Не активна'
        elif users[name_user]['password'] != passw_user:
            return 'Пароль не верный'
    else:
        return 'Нет пользователя'


users = {'vlad': {'password': '1234', 'status': True},
         'mir': {'password': '1532', 'status': False}}
print(checking_1('mir', '1234'))

#  Однозначно константная сложность эффективнее, поскольку она не проверяет словарь на наличие.
