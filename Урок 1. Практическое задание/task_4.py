"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

list_of_users = [{'login': 'user1', 'password': 'password', 'auth': False},
                 {'login': 'user2', 'password': 'password', 'auth': True},
                 {'login': 'user3', 'password': 'password', 'auth': False}]


def user_auth_1(login):
    for n in list_of_users:
        if login == n['login']:
            if n['auth']:
                return "Access Granted"
            else:
                if input('Enter password\n') == n['password']:
                    n['auth'] = 'True'
                    return f"Access Granted\n{n}"
                else:
                    return "Password incorrect"
    return "User not found"


# Второй вариант реализовал двумя функциями


def search_user(login):
    for user in list_of_users:
        if user['login'] == login:
            return user


def user_auth_2(login):
    user = search_user(login)
    if user:
        if user['auth']:
            return "Access Granted"
        else:
            if input('Enter password\n') == user['password']:
                user['auth'] = 'True'
                return f"Access Granted\n{user}"
            else:
                return "Password incorrect"
    return "User not found"


print(user_auth_2('user1'))
"""У каждого алгоритма одинаковая сложность O(n). Первый делает перебор по всему списку, второй делает перебор, 
пока не найдёт нужного пользователя. В остальном - они работают одинаково. Даже не знаю, какой оптимальнее, 
по мне - так второй """
