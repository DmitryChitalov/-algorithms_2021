"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


def auth1(user_login, user_password):
    """
    Сложность: O(1).
    Эффективно, так как используется get для словаря со сложностью O(1)
    """
    return bool(passwords.get(user_login) == user_password and profiles.get(user_login))


def auth2(user_login, user_password):
    """
    Сложность: O(N).
    Неэффективно, так как используется перебор списка сложностью O(N)
    """
    result = False
    for user in users:
        if user_login == user[0] and user_password == user[1] and user[2]:
            result = True
    return result


passwords = {'login1': 'pass1', 'login2': 'pass2',
             'login3': 'pass3', 'login4': 'pass4', 'login5': 'pass5'}
profiles = {'login1': True, 'login2': True, 'login3': False, 'login4': False, 'login5': False}
print(auth1('login2', 'pass2'))
print(auth1('login2', 'pass3'))
users = [['login1', 'pass1', True], ['login2', 'pass2', True], ['login3', 'pass3', False],
         ['login4', 'pass4', False], ['login5', 'pass5', False]]
print(auth2('login2', 'pass2'))
print(auth2('login2', 'pass3'))
