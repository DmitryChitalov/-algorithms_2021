"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


# Сложность: # O(1)
def user_auth_var_1(users):
    print('Добро пожаловать!\nНеобходимо авторизироваться!\n')  # O(1)
    user_login = input('Введите логин: ').lower()  # O(1)
    user_password = input('Введите пароль: ')
    if users.get(user_login):  # O(1)
        if users[user_login]['Password'] == user_password:
            if users[user_login]['Status']:  # O(1)
                print('=' * 50, '\nДобро пожаловать!')  # O(1)
            else:
                print('=' * 50, '\nУчетная запись не активирована!')  # O(1)
                status = input('Хотите активировать у/з? (yes, no): ').lower()  # O(1)
                if status == 'yes':
                    users[user_login]['Status'] = True  # O(1)
                    print('=' * 50, '\nУчетная запись активирована!')  # O(1)
                if status == 'no':
                    print('=' * 50, '\nОк, мы ничего не делаем!')  # O(1)
        else:
            print('=' * 50, '\nВведен неверный пароль!')  # O(1)
    else:
        print('=' * 50, '\nПользватель с такими учетными данными не найден!\n'
                        'Пройдите регистрацию или проверьте корректность ввода!')  # O(1)


# Сложность: # O(n)
def user_auth_var_2(users):
    print('Добро пожаловать!\nНеобходимо авторизироваться!\n')  # O(1)
    user_login = input('Введите логин: ').lower()  # O(1)
    user_password = input('Введите пароль: ')  # O(1)
    search_status = False  # O(1)
    for user in users:  # O(n)
        if user == user_login:  # O(1)
            if users[user]['Password'] == user_password:  # O(1)
                if users[user_login]['Status']:  # O(1)
                    print('=' * 50, '\nДобро пожаловать!')  # O(1)
                else:
                    print('=' * 50, '\nУчетная запись не активирована!')  # O(1)
                    status = input('Хотите активировать у/з? (yes, no): ').lower()  # O(1)
                    if status == 'yes':  # O(1)
                        users[user]['Status'] = True  # O(1)
                        print('=' * 50, '\nУчетная запись активирована!')  # O(1)
                    if status == 'no':  # O(1)
                        print('=' * 50, '\nОк, мы ничего не делаем!')  # O(1)
            else:
                print('=' * 50, '\nВведен неверный пароль!')  # O(1)
            search_status = True  # O(1)
    if not search_status:  # O(1)
        print('=' * 50, '\nПользватель с такими учетными данными не найден!\n'
                        'Пройдите регистрацию или проверьте корректность ввода!')  # O(1)


users_bd = {'vadim_123': {'Status': True, 'Password': 'my_cool_password'},
            'nikola': {'Status': False, 'Password': 'my_cool_666'},
            'grayMan': {'Status': True, 'Password': 'very_333'},
            'spider_man': {'Status': True, 'Password': 'spider!@#qwerty'},
            'batman': {'Status': False, 'Password': 'M@rt@'},
            'test_1': {'Status': True, 'Password': 'Qwerty.1'},
            'test_2': {'Status': False, 'Password': 'Qwerty.1'}, }

user_auth_var_1(users_bd)
# Первая функция будет эффективней и быстрей т.к. имеет O(1) константную сложнсоть и задействуют меньше ресурсов
