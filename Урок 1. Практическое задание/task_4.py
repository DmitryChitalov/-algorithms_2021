"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

users = {
    "1": [111, True],
    "2": [222, False],
    "3": [333, True],
    "4": [444, False],
}


def check_users_1(users_info, login, password):
    """
    Сложность O(1) - константная
    """
    if login in users_info.keys() and users_info[login][0] == password:
        if users_info[login][1]:
            print("Аутентификация прошла успешно")
        else:
            print("Активируйте Вашу учетную запись")
    else:
        print("Неверный логин или пароль")


def check_users_2(users_info, login, password):
    """
    Сложность O(n) - линейная
    """
    for i in users_info:
        if i == login:
            if users_info[i][0] == password:
                if users_info[login][1]:
                    return "Аутентификация прошла успешно"
                else:
                    return "Активируйте Вашу учетную запись"
            else:
                return "Неверный пароль"
        else:
            continue
    return "Неверный логин"


"""
Первый вариант сработает быстрее из-за отсутствия цикла
"""

check_users_1(users, "1", 111)
check_users_1(users, "12", 222)
check_users_1(users, "2", 222)

print(check_users_2(users, "1", 111))
print(check_users_2(users, "12", 22))
print(check_users_2(users, "2", 222))
print(check_users_2(users, "4", 22))
