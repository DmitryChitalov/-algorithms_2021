"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""
users = {'Tim': ['HASH123', 'Yes'], 'Vika': ['HASH321', 'No'], 'Nata': ['HASH213', 'No'],
         'Ted': ['HASH012', 'Yes'],'Piter': ['HASH123', 'No']}


# Первый способ
# Сложность O(1)

def check_active_profile(name_user):
    if users[name_user][1] == 'Yes':                                                        # O(1)
        print('Вход для польователя: ', name_user, ' разрешен')                             # O(1)
    elif users[name_user][1] == 'No':                                                       # O(1)
        print('Вход для польователя: ', name_user, ' запрещен. Пройдите аутентификацию!')   # O(1)


check_active_profile('Nata')

# Второй способ
# Сложность O(n)

def check_active_profile_2(name_user):
    for key, value in users.items():                                                                # O(n)
        if key == name_user:                                                                        # O(1)
            if value[1] == 'Yes':                                                                   # O(1)
                print('Вход для польователя: ', name_user, ' разрешен')                             # O(1)
            elif value[1] == 'No':                                                                  # O(1)
                print('Вход для польователя: ', name_user, ' запрещен. Пройдите аутентификацию!')   # O(1)


check_active_profile_2('Tim')


"""
Вывод: Первый способ выполняется быстрее , так как у всех алгоритмов константная сложность,
общая сложность = O(1), в отличии от Второго способа в котором 'СЛОЖНОСТЬ' является O(n)
"""