"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

users = {('user', 'password'): 'activated', ('user2', 'password2'): 'deactivated'}


def check_auth_1(dict_obj):
    """Сложность функции O(N)"""
    login = input('Введите логин')  # 0(1)
    password = input('Введите пароль')  # 0(1)
    data = (login, password)
    for user_data in dict_obj.keys():  # O(N)
        if user_data == data:  # O(1)
            if dict_obj[user_data] == 'activated':  # 0(1)
                print('Успешно')  # 0(1)
            else:
                print('Активируйте учетную запись')  # 0(1)



check_auth_1(users)


def check_auth_2(dict_obj):
    """Сложность функции 0(1), функция линейная,
    следовательно она более предпочтительна"""
    login = input('Введите логин')  # 0(1)
    password = input('Введите пароль')  # 0(1)
    user_data = (login, password)  # O(1)
    try:
        if dict_obj[user_data] == 'activated':  # O(1)
            print('Успешно')  # O(1)
        else:
            print('Активируйте учетную запись')  # O(1)
    except Exception:
        print('Неверный логин или пароль')  # O(1)


check_auth_2(users)
