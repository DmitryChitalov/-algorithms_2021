"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

# Решение №1. Сложность O(n^2) - квадратичная.
"""
def user_check():
    user_pass = {'mrFrog':'1234', 'uncle_J':'abcd'}
    user_status = {'mrFrog':True, 'uncle_J':False}

    while True:
        user = input("Введите имя: ")
        password = input("Введите пароль: ")
        if user not in user:
            print("Введите имя нового пользователя: ")
            continue
        if password == user_pass.get(user) and user_status.get(user) == True:
            print(f'Добро пожаловать, {user}. Ваша учетная запись активна')
        elif password == user_pass.get(user) and user_status.get(user) == False:
            print(f'Добро пожаловать, {user}. Ваша учетная заморожена\nОбратитесь к администратору')
        else:
            print("Неверный пароль, попробуйте еще раз")

user_check()
"""

users = {
    'mrFrog1': ['1234', 1],
    'mrFrog2': ['2345', 0],
    'mrFrog3': ['3456', 1],
    'mrFrog4': ['4567', 0],
    'mrFrog5': ['5678', 1]
}


# Решение №2. Сложность О(n) - линейная
def user_check_2(log, pas, users_dict):
    if log in users_dict:
        if users_dict.get(log)[0] == pas:
            if users_dict.get(log)[1] == 1:
                result = 'Добро пожаловать. Ваша учетная запись активна'
            else:
                result = 'Ваша учетная запись заморожена\nОбратитесь к администратору'
        else:
            result = 'Неверный пароль'
    else:
        result = 'Неверный логин'
    return result

print('Проверка аутентификации с линейной сложностью. Для выхода введите "q"')
log = ''
while log != 'q':
    log = input('Введите логин: ')
    pas = input('Введите пароль: ')
    print(user_check_2(log, pas, users))


# Решение №3. Сложность О(1) - константная
def user_check_3(log, pas, users_dict):
    if users_dict.get(log) and users_dict[log][1] == 1:
        if users_dict[log][0] == pas:
            result = 'Добро пожаловать. Ваша учетная запись активна'
        else:
            result = 'Неверный пароль'
    elif users_dict.get(log) and users_dict[log][1] == 0:
        result = 'Ваша учетная запись заморожена\nОбратитесь к администратору'
    else:
        result = 'Неверный логин'
    return result

print('Проверка аутентификации с константной сложностью. Для выхода введите "q"')
log = ''
while log != 'q':
    log = input('Введите логин: ')
    pas = input('Введите пароль: ')
    print(user_check_3(log, pas, users))