"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""
# Структура словаря: {login:[password, activate]}
users = {'user1': ['qwerty123', 1],
         'user2': ['russia9012', 0],
         'user3': ['123456789q', 1],
         'user4': ['zxcvbnm1', 0]}


# Решение № 1
def chek_authentication_1(name, password):
    """
    Общая сложность алгоритма: O(n) - линейная
    """
    if name in users and users[name][0] == password:                                   # O(n)
        if users[name][1] != 1:                                                        # O(1)
            activate = int(input("Вам нужно активировать учетную запись!"
                                 " Введите 0 - не активировать, 1 - активировать: "))  # O(1)
            if activate == 1:                                                          # O(1)
                return 'Вы успешно авторизовались!'
            return 'Учетная запись не авторизована, вход невозможен!'                  # O(1)
        return 'Вы успешно авторизовались!'                                            # O(1)
    return 'Такой учетной записи не существует или был введен неверный пароль!'        # O(1)


# Решение № 2
def chek_authentication_2(name, password):
    """
    Общая сложность алгоритма: O(1) - константная
    """
    if password == users.get(name)[0] and users.get(name)[1] == 1:                 # O(1)
        return 'Вы успешно авторизовались!'                                        # O(1)
    elif password == users.get(name)[0] and users.get(name)[1] == 0:               # O(1)
        activate = int(input("Вам нужно активировать учетную запись!"              # O(1)
                             " Введите 0 - не активировать, 1 - активировать: "))  # O(1)
        if activate == 1:                                                          # O(1)
            users.update({name: [password, 1]})                                    # O(1)
            return 'Вы успешно авторизовались!'                                    # O(1)
        return 'Учетная запись не авторизована, вход невозможен!'                  # O(1)
    return 'Такой учетной записи не существует или был введен неверный пароль!'    # O(1)


print(chek_authentication_2('user1', 'qwerty123'))

"""
Вывод: эффективннее будет решение № 2, так как сложность этого решения константная, значит этот алгоритм
отработает быстрее, чем алгоритм в решение № 1, так как в решении № 1 сложность линейная.
"""