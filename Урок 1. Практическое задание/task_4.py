"""Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

print('Решение 1:')

data = [{'login': 'robot228', 'passwd': '1234', 'status': 'activated'},
        {'login': 'android351', 'passwd': '35679', 'status': None}]  # O(1) - константа


def login_check(login, passwd):
    login_in = False  # O(1) - константа

    for account in data:  # O(N) - линейная
        if account['login'] == login and account['passwd'] == passwd:  # O(N) - линейная
            if account['status'] == 'activated':  # O(N) - линейная
                print('Добро пожаловать', login)  # O(N) - линейная
                login_in = True  # O(1) - константа
                break
            else:
                print('Вы не можите войти, так как ваш аккаунт не подтверждён!')
                age = int(input('Введите колличество полных лет: '))
                if age >= 18:  # O(N) - линейная
                    account['status'] = 'activated'
                    login_in = True  # O(1) - константа
                    print('Добро пожаловать', login)  # O(N) - линейная
                    break
                else:
                    login_in = True  # O(1) - константа
                    print('Простите, но данный сайт для совершеннолетних!')  # O(1) - константа
                    print('Вам должно быть как минимум 18 лет!')  # O(1) - константа
                    break
    if not login_in:  # O(N) - линейная
        print('Ошибка проверьте корректность логина и пароля!')  # O(1) - константа


# итоговая сложность O(N) - линейная так как это максимальная сложность


print('Учётная запись активирована:')
login_check('robot228', '1234')  # O(1) - константа
print()
print('Учётная запись не активирована:')
login_check('android351', '35679')  # O(1) - константа

print()
print('Решение 2:')

data_accounts = [{'login': 'robot228', 'passwd': '1234', 'status': 'activated'},
                 {'login': 'android351', 'passwd': '35679', 'status': None}]  # O(1) - константа


def account_check(login, passwd):
    login_in = False  # O(1) - константа

    for account in data_accounts:  # O(N) - линейная
        if login in account.values() and passwd in account.values():  # O(N) - линейная
            if account.get('status') == 'activated':  # O(N) - линейная
                print('Добро пожаловать', login)  # O(N) - линейная
                login_in = True  # O(1) - константа
                break
            else:
                print('Вы не можите войти, так как ваш аккаунт не подтверждён!')  # O(1) - константа
                age = int(input('Введите колличество полных лет: '))
                if age >= 18:  # O(N) - линейная
                    account.update({'status': 'activated'})  # O(1) - константа
                    login_in = True  # O(1) - константа
                    print('Добро пожаловать', login)  # O(N) - линейная
                    break
                else:
                    login_in = True  # O(1) - константа
                    print('Простите, но данный сайт для совершеннолетних!')  # O(1) - константа
                    print('Вам должно быть как минимум 18 лет!')  # O(1) - константа
                    break
    if not login_in:  # O(N) - линейная
        print('Ошибка проверьте корректность логина и пароля!')  # O(1) - константа


# итоговая сложность O(N) - линейная так как это максимальная сложность


my_login = input('Введите ваш логин: ')  # сложность O(N) - линейная
my_passwd = input('Введите пароль: ')  # сложность O(N) - линейная
account_check(my_login, my_passwd)  # сложность O(N) - линейная

"""
Вывод:
В обоих алгоритмах время получилось одинаковое несмотря на разные подходы с
работой со словорём. В частности особой сильной разницы в эффективности я не вижу. 
Использовать ключи и значения по классике или использовать get и values это будет константами.
Проверки типа  == или проходы по словарю if in будут линейной сложности. 
В обоих подходах я использовал выход из цикла break что ускоряет работу програм 
так как не приходится по всему циклу проходить если результат достигнут раньше. 
Я мог бы добиться для одного из вариантов квадратичной сложности добавив 
вложенный цикл for чтоб он пробегал по словарю, но у вас не сказано что решения 
должны быть разной сложности. И такое решение было бы естественно менее эффективным.
"""
