"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""



#Общая сложность - линейная - O(n) судя по dictionary comprehension
# user_database = {'Bob': '12345', 'Valera': '54321', 'Frank': '111222333', 'Peter': '333222'}  ## O(1)
# username, password = input("enter username:"), input("enter password:") ### O(1)
# userinfo = username, password  ## O(1)
#
# access_granted = {k:v for k, v in user_database.items() if k == username and v == password}   ### O(n)
#
# if access_granted:                 ### O(1)
#     print('access granted')
# else:
#     print("access denied")
#
#








## этот вариант лучше так как нет лишнего, но по моему тут тоже O(N), но он быстрее. Может даже O(1)
# user_database = {'Bob': '12345', 'Valera': '54321', 'Frank': '111222333', 'Peter': '333222'}  ##O(1)
# username, password = input("enter username:"), input("enter password:")  ##O(1)
# userinfo = username, password ##O(1)
#

# if userinfo in user_database.items(): ##O(1)
#     print("access granted")
# else:
#     print("access denied")
#
