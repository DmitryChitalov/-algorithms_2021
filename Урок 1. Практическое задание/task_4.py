"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


def user_authentication1(login, password, web_data: dict):
    """
        Принимает три параметра:
        первый и второй - логин и пароль от пользователя,
        третий в виде словаря из БД с логином (ключ), паролем и активацией.
        Проверяет активацию учётной записи пользователя.
        В случае не активной предлагает пройти её.
        Если логин и пароль верный - то авторизация успешно пройдена.
        Сложность алгоритма O(N) - линейная
    """
    if login in web_data:  # O(N)
        if web_data.get(login)[0] == password:
            return 'Успешно' if web_data.get(login)[1] else 'Необходимо пройти активацию учетной записи'
    return 'Неверный логин или пароль'


def user_authentication2(login, password, web_data: dict):
    """
        Принимает три параметра:
        первый и второй - логин и пароль от пользователя,
        третий в виде словаря из БД с логином (ключ), паролем и активацией.
        Проверяет активацию учётной записи пользователя.
        В случае не активной предлагает пройти её.
        Если логин и пароль верный - то авторизация успешно пройдена.
        Сложность алгоритма O(1) - константная
    """
    if web_data.get(login) and web_data[login][1]:  # O(1)
        return 'Успешно' if web_data[login][0] == password else 'Неверный пароль'
    elif web_data.get(login) and not web_data[login][1]:
        return 'Необходимо пройти активацию учетной записи'
    else:  # такого логина нет
        return 'Неверный логин'


base_data = {
    'user1': ['asdf', 1],
    'user2': ['qwer', 0],
    'user3': ['zxcv', 1],
    'user4': ['ghjk', 1],
    'user5': ['yuio', 0]
}


print(user_authentication1('user1', 'asdf', base_data))
print(user_authentication1('use1', 'asdf', base_data))
print(user_authentication1('user1', 'adf', base_data))
print(user_authentication1('user2', 'qwer', base_data), end='\n \n')

print(user_authentication2('user1', 'asdf', base_data))
print(user_authentication2('user2', 'qwer', base_data))
print(user_authentication2('user3', 'zxcv', base_data))
print(user_authentication2('use1', 'asdf', base_data))
