"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


def check_authorization_dict(login_d, password_d):
    """Функция проверки авторизации с использованием словаря.

    Сложность: O(1)
    """
    if login_d in users_dict:                                    # O(1)
        if users_dict[login_d][0] == password_d:                 # O(1)
            if users_dict[login_d][1]:                           # O(1)
                return True, 'Вы авторизованы'                   # O(1)
            else:                                                # O(1)
                return False, 'Вам необходимо авторизоваться'    # O(1)
        else:                                                    # O(1)
            return False, 'Неверный пароль'                      # O(1)
    else:                                                        # O(1)
        return False, 'Пользователь не найден'                   # O(1)


def check_authorization_list(login_l, password_l):
    """Функция проверки авторизации с использованием списка.

    Сложность: O(n)
    """
    for user in users_list:                                        # O(n)
        if user[0] == login_l:                                     # O(1)
            if user[1] == password_l:                              # O(1)
                if user[2]:                                        # O(1)
                    return True, 'Вы авторизованы'                 # O(1)
                else:                                              # O(1)
                    return False, 'Вам необходимо авторизоваться'  # O(1)
            else:
                return False, 'Неверный пароль'
    return False, 'Пользователь не найден'


users_dict = {
    'Иванов': ['123456', True],
    'Петров': ['111111', False],
    'Сидоров': ['sid12345', True]
}

users_list = [
    ['Иванов', '123456', True],
    ['Петров', '111111', False],
    ['Сидоров', 'sid12345', True]
]

login = input('Логин: ')
password = input('Пароль: ')
auth, log_str = check_authorization_dict(login, password)
print(log_str)
auth, log_str = check_authorization_list(login, password)
print(log_str)

# Решение со словарем эффективнее. Поиск в словаре, как в Hash таблице очень быстрый
