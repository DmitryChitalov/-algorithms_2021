"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


def check_pass(dic_obj, login_obj, pass_obj):
    """
    Сложность: О(1) - константная
    :param dic_obj:
    :param login_obj:
    :param pass_obj:
    :return:
    """
    if login_obj in dic_obj.keys():
        if dic_obj[login_obj][0] == pass_obj and dic_obj[login_obj][1]:
            return "Доступ разрешен"
        elif dic_obj[login_obj][0] == pass_obj and not dic_obj[login_obj][1]:
            return "Учетная запись не активирована!"
        elif dic_obj[login_obj][0] != pass_obj:
            return "Ошибка имени или пароля"
    else:
        return "Ошибка имени или пароля"


my_dict = {
    'user1': ['pass1', True],
    'user2': ['pass2', False]
}

login = input('Введите имя: ')
password = input('Введите пароль: ')
print(check_pass(my_dict, login, password))
