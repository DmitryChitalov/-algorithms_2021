"""
Задание 4.

Пользователи веб-ресурса проходят аутентификацию. В системе хранятся логин,
пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована. А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход, который вы придумаете, например, реализовать словарь.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
"""

import random


def activation():
    '''
    Функция генерирует код для поддтверждения активации,
    сравнивает его с введенным кодом пользователя.

    :return answer (int): флаг прохождения активации
    '''
    rand_code = []
    for i in range(4):
        rand_values = random.randint(1, 10)
        rand_code.append(str(rand_values))
    rand_code = ''.join(rand_code)
    code = input(f'Введите код подтверждения ({rand_code}),\n'
                 f' присланный на "Ваш телефонный номер": ')
    if code == rand_code:
        answer = 1
    else:
        answer = 0
    return answer


def user_check_1(login, password):
    '''
    Функция осуществляет проверку соответствия данных пользователя данным,
    содержащимся в базе пользователей веб-ресурса. Если активация пройдена,
    меняет флаг активации пользователя.

    :param login (str): логин пользователя
    :param password (str): пароль пользователя
    :return answer (str): ответ на аутентификацию
    '''
    # Сложность O(1) - константная
    global user_base                                                                    # O(1)
    if login in user_base:                                                              # O(1) - проверка на вхождение в словарь по ключу
        if password == user_base[login][0] and user_base[login][1] == 1:                # O(1) + O(1)
            answer = 'Аутентификация пройдена. Вход осуществлен'                        # O(1)
        elif password == user_base[login][0] and user_base[login][1] == 0:              # O(1) + O(1)
            print('Учетная запись не активирована')                                     # O(1)
            choice = input('Для активации введите => 1\n'                               # O(1)
                           'Для выхода введите    => 0\n')
            if int(choice):                                                             # O(1) + O(1)
                if activation():                                                        # O(1)
                    user_base[login][1] = 1                                             # O(1)
                    answer = 'Аутентификация пройдена. Вход осуществлен'                # O(1)
            else:
                answer = 'Выход. Активация не пройдена'                                 # O(1)
        else:
            answer = 'Выход. Неверный пароль'                                           # O(1)
    else:
        answer = 'Выход. Неверный логин'                                                # O(1)
    return answer                                                                       # O(1)


def user_check_2(login, password):
    '''
    Функция осуществляет проверку соответствия данных пользователя данным,
    содержащимся в базе пользователей веб-ресурса. Если активация пройдена,
    меняет флаг активации пользователя.

    :param login (str): логин пользователя
    :param password (str): пароль пользователя
    :return answer (str): ответ на аутентификацию
    '''
    # Сложность O(n) - линейная
    global user_base                                                                    # O(1)
    for key in user_base.keys():                                                        # O(n) - Для всех методов: keys(), values(), items()
        if login == key:                                                                # O(1)
            if password == user_base[login][0] and user_base[login][1] == 1:            # O(1) + O(1)
                answer = 'Аутентификация пройдена. Вход осуществлен'                    # O(1)
            elif password == user_base[login][0] and user_base[login][1] == 0:          # O(1) + O(1)
                print('Учетная запись не активирована')                                 # O(1)
                choice = input('Для активации введите => 1\n'                           # O(1)
                               'Для выхода введите    => 0\n')
                if int(choice):                                                         # O(1) + O(1)
                    if activation():                                                    # O(1)
                        user_base[login][1] = 1                                         # O(1)
                        answer = 'Аутентификация пройдена. Вход осуществлен'            # O(1)
                else:
                    answer = 'Выход. Активация не пройдена'                             # O(1)
            else:
                answer = 'Выход. Неверный пароль'                                       # O(1)
            return answer                                                               # O(1)
    else:
        answer = 'Выход. Неверный логин'                                                # O(1)
    return answer                                                                       # O(1)


# ------------------------------- main -----------------------------------------------
user_base = {
    # логин: [пароль, флаг активации] - не стал мудрить
    'bob': ['00000000', 1],
    'fil': ['11111111', 0],
    'leo': ['22222222', 1],
    'tom': ['33333333', 0],
    'nil': ['44444444', 1],
    'dik': ['55555555', 0],
    'rik': ['66666666', 1],
    'jon': ['77777777', 0],
    'bom': ['88888888', 1],
    'dom': ['99999999', 0]
}

login_user = input('Введите логин: ')
password_user = input('Введите пароль: ')
print(user_check_1(login_user, password_user))
# print(user_check_2(login_user, password_user))

# print(user_check_1('bob', '00000000'))
# print(user_check_1('fil', '11111111'))
# print(user_base)

# print(user_check_2('dom', '99999999'))
# print(user_check_2('nil', '44444444'))

'''
Вывод напрашивается сам собой, так как константная сложность самая эффективная, по этому
функция user_check_1 с константной сложностью эффективнее чем функция user_check_1 с
линейной сложностью.
'''
