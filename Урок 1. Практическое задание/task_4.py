"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

users = {
    'Arina_Sergeevna': ['Ar1na', 'qwerty123', 0],
    'Pavel_Durov': ['Pash0k', 'hate_piggers', 1],
    'Sergey_Ivanov': ['Seregka', 'super-pass', 0]
}

########################################################################
# Первый алгоритм
# Сложность: O(log n)


def verif(name, password):
    data = users.get(name)
    if data[1] == password and data[-1] == 1:
        print('Вы успешно прошли авторизацию!')
    else:
        print('Ошибка! Удостовертесь в правильности введенных данных и повторите попытку.')


verif('Sergey_Ivanov', 'super-pass')
verif('Pavel_Durov', 'hate_piggers')


########################################################################
# Второй алгоритм
# Сложность: O(n log n)


for k, v in users.items():
    if v[-1] == 0:
        print(f'Уважаемый(-ая) {k}, пройдите проверку!')


"""
Вывод: помоему 1 алгоритм пусть и больше, легче, он не использует цикла for и не ищет ненужных пользователей
"""