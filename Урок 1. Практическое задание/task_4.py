"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

# Вариант 1
# Организуем словарь. В качестве ключа используется уникальное имя пользователя.
# значение реализовано списком, состоящим из пароля пользователя и отметки об активации
authorization_data = {
    'user_1': ['password_1', True],
    'user_2': ['password_2', False],
    'user_3': ['password_3', True],
    'user_4': ['password_4', False],
    'user_5': ['password_5', True],
    'user_6': ['password_6', True],
    'user_7': ['password_7', False],
    'user_8': ['password_8', True],
    'user_9': ['password_9', False],
    'user_10': ['password_10', False]
}


def authorization_1(login, password):
    """
    Функция получает на вход логин и пароль пользователя,
    запрашивает из словаря пароль, соответствующий заданному логину
    и сравнивает значение с заданным паролем.
    Если в словаре не найдено искомое значение логина, пароль для сравнения
    принимает значение None.
    При успешной проверке, проверяется флаг активации записи.
    Если учётная запись не активирована, то предлагается её активировать в
    цикле, пока пользователь не ответит "да" или "нет".

    Сложность алгоритма:
    Поиск ключа в словаре и получение значения (поиск в хэш-таблице) - O(1),
    Получение элемента списка по индексу O(1)
    Выполнение цикла while - зависит от пользователя, в лучшем случае 1 итерация O(1)
    Вывод строк на экран O(1)
    Проверка ввода пользователя: строки "да"/"нет" фиксированной длины - O(1)

    В лучшем случае общая сложность алгоритма - O(1) константная
    """

    if authorization_data.get(login, [None])[0] != password:
        print('Неверные данны пользователя. Доступ запрещён.')
    elif not authorization_data[login][1]:
        while True:
            user_input = input('Ваша учётная запись не активирована.'
                               'Желаете активировать её сейчас? да/нет\n>>>')
            if user_input == 'да':
                authorization_data[login][1] = True
                print('Авторизация завершена. Доступ разрешён.')
                break
            elif user_input == 'нет':
                print('Доступ запрещён. Необходимо активировать учётную запись.')
                break
    else:
        print('Доступ разрешён. Добро пожаловать!')


"""
# Организуем словарь. В качестве ключа используется уникальное имя пользователя.
# значение реализовано списком, состоящим из пароля пользователя и отметки об активации
authorization_data = {
    'user_1': ['password_1', True],
    'user_2': ['password_2', False],
    'user_3': ['password_3', True],
    'user_4': ['password_4', False],
    'user_5': ['password_5', True],
    'user_6': ['password_6', True],
    'user_7': ['password_7', False],
    'user_8': ['password_8', True],
    'user_9': ['password_9', False],
    'user_10': ['password_10', False]
}
def authorization_2(login, password):

    if login not in authorization_data \
             or password != authorization_data[login][0]:
        print('Неверные данны пользователя. Доступ запрещён.')
    elif not authorization_data[login][1]:
        user_input = input('Ваша учётная запись не активирована.'
                           'Желаете активировать её сейчас? да/нет\n>>>')
        if user_input== 'да':
            authorization_data[login][1] = True
            print('Авторизация завершена. Доступ разрешён.')
        else:  # user_input == 'нет':
            print('Доступ запрещён. Необходимо активировать учётную запись.')
    else:
        print('Доступ разрешён. Добро пожаловать!')
"""


if __name__ == '__main__':

    print('Успешный вход:')
    authorization_1('user_1', 'password_1')
    print('Неверные данные:')
    authorization_1('user_20', 'password_3')
    print('Не активизированная запись:')
    authorization_1('user_2', 'password_2')
