"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

"""
Первое решение эффективнее, т.к. алгоритм имеет константную сложность.
"""

# 1 O(1)


users = {'Apple45': ['password', 'YES'], 'Pineapple': ['password2', 'NO']}


def check_profile(user_name):
    if users[user_name][1] == 'YES':                   #O(1)
        print('Приветствую тебя!')
    elif users[user_name][1] == 'NO':                  #O(1)
        print('Неверный пароль или имя пользователя!')


check_profile('Pineapple')                             #O(1)

# 2 O(n)


users = {'Apple45': ['password', 'YES'], 'Pineapple': ['password2', 'NO']}


def check_profile(user_name):
    for key, value in users.items():                           #O(n)
        if key == user_name:                                   #O(1)
            if value[1] == 'YES':  # O(1)                      #O(1)
                print('Приветствую тебя!')
            elif value[1] == 'NO':  # O(1)                     #O(1)
                print('Неверный пароль или имя пользователя!')


check_profile('Apple45')                                       #O(1)

