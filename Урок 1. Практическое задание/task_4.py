"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


# my_log1 O(n)
def my_log1(n, login, password):
    z = 0  # O(1)
    for i in range(len(n)):  # O(n)
        a = n[i]  # O(1)
        if a["log"] == login:  # O(1)
            if a["access"]:  # O(1)
                if a["pas"] == password:  # O(1)
                    print('вилкам')  # O(1)
                    z = 1  # O(1)
                    break
                else:
                    print('пароль не верен')  # O(1)
                    z = 1  # O(1)
                    break
            else:
                z = 1  # O(1)
                print('у пользователя нет прав доступа')  # O(1)
                break

    if z == 0:  # O(1)
        userInput = input('пользователь не найден. нажмите Y чтобы создать нового пользователя: ')  # O(1)
        if userInput == 'y':  # O(1)
            password = int(input('введите пароль: '))  # O(1)
            n.append({"log": userLog, "pas": password, "access": True})  # O(1)
    return print('вилкам ню юзер ', login)  # O(1)


# my_log1 O(n) не уверен как правильно расчитать сложность для рекурсии но этот вариант хуже хотя бы тем что использует память
def my_log2(n, login, password):
    a = n[0]  # O(1)
    if a["log"] == login:  # O(1)
        if a["pas"] == password:  # O(1)
            if a["access"]:  # O(1)
                return print('welcome')
            else:
                return print('у пользователя нет прав доступа')
    if len(n) == 1:  # O(1)
        userInput = input('пользователь не найден. нажмите Y чтобы создать нового пользователя: ')  # O(1)
        if userInput == 'y':  # O(1)
            password = int(input('введите пароль: '))  # O(1)
            print('вилкам ню юзер ', login)
            return n.append({"log": userLog, "pas": password, "access": True})  # O(1)
        else:
            return print("досвидания")

    if len(n) != 0: # O(1)
        print(n)
        n.pop(0)  # O(n)
        return my_log2(n, login, password)


account = [{"log": 1, "pas": 2, "access": True},
           {"log": 3, "pas": 5, "access": True},
           {"log": 3, "pas": 4, "access": False},
           {"log": 8, "pas": 9, "access": True}]

userLog = int(input('введите логин: '))
userPass = int(input('введите пароль: '))

# my_log1(account, userLog, userPass)
my_log2(account, userLog, userPass)

print(account)
