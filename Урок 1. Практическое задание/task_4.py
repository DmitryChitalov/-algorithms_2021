"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""


# Решение 1. Уровень сложности O(1)
def verify_1(l, p):
	if l in log_data.values():
		if log_data['password'] == p:
			if log_data['true'] == '1':
				print('Добро пожаловать!')
				return
			print('Ваша учетная запись заблокирована!')
			return
		print('Некорректный пароль!')
		return
	print('Некорректный логин!')
	return


# Решение 2. Уровень сложности O(len(n))
def verify_2(l, p):
	dict_1 = {'login': l, 'password': p}
	if dict_1['login'] == log_data['login'] and dict_1['password'] == log_data['password']:
		if log_data['true'] == '1':
			print('Добро пожаловать!')
			return
		print('Ваша учетная запись заблокирована!')
		return
	print('Некоректный логин или пароль!')


log_data = {'login': 'xxx', 'password': 'abc', 'true': '1'}

verify_1('abc', 'xxx')
verify_2('xxx', 'abc')

# Вывод: первое решение имеет меньшую сложность
