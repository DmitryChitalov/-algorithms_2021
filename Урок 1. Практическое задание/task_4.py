"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

"""
Решение 1. Создать базу данных на основе словаря login: [password, flag]
Сложность алгоритма зависит количество кортежей ключ - значение, т е линейная O(n)
Однако если учитывать только саму реализацию выполнения задачи, то O(1)
"""
users = {'user_1': ['12345', False], 'user_2': ['12345', True], 'user_3': ['9876', False], 'user_4': ['123', False]}


def web_resource(dict_of_users: dict, login: str) -> None:
    if login in dict_of_users:
        print('Приветствую, {}!'.format(login))
        password = input('Пожалуйста, введите пароль ')
        if password == dict_of_users[login][0]:
            print('Поздравляю, вы в системе!')
            if not dict_of_users[login][1]:
                answer = input('У вас не активирована учетная запись. Желаете ее активировать? 1/0 ')
                if answer == '1':
                    print('Операция прошла успешно')
                    dict_of_users[login][1] = True
                else:
                    print('Как пожелаете!')
        else:
            print('Неверный пароль. Других попыток не будет. До свидания')
        return


"""
Решение 2. Создать базу данных на основе вложенного списка
Сложность алгоритма O(n)
"""
users_2 = [['user_1', '12345', False], ['user_2', '12345', True], ['user_3', '9876', False], ['user_4', '123', False]]


def web_resource_2(list_of_users: list, login: str) -> None:
    for el in list_of_users:
        if login in el:
            print('Приветствую, {}!'.format(login))
            password = input('Пожалуйста, введите пароль ')
            if password == el[1]:
                print('Поздравляю, вы в системе!')
                if not el[2]:
                    answer = input('У вас не активирована учетная запись. Желаете ее активировать? 1/0 ')
                    if answer == '1':
                        print('Операция прошла успешно')
                        el[2] = True
                    else:
                        print('Как пожелаете!')
            else:
                print('Неверный пароль. Других попыток не будет. До свидания')
            return


web_resource(users, 'user_2')
web_resource_2(users_2, 'user_1')
"""
Конечно же, первое решение намного лучше. В первую очередь потому,
что коллекция словарь лучше подходит для выполнения поставленной задачи,
нежели список. Объясняется это тем, что когда речь идет о хранилищах данных,
в приоритете у нас скорость поиска этих данных. 
В О-нотации поиск по словарю - О(1), а в списке - O(n)
"""
