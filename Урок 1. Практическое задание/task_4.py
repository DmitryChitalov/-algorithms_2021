"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
"""

# сохраним все в структуру вида {login:[password, is_activated]}

users = {'login1': ['password1', True],
         'login2': ['password2', True],
         'login3': ['password3', True],
         'login4': ['password4', False]
         }


def auth1(login, password):
    """
    Пройдемся циклом. Сложность O(N)
    """
    for k, v in users.items():  # O(N)
        if k == login:  # O(1)
            if v[0] == password and v[1]:  # O(1)
                return True  # O(1)
    return False  # O(1)


print(auth1('login341', 'passwod1'))


def auth2(login, password):
    """
    Решим через линейную сложность, не зря же мы сделали хранение в словаре
    """
    if users.get(login):  # O(1)
        return users[login][1] and users[login][0] == password  # O(1)

    return False


print(auth2('login31', 'password1'))

# второе решение очевидно лучше, т.к. выполняется за линейное время
