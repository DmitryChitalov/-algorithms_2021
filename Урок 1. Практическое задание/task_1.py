"""
Задание 1.

Для каждой из трех задач выполнить следующее:
1) для каждой инструкции рядом в комментарии определите сложность этой инструкции
2) определите сложность алгоритма в целом

укажите сложность непосредственно в этом файле
точки, где нужно поработать вам, отмечены знаком '!!!'
Не забудтье оценить итоговую сложность каждого из трех алгоритмов.
"""

import random


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: !!!.
    """
    lst_to_set = set(lst_obj)  # !!! Сложность: O(len(...)) - 'линейная', зависит от длины аргумента
    return lst_to_set  # !!!         Сложность: O(1) - 'константа'

# T(n) = O(n) + O(1)
# O(n) - линейная сложность

#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: !!!.
    """
    for j in range(len(lst_obj)):          # !!! Сложность: O(n) - 'линейная'
        if lst_obj[j] in lst_obj[j+1:]:    # !!! Сложность: O(n) - 'линейная'
            return False                   # !!! Сложность: O(1) - 'константа'
    return True                            # !!! Сложность: O(1) - 'константа'

# T(n) = O(n) * (O(n) + O(1)) = O(n**2)    (+ O(1) один раз, так как либо True, либо False)
#   или  O(n) * O(n) + O(1) = O(n**2)
# O(n**2) - квадратичная сложность

#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: !!!
    """
    lst_copy = list(lst_obj)                 # !!! Сложность: O(n) - 'линейная', зависит от длины аргумента
    lst_copy.sort()                          # !!! Сложность: O(n * log n) - 'линейно-логарифмическая'
    for i in range(len(lst_obj) - 1):        # !!! Сложность: O(n) - 'линейная'
        if lst_copy[i] == lst_copy[i+1]:     # !!! Сложность: O(1) - 'константа'
            return False                     # !!! Сложность: O(1) - 'константа'
    return True                              # !!! Сложность: O(1) - 'константа'

# T(n) = O(n) + O(n * log n) +  O(n) * O(1) + O(1) = O(n + n * log n + n * 1 + 1) =
# = O(n * log n + 2 * n + 1) = O(n * log n)
# O(n * log n) - линейно-логарифмическая сложность

#############################################################################################


for j in (50, 500, 1000, 5000, 1000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
