""" Домашнее задание к уроку №1 курс Алгоритмы и структуры данных на Python
    студент: Максим Сапунов Jenny6199@yandex.ru
    26.05.2021
"""
# Задание 1.

# Для каждой из трех задач выполнить следующее:
# 1) для каждого выражения вместо !!! укажите сложность этого выражения.
# 2) определите сложность задачи в целом.
# Примечание:
# Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

import random


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: N+1. Общая сложность O(N) линейная.
    """
    lst_to_set = set(lst_obj)  # Присвоение элементов списка из множества O(N)
    return lst_to_set  # Возврат значения O(1)


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: 2N + 1. Общая сложность O(N) линейная.
    """
    for j in range(len(lst_obj)):          # Цикл O(N)
        if lst_obj[j] in lst_obj[j+1:]:    # Перебор значений в списке O(N)
            return False                   # Возврат значения O(1)
    return True                            # Возврат значения O(1)


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: (N + N*logN + N + N + 1) = (3N + N*logN + 1).
    Доминирующее N*logN. Общая сложность N*logN линейно-логарифмическая.
    """
    lst_copy = list(lst_obj)                 # Присваивание O(N)
    lst_copy.sort()                          # Сортировка списка O(N*logN)
    for i in range(len(lst_obj) - 1):        # Цикл 0(N)
        if lst_copy[i] == lst_copy[i+1]:     # Поиск в списке O(N)
            return False                     # Возврат значения O(1)
    return True                              # Возврат значения

#############################################################################################


for j in (50, 500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
