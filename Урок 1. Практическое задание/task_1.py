"""
Задание 1.

Для каждой из трех функций выполнить следующее:

1) для каждого выражения вместо !!! укажите сложность этого выражения.
2) определите сложность каждой функции в целом.

Сложность нужно определять только там, где указаны символы !!!

Примечание:
Прошу вас внимательно читать ТЗ и не выполнять все пункты.
"""

import random


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: O(len(...)) + O(1) = O(len(...)) - думаю, что эта сложность - линейная, потому что зависимость линейная
    """
    lst_to_set = set(lst_obj)  # O(len(...)) - зависит от длины аргумента, в данном случае это длина списка lst_obj
    return lst_to_set  # O(1)


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность:  O(N^2) - доминирующая квадратичная сложность (вложена О(N) в О(N))
    """
    for j in range(len(lst_obj)):          #  O(N)
        if lst_obj[j] in lst_obj[j+1:]:    #  O(N)
            return False                   # O(1)
    return True                            # O(1)  return срабатывает только раз, поэтому считаю его сложность один раз


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: O(NlogN) + 3*O(N) + 3*O(1) = O(NlogN)- доминирующая линейно-логарифмическая сложность
    """
    lst_copy = list(lst_obj)                 # O(1) + O(N)
    lst_copy.sort()                          # O(NlogN)
    for i in range(len(lst_obj) - 1):        # O(N) + O(1)
        if lst_copy[i] == lst_copy[i+1]:     # O(N)
            return False                     # O(1)
    return True                              # O(1)return срабатывает только раз, поэтому считаю его сложность один раз

#############################################################################################


for j in (50, 500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
