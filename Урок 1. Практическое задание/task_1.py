"""
Задание 1.

Для каждой из трех задач выполнить следующее:

1) для каждого выражения вместо !!! укажите сложность этого выражения.
2) определите сложность задачи в целом.

Примечание:
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import random


#############################################################################################
def check_1(lst_obj):
    """Функция должна создать множество из списка.

    Алгоритм 3:
    Создать множество из списка

    Сложность: Линейная сложность алгоритма O(N).
    """
    lst_to_set = set(lst_obj)  # Линейная сложность O(len(lst_obj)) O(N)
    return lst_to_set  # Константная сложность O(1)


#############################################################################################
def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах

    Сложность: Квадратичная O(N^2) так как имеем вложенность которая имеет линейную сложность O(N)*O(N) = O(N^2).
    """
    for j in range(len(lst_obj)):          # Линейная сложность O(N)
        if lst_obj[j] in lst_obj[j+1:]:    # Линейная сложность O(N)
            return False                   # константная сложность O(1)
    return True                            # Константная сложность O(1)


#############################################################################################
def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.

    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.

    Сложность: линейная сложность O(N)
    """
    lst_copy = list(lst_obj)                 # Линейная сложноть O(N)
    lst_copy.sort()                          # Линейно-логарифмическая сложность O(N long N)
    for i in range(len(lst_obj) - 1):        # линейная сложность O(N)
        if lst_copy[i] == lst_copy[i+1]:     # Констнантная сложность O(1)
            return False                     # Константная сложность O(1)
    return True                              # Константная сложность O(1)

#############################################################################################


for j in (50, 500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
'''Сложность задачи в целом - Квадратичная сложность O(N^2), тк одна из задач имеет квадратичную сложность'''
