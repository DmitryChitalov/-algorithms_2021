"""
Задание 1. (см. 9-10 стр, Вебинар: 1ч 8 мин)
Для каждой из трех задач выполнить следующее:
1) для каждого выражения вместо !!! укажите сложность этого выражения.
2) определите сложность задачи в целом.
Примечание:
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""

import random

def check_1(lst_obj):
    """Функция должна создать множество из списка.
    Алгоритм 3:
    Создать множество из списка
    Сложность: !!!. O(n)
    """
    lst_to_set = set(lst_obj)  # !!! O(n), т.к. set(lst) соответсвует O(len(.....)
    return lst_to_set  # !!! O(1) Возврат - const сл-ть
# Сложность задачи в целом:  O(n) + O(1) = O(n)

def check_2(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.
    Алгоритм 1:
    Проходимся по списку и для каждого элемента проверяем,
    что такой элемент отстутствует
    в оставшихся справа элементах
    Сложность: !!!. O(n^2)
    """
    for j in range(len(lst_obj)):          # !!! O(n) Т.к. Перебор: for j in range(len(list)) имет сл-ть O(n), а вот для for j in range(1,10) - O(1)
        if lst_obj[j] in lst_obj[j+1:]:    # !!! O(n) Имеем if эл-т in срез массива. in-O(N) - поиск наличия эл-тв в массиве, срез массива.-O(N): O(n)+O(n)=O(n)
    # Имеем 2 вложенных линейных O(n) одна в другую, Т.е. сложность O(n^2) - ДОМИНАНТ
            return False                   # !!! O(1)
    return True                            # !!! O(1)
# Сложность задачи в целом:  O(4)


def check_3(lst_obj):
    """Функция должная вернуть True, если все элементы списка различаются.
    Алгоритм 2:
    Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
    Если присутствуют дубли, они будут находиться рядом.
    Сложность: !!! O(n Log n)
    """
    lst_copy = list(lst_obj)                 # !!! O(n)
    lst_copy.sort()                          # !!! O(n Log n) - так для sort() и sorted) - ДОМИНАНТ
    for i in range(len(lst_obj) - 1):        # !!! O(n) - см. check_2
        if lst_copy[i] == lst_copy[i+1]:     # !!! O(1) - так для =, >, <
            return False                     # !!! O(1)
    return True                              # !!! O(1)
# Сложность задачи в целом:  2O(n) + O(n Log n) + 3м= O(n Log n)



for j in (50, 500, 1000, 5000, 10000):
    # Из 100000 чисел возьмем 'j' случайно выбранных
    # Всего 10 тыс. чисел
    lst = random.sample(range(-100000, 100000), j)

print(check_1(lst))
print(check_2(lst))
print(check_3(lst))
print(lst)