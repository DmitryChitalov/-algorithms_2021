"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""
import random

# Generate big_data
def generate_data():
    big_data = {}
    for i in range(900000):
        key = 'company' + str(i)
        value = random.randint(100000, 1000000)
        big_data[key] = value
    return big_data

# bid_data done
company = generate_data()


# first option
# Сложность: O(n log n)
def finder_1(my_dict: dict):
    top_3 = []                      # O(1)
    for i in my_dict.values():      # O(n)
        top_3.append(i)             # O(1)
    return sorted(top_3)[:3]        # O(n log n)


# second option
# Сложность: O(n)
def finder_2(my_dict:dict):
    top_3 = list(my_dict.values())  # O(n)
    return sorted(top_3)[:3]        # O(1)


"""
Вывод. Решения с меньшим количеством циклов и условий работаю быстрее. А решения с циклами и вложенными в них циками 
лучше избегать вовсе. Стремиться оптимизировать решение до O(log n) или в крайнем случае O(n)
"""
print(finder_1(company))

print(finder_2(company))

