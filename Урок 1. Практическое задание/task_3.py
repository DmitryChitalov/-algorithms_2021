""" Домашнее задание к уроку №1 курс Алгоритмы и структуры данных на Python
    студент: Максим Сапунов Jenny6199@yandex.ru
    26.05.2021
"""

# Задание 3.
# Для этой задачи:
# 1) придумайте 2-3 решения (не менее двух)
# 2) оцените сложность каждого решения в нотации О-большое
# 3) сделайте вывод, какое решение эффективнее и почему
# Сама задача:
# Имеется хранилище с информацией о компаниях: название и годовая прибыль.
# Для реализации хранилища можно применить любой подход,
# который вы придумаете, например, реализовать словарь.
# Реализуйте поиск трех компаний с наибольшей годовой прибылью.
# Выведите результат.
# Примечание:
# Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
# через строки документации в самом коде.
# Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
# Задание творческое. Здесь нет жестких требований к выполнению.
#############################################################################

# Решение.

# Объявление функций


def top_3_in_profit_v1(database: dict):
    """ Функция сортирует полученную базу данных по значению и выводит три записи
    с наибольшими значениями, возвращает список из трех лидирующих компаний.
    :param - словарь база данных (ключ - название компании, значение - прибыль).
    :return - список лидирующих компаний.
    Сложность алгоритма: 5+N**2**(N*logN)+2N --> O(N**2**N*logN) т.е. неудачный.
    """
    top_company = []                                    # O(1)
    i = 0                                               # O(1)
    while i < len(database):
        for key, value in database.items():               # O(N**2) два вложенных цикла
            if value == sorted(database.values())[i]:       # O(N*logN) вложенная сортировка
                top_company.append(key)                 # O(1)
        i += 1                                          # O(1)
    for value in top_company[-3:]:                      # O(N)
        print(f'{value}, прибыль: {database[value]}.')  # O(1)
    return top_company[-3:]                             # O(N)


def top_3_in_profit_v2(database: dict):
    """ Функция использует базу данных ключ и значение помещает в разные списки
        объединение данных происходит по внешнему ключу - позиции в списке.
        Использована квадратичная "пузырьковая сортировка" списков.
    :param - словарь база данных (ключ - название компании, значение - прибыль).
    :return - список лидирующих компаний.
    Сложность алгоритма: 5+4N+N**2 --> O(N**2) квадратичный (лучше v1).
    """
    cmp_name, cmp_profit = [], []                   # O(1)
    for key, value in database.items():             # O(N) Один проход цикла.
        cmp_name.append(key)                        # O(1)
        cmp_profit.append(value)                    # O(1) Заполняем словари.
    for i in range(len(cmp_profit) - 1):
        for k in range(len(cmp_profit) - 1):          # два вложенных цикла O(N**2)
            if cmp_profit[k] > cmp_profit[k + 1]:   # O(1) Сравниваем два значения
                cmp_profit[k], cmp_profit[k + 1] = cmp_profit[k + 1], cmp_profit[k]     # O(1)
                cmp_name[k], cmp_name[k + 1] = cmp_name[k + 1], cmp_name[k]             # O(1)
    cmp_name.reverse()          # O(N) "Разворачиваем" списки
    cmp_profit.reverse()        # O(N) --"--
    return cmp_name[0:3]        # O(N) Делаем срез из трех компаний-лидеров.


# Создание базы данных.
company_database = {
    'Sunlight': 4300000,
    'Metal gear': 3000000,
    'New world': 1000000,
    'Nemo action': 50000,
    'New horizons': 2300000,
    'Crocodile': 5134000,
    'Pumping iron': 850000,
    'My neighborhood': 1800000,
    'New hope': 3100000,
    'Happy worker': 900000
}

# Основной блок программы
if __name__ == '__main__':
    top_3_in_profit_v1(company_database)
    print(top_3_in_profit_v2(company_database))
