"""
Задание 3.
Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

companies_dict = {
    'CopyPaste': 200000,
    'ThinkOfIt': 400000,
    'PayToPlay': 600000,
    'NeverEnough': 190000,
    'AlwaysInTime': 500000
}

# 1 Способ:
max_dict = {}
for i in range(3):
    max_name = ''
    max_money = 0
    for j in companies_dict:
        if companies_dict.get(j) > max_money:
            max_name = j
            max_money = companies_dict.get(j)
    max_dict.update({max_name: companies_dict.pop(max_name)})
# При этом, надо бы вернуть значения обратно:
companies_dict.update(max_dict)

print(max_dict)
# Сложность данного способа: O(n), так как в первом цикле заранее известно, что он сработает 3 раза

# 2 Способ:
companies_list = []
for i in companies_dict:
    companies_list.append((i, companies_dict.get(i)))
companies_list.sort(key=lambda money: money[1], reverse=True)
max_list = []
for i in range(3):
    max_list.append(companies_list[i])
max_dict = dict(max_list)
print(max_dict)
# Выглядит так, как будто здесь сложность O(n^2 log(n)), так как в 50 строке есть условие поиска с неизвестным значением
# Но, так как такой сложности в списке нет, приму сложность O(n log(n))

# По итогу, можно сказать, что первый способ предпочтительнее, так как его сложность меньше, чем у второго.
