"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

from heapq import nlargest

companies = {"company_1": 135000, "company_2": 1000000, "company_3": 545102, "company_4": 125400,
             "company_5": 178000, "company_6": 745000, "company_7": 654125, "company_8": 958457}

# Рещение - 1

res_1 = sorted(companies.items(), key=lambda pair: pair[1], reverse=True)[:3]  # O(n Log(n)) - линейно-логарифмическая
print(f"Три компании, самой большой выручкой:  {res_1}")

# Рещение - 2

res_2 = nlargest(3, companies, key=companies.get)  # O (N log(k))  - линейно-логарифмическая

print("Три компании, самой большой выручкой:")

for val in res_2:
    print(val, ":", companies.get(val))

"""
Второе более выгодно, на нашем примере. 
Т.к. в случае сортировки накладные расходы над другими операциями составляют примерно N log(N).
Но при выполнении nlargest от k элементов, только приблизительно N log(k), 
что намного меньше, если k существенно меньше N.
Поэтому соотношение сортировки и nlargest над других операциями примерно равно.
Разница составляет не большая.
"""
