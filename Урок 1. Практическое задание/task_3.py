"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

company_dict = {'company_1': 100, 'company_2': 50, 'company_3': 300, 'company_4': 150, 'company_5': 250}
top_company = {'top_1': ('', 0), 'top_2': ('', 0), 'top_3': ('', 0)}


# Вариан 1. O(n log n)
tmp = sorted(company_dict.items(), key=lambda x: x[1], reverse=True)[:3]  # O(n log n)
top_company['top_1'], top_company['top_2'], top_company['top_3'] = tmp    # O(n)

print(top_company)

# Вариант 2. O(n)
for key, val in company_dict.items():                                     # O(n)
    if val > top_company['top_1'][1]:                                     # O(1)
        top_company['top_1'] = (key, val)                                 # O(1)
    else:
        top_company['top_3'] = top_company['top_2']                       # O(1)
        top_company['top_2'] = (key, val)                                 # O(1)

print(top_company)

"""
С точки зрения сложности алгоритма, более выгодным выглядит вариант 2, 
так как с увеличением данных сложность будет возрастать линейно.
Но вариант 1 более лаконичным с точи зрения оформления. Так же можно было оформить в виде генератора словаря,
но тогда не очень понятно как оценивать сложность.
"""