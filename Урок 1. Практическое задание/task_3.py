"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

companies = {'Microsoft': 79900,
             'Tesla': 1000,
             'United_Airlines': -2000,
             'AT&T': 23500,
             'Apple': 88000,
             'Netflix': 39000
             }
list_val = list(companies.values())
list_keys = list(companies.keys())
list_items = list(companies.items())

'''
Первое решение:
O(n log n) общая сложность
'''
list_items.sort(key=lambda x: x[1], reverse=True)   # O(n log n)
for el in range(3):                                 # O(1)
    print(list_items[el][0], list_items[el][1])

'''
второе решение
Общая сложность O(n)
'''


def most_earning(dict_in):
    three_of_max = dict()
    for _ in range(3):                                              # O(1)
        max_earning = max(dict_in.items(), key=lambda x: x[1])      # O(n)
        three_of_max[max_earning[0]] = max_earning[1]               # O(1)
        del dict_in[max_earning[0]]                                 # O(1)
    return three_of_max


print(most_earning(companies))

'''
Более эффективнее 2 решение. С возрастанием числа итерируемых объектов кол-во операций возрастает медленнее.
И используем встроенную функцию max() со сложностью O(n).
'''