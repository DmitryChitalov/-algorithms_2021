"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

companies = {
             'IP Nekrasov': 1000000, 'OOO Neva': 51716203,
             'OOO RusGold': 98819390, 'OOO Ceramics': 12345670,
             'Universal Inc': 109283645, 'Apple Inc': 948563728394
             }


def find_three(comp):
    """
    Алгоритм 1.
    Сложность O(N logN)
    """
    return [sorted(comp.items(), key=lambda x: x[1], reverse=True)[i][0] for i in range(3)]


def find_three_long(comp):
    """
    Алгоритм 2.
    Сложность O(N^2)
    """
    comp_three = []                              # O(1)
    comp_three_val = list(comp.values())         # O(n)

    for i in range(3):                           # O(1)
        max_val = max(comp_three_val)            # O(n)
        for k, v in comp.items():                # O(n)
            if v == max_val:                     # O(1)
                comp_three.append(k)             # O(1)
                comp_three_val.remove(max_val)   # O(n)
                break                            # O(1)

    return comp_three                            # O(1)


print(*find_three(companies), sep=', ')
print(*find_three_long(companies), sep=', ')

"""
Эффективнее решение номер 1: 
- меньшая алгоритмическая сложность;
- требует меньше дополнительной памяти;
- компактнее.
"""
