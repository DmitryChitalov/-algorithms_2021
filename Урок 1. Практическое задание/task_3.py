"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

companies_info = {
    'Металлотехника': 200000,
    'Сыргазнефть': 400000,
    'Мясомолоковода': 450000,
    'Крайстальсевер': 900000,
    'Мясоволокно': 670000,
    'БалаковоЭнерго': 999999,
    'Севастопольгаз': 100000
}
# Сложность - линейно - логарифмическая : n log n + 1
top_orgz = sorted(companies_info.items(), key=lambda value: value[1], reverse=True)  # O(n log n)
print(top_orgz[:3])  # O(1)


companies_info = {
    'Металлотехника': 200000,
    'Сыргазнефть': 400000,
    'Мясомолоковода': 450000,
    'Крайстальсевер': 900000,
    'Мясоволокно': 670000
}

#  Квадратичная сложность: n + n ** 2 + 1
sorted_values = sorted(companies_info.values(), reverse=True)  # O(n)
first_three_orgz = []


def get_keys(dictionary):
    for i in sorted_values:  # O(n)
        for k in dictionary.keys():  # O(n)
            if dictionary[k] == i:  # O(1)
                first_three_orgz.append(k)  # O(1)
                break
    return first_three_orgz[:3]  # O(1)


#  [print(i) for i in get_keys(companies_info)]
print(f"Топ 3 организаций: {get_keys(companies_info)}")


#  Первое решение является наиболее эффективнм, так как имеет линейно-логарифмическую сложность. 
