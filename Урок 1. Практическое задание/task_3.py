"""Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

print('решение 1:')

data = {'Coca-Cola': 8.92, 'PepsiCo': 4.85, 'Constellation Brands': 1.90, 'SABMiller': 1.70,
        'Diageo': 2.10, 'Molson Coors Brewing': 2.40, 'Pernod-Ricard': 2.35,
        'Anheuser-Busch InBev': 8.08}  # O(1) - константа

top_3 = sorted(data.values())[-3:][::-1]  # O(NlogN) - линейно-логарифмическая
for value in top_3:  # O(n) - линейная
    for pair in data.items():  # O(n^2) - квадратичная
        if value in pair:  # O(n) - линейная
            print(pair[0], pair[1], 'млрд евро')  # O(1) - константа
# итоговая сложность O(n^2) квадратичная так как это максимальная сложность

print()

print('решение 2:')

profit_list = []  # O(1) - константа

data_list = [['Coca-Cola', 8.92], ['PepsiCo', 4.85], ['Constellation Brands', 1.90], ['SABMiller', 1.70],
             ['Diageo', 2.10], ['Molson Coors Brewing', 2.40], ['Pernod-Ricard', 2.35],
             ['Anheuser-Busch InBev', 8.08]]  # сложность O(1) - константа

for pair in data_list:  # O(n) - линейная
    profit_list.append(pair[1])  # O(1) - константа
profit_list = sorted(profit_list)[-3:][::-1]  # O(NlogN) - линейно-логарифмическая
for profit in profit_list:  # O(n) - линейная
    for pair in data_list:  # O(n^2) - квадратичная
        if profit in pair:  # O(n) - линейная
            print(pair[0], profit, 'млрд евро')  # O(1) - константа

# итоговая сложность O(n^2) квадратичная так как это максимальная сложность

"""
Решение 1 эффективнее второго решения так как для его написание потребовалось меньшее
колличество строк кода, меньшее колличество циклов for и хоть итоговая сложность
одинаковая, но он более простой в написании, так же к элементам словаря удобнее
обращаться чем к элементу списка списков и я думаю что итоговое время выполнения
будет меньше.
"""
