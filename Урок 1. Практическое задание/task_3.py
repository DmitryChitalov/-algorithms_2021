"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

comp_dict = {'Company_1': 4552, 'Company_2': 7788, 'Company_3': 4512,
             'Company_4': 52, 'Company_5': 85854}


# Сложность O(n log n)
def max_val(dict_comp):
    # dict O(n) sorted O(n log n) dict.items O(n) срез O(1) вроде
    return dict(sorted(dict_comp.items(), key=lambda item: item[1], reverse=True)[:3])


# Сложность O(n^2)
def max_val_for(dict_comp):
    result = []  # O(1)
    dict_copy = dict_comp.copy()  # O(n)
    while len(result) < 3:  # O(1) и O(1)
        for k, v in dict_copy.items():  # O(n)
            if v == max(dict_comp.values()):  # O(n)
                result += [(k, v)]  # O(1)
                dict_comp.pop(k)  # O (1)
                break
    return dict(result)  # O(n)


print(max_val(comp_dict))
print(max_val_for(comp_dict))

# Лучше первое решение так как оно более быcтрее и локоничнее чем второе
# да и во втором обьем действий увеличивается в квадрате хотя я не совсем уверен в точности определения сложности

