"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""


# O(n*log n)
import copy
from collections import Counter


def find_max(dct):
    c = Counter(dct)  # O(1) операция присваивания (хотя тут не очень уверен).
    # Counter - это подкласс словаря для подсчета хешируемых объектов вида:
    # {ключ(элемент): количество элементов}
    top_list = list(c.most_common(3))  # O(n*log n) - подозреваю, что тут сортировка
    # most_common возвратит список из n наиболее распространенных элементов и их количество
    # от наиболее к наименее распространенным.
    for i in range(3):  # O(1)
        print(top_list[i][0], ':', top_list[i][1])


# O(n)
def top(company_dict):
    input_max = {}
    list_d = copy.deepcopy(company_dict)
    for i in range(3):  # O(1) количество итераций известно заранее
        maximum = max(list_d.items(), key=lambda kv: kv[1])
        del list_d[maximum[0]]
        input_max[maximum[0]] = maximum[1]  # O(n)
    for i in input_max:  # O(1) количество итераций известно заранее
        print(i, ':', input_max[i])


company_profit = {'Company_1': 300, 'Company_2': 600, 'Company_3': 900, 'Company_4': 600, 'Company_5': 200}


find_max(company_profit)
print('*' * 15)
top(company_profit)

# Лучшая реализация со сложностью O(n), как имеющая меньшую сложность.
