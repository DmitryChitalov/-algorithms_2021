"""
Задание 5.
Задание на закрепление навыков работы со стеком

Реализуйте структуру "стопка тарелок".

Мы можем складывать тарелки в стопку и при превышении некоторого значения
нужно начать складывать тарелки в новую стопку.

Структура должна предусматривать наличие нескольких стеков.
Создание нового стека происходит при достижении предыдущим стеком порогового значения.
Реализуйте по аналогии с примером, рассмотренным на уроке, необходимые методы,
для реализации это структуры, добавьте новые методы (не рассмотренные в примере с урока)
для реализации этой задачи.

После реализации структуры, проверьте ее работу на различных сценариях

Подсказка:
Отдельне стопки можно реализовать через:
1) созд-е экземпляров стека (если стопка - класс)
или
2) lst = [[], [], [], [],....]

Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

class StackClass:

    def __init__(self, num_st):
        self.elems = [[]]
        self.index = -1
        self.num_st = num_st

    def is_empty(self):
        return self.elems == []

    def push_in(self, el):
        """Предполагаем, что верхний элемент стека находится в конце списка"""
        if len(self.elems[0]) >= self.num_st:
            self.elems.insert(0, [])
        self.elems[0].append(el)

    def pop_out(self):
        return self.elems[0].pop()

    def get_val(self):
        return self.elems[len(self.elems) - 1][0]

    def stack_size(self):
        return len(self.elems)

    def __iter__(self):
        for i in self.elems[::-1]:
            yield i

    def __next__(self):
        if self.index < len(self.elems):
            self.index += 1
            return self.elems[self.index]
        raise StopIteration

# Немного измененый пример, показанный на лекции, дополнительно получает на вход число (количетсво мест в одной стопке).
# Соответственно с этим числом регулируется вместимость одной "стопки тарелок".
SC_OBJ = StackClass(4)

# Наполняем стек.
SC_OBJ.push_in('1 тарелка')
SC_OBJ.push_in(10)
SC_OBJ.push_in('code')
SC_OBJ.push_in(False)
SC_OBJ.push_in(5.5)
SC_OBJ.push_in(5.6)
SC_OBJ.push_in(5.8)
SC_OBJ.push_in('her')
SC_OBJ.push_in('Последняя тарелка')

# Вывод всех стопок.
for i in SC_OBJ:
    print(i)

# Вывод всех элементов.
for i in SC_OBJ:
    for z in i:
        print(z)

print(SC_OBJ.get_val())  # первый элемент первой стопки
print(SC_OBJ.pop_out())  # последний элемент крайней стопки

# Если можно, я хотел бы задать дополнительный вопрос, как можно реализовывать индекс в классах?
# В интернете я пока не нашел информации, только что нужно использовать __getitem__, но не конкрентный
# пример. Если это возможно, можете мне в общих чертах бъяснить, как, или дать ссылку, где я смогу узнать об этом.