"""
Задание 5.
Задание на закрепление навыков работы со стеком

Реализуйте структуру "стопка тарелок".

Мы можем складывать тарелки в стопку и при превышении некоторого значения
нужно начать складывать тарелки в новую стопку.

Структура должна предусматривать наличие нескольких стеков.
Создание нового стека происходит при достижении предыдущим стеком порогового значения.
Реализуйте по аналогии с примером, рассмотренным на уроке, необходимые методы,
для реализации это структуры, добавьте новые методы (не рассмотренные в примере с урока)
для реализации этой задачи.

После реализации структуры, проверьте ее работу на различных сценариях

Подсказка:
Отдельне стопки можно реализовать через:
1) созд-е экземпляров стека (если стопка - класс)
или
2) lst = [[], [], [], [],....]

Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


class StackClass:
    """
    Создадим переменную класса и будем складывать в неё стопки тарелок, к методам которых сможем обращаться.
    """
    stacks_op_plates = []

    def __init__(self, lst=None):
        """
        Добавим условие в конструктор, чтобы при наполнении стека, добавлять его экземпляр в список стопок,
        сохраняя значения.
        """
        if lst is None:
            self.elems = []
        else:
            self.elems = lst

    @property
    def is_empty(self):
        return self.elems == []

    def push_in(self, el):
        """Если стопка набрала 5 тарелок, вызываем конструктор и передаем в него список тарелок в стопке.
        После чего очищаем список и кладем наверх 6 тарелку."""
        if self.stack_size >= 5:
            StackClass.stacks_op_plates.append(StackClass(self.elems))
            self.elems = []
            self.elems.append(el)
        else:
            self.elems.append(el)

    @property
    def pop_out(self):
        return self.elems.pop( )

    @property
    def get_val(self):
        return self.elems[len(self.elems) - 1]

    @property
    def stack_size(self):
        return len(self.elems)

    @property
    def check_stack(self):
        tmp_stack = StackClass.stacks_op_plates[:]
        tmp_stack.append(self)
        return tmp_stack


plates = StackClass( )
for i in range(16):
    plates.push_in('Тарелка' + f'{i}')

for i in plates.check_stack:
    print(i.elems)
    print(i.stack_size)
    print(i.get_val)
