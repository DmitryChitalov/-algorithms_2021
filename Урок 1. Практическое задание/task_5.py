"""
Задание 5.
Задание на закрепление навыков работы со стеком

Реализуйте структуру "стопка тарелок".

Мы можем складывать тарелки в стопку и при превышении некоторого значения
нужно начать складывать тарелки в новую стопку.

Структура должна предусматривать наличие нескольких стеков.
Создание нового стека происходит при достижении предыдущим стеком порогового значения.
Реализуйте по аналогии с примером, рассмотренным на уроке, необходимые методы,
для реализации это структуры, добавьте новые методы (не рассмотренные в примере с урока)
для реализации этой задачи.

После реализации структуры, проверьте ее работу на различных сценариях

Подсказка:
Отдельне стопки можно реализовать через:
1) созд-е экземпляров стека (если стопка - класс)
или
2) lst = [[], [], [], [],....]

Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""


class Plate:
    def __init__(self):
        self.elem = [[]]

    def push_in(self, el):
        if len(self.elem[-1]) >= 10:
            self.elem.append([el])
        else:
            self.elem[-1].append(el)

    def pull_out(self):
        return self.elem[len(self.elem) - 1].pop()

    def get_val(self):
        return self.elem[-1][-1]

    def stack_size(self):
        return (len(self.elem) - 1) * 10 + len(self.elem[-1])

    def count_stack(self):
        return len(self.elem)


# Создадим объект класса.
obj_1 = Plate()

# Заплним стек цифрами от 0 до 36.
for i in range(37):
    obj_1.push_in(i)


print(f'Последний элемент в стеке: {obj_1.get_val()}')
print(f'Размер  стека: {obj_1.stack_size()}')
print(f'Выташим послений элемент: {obj_1.pull_out()}')
print(f'Проверим опять последний элемент в стеке: {obj_1.get_val()}')
print(f'И проверим размер стека: {obj_1.stack_size()}')
print(f'Проверим колличество стопок: {obj_1.count_stack()}')
