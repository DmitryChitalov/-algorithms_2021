"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.
"""


# собственно с квадратичной
def minimal_1(need_list):

    min_num = need_list[0]  # O(1)
    for elem_1 in need_list:  # O(N)
        for elem_2 in range(need_list.index(elem_1) + 1, len(need_list) - 1, 1):  # O(N)
            if min_num > need_list[elem_2]:  # O(1)
                min_num = need_list[elem_2]  # O(1)
    return min_num  # O(1)


"""
Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.
"""


# с линейной
def minimal_2(need_list):

    min_num = need_list[0]  # O(1)
    for elem in range(len(need_list)):  # O(N)
        if min_num > need_list[elem]:  # O(1)
            min_num = need_list[elem]  # O(1)
    return min_num  # O(1)


"""
Не забудьте указать сложность каждого из двух алгоритмов. Для лучшего закрепления темы
можете определить и указать сложность еще и у каждого выражения этих двух алгоритмов.

Примечание:
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Постарайтесь не использовать ф-ции min() и sort() и другие ф-ции!
Подход должен быть максимально алгоритмическим.
"""

# пример отработки
nums = [6, 5, 2, 1, 4, 9, 3]
print(minimal_1(nums))
print(minimal_2(nums))
