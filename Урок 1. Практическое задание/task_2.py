"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.
"""


def minimal(lst_obj):
    n = 1  # O(1)
    while n < len(lst_obj):  # O(N)
        for i in range(len(lst_obj) - n):  # O(N)
            if lst_obj[i] > lst_obj[i + 1]:  # O(1)
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]  # O(1)
        n += 1  # O(1)
    return print(lst_obj[0])  # O(1)


"""
Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.
"""


def minimum(lst_obj):
    for i in range(len(lst_obj) - 1):  # O(N)
        if lst_obj[i] > lst_obj[i + 1]:  # O(1)
            lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]  # O(1)
    return print(lst_obj[0])  # O(1)


"""
Не забудьте указать сложность каждого из двух алгоритмов. Для лучшего закрепления темы
можете определить и указать сложность еще и у каждого выражения этих двух алгоритмов.
Примечание:
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
Постарайтесь не использовать ф-ции min() и sort() и другие ф-ции!
Подход должен быть максимально алгоритмическим.
"""
########################################################################################

lst = [3, 10, 4, 0, 7, 1, 8]
minimal(lst)  # O(n^2)
minimum(lst)  # O(n)
