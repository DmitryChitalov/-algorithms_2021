"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.
"""
lst = [3, 8, 7, 2, 11, 26, 1, 5, -2, 6]


def min_search_1(lst):  # O(n^2) - квадратичная
    for i in range(len(lst)):  # O(n) - линейная
        j = i - 1
        key = lst[i]
        while lst[j] > key and j >= 0:  # O(n) - линейная
            lst[j + 1] = lst[j]
            j -= 1
        lst[j + 1] = key
    return lst[0]


print(min_search_1(lst))
"""
Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.
"""


def min_search_2(lst):  # O(n) - линейная
    min_el = lst[0]
    for el in lst:  # O(n) - линейная, перебор элементов
        if el < min_el:  # O(1) - константная, сравнение элементов
            min_el = el
    return min_el


print(min_search_2(lst))


def min_search_3(lst):  # O(n) - линейная
    return min(lst)  # O(n) - линейная, поиск мин. значения в списке. Очень банальный вариант решения 2 задачи.


print(min_search_3(lst))
"""
Не забудьте указать где какая сложность.

Примечание:
Построить список можно через списковое включение.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""
