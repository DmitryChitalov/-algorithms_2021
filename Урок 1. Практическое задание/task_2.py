"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Не забудьте указать где какая сложность.

Примечание:
Построить список можно через списковое включение.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

# Для этого задания не использовала "random", а реализовала списки с числами для сравнения вручную, если понадобаится
# могу в дальнейшем исправить данный недочет. Так же, если я правильно определила сложность алгоритмов, то
# второй алгоритм будет быстрее первого

##########################################################################################

# Сложность: O(n^2) - квадратичная

numbers = [100, 2, 300, -2, 0, -15]
min_num = numbers[0]


def min_number(num):

    for i in numbers:
        if i < min_num:
            num = i
    return num


print(min_number(min_num))


##########################################################################################

# Сложность: O(N) - линейная

second_numbers = [1, 13, -2, 89, 0, -25]


def second_min_numbers(second_num):

    second_num.sort()
    return second_num[0]


print(second_min_numbers(second_numbers))
