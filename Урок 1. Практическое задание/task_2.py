"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Не забудьте указать сложность каждого из двух алгоритмов. Для лучшего закрепления темы
можете определить и указать сложность еще и у каждого выражения этих двух алгоритмов.

Примечание:
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Постарайтесь не использовать ф-ции min() и sort() и другие ф-ции!
Подход должен быть максимально алгоритмическим.
"""
lst_1 = [10, 100, 150, 150, 160, 8, 190]

#Сложность O(n^2).
def minseeker_1(lst):
    i = len(lst) #O(n)
    while i>1: #O(n)
        maxnum = max(lst) #O(n)
        lst.remove(maxnum) #O(n)
        i = i-1 #O(1)
    minnum = lst[0] #O(1)
    return minnum #O(1)

print(minseeker_1(lst_1))


#Сложность O(n).
def minseeker_2(lst):
    minnum = lst[0] #O(1) + O(1) (Присваивания + получения индекса)
    for i in lst: #O(n) (Перебор списка)
        if i < minnum: #O(1) (Сравнение чисел)
            minnum = i  #O(1)
    return minnum #O(1)


print(minseeker_2(lst_1))

# Сложность O(n^2).
def minseeker_3(lst):
    minnum = None  # O(1)
    for i in range(len(lst)):  # O(n)
        for j in range(len(lst)): #O(n)
            if lst[i] > lst[j]:  # O(1)
                minnum = lst[j]  # O(1)
    return minnum  # O(1)

print(minseeker_3(lst_1))