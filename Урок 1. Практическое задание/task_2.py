"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Не забудьте указать сложность каждого из двух алгоритмов. Для лучшего закрепления темы
можете определить и указать сложность еще и у каждого выражения этих двух алгоритмов.

Примечание:
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Постарайтесь не использовать ф-ции min() и sort() и другие ф-ции!
Подход должен быть максимально алгоритмическим.
"""


def min_value_1(lst_obj):
    """Фнкция, должна обеспечивать поиск минимального значения для списка.
    В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.

    Алгоритм 1: Сначала предположим, что минимальным является первый элемент. Сравниваем каждый
    элемент списка со всеми другими элементами, если находится элемент меньше, то он назначается
    как минимальный и продолжаются сравнения

    Сложность: O(n^2).
    """
    min_value = lst_obj[0]      # O(1)
    for i in lst_obj:           # O(n)
        for j in lst_obj:       # O(n)
            if j < i:           # O(1)
                min_value = j   # O(1)
    return min_value            # O(1)


def min_value_2(lst_obj):
    """
    Алгоритм 2: Предполагаем, что минимальным является первый элемент,
    сравниваем его с последующими, если следующий элемент меньше, то он становится минимальным

    Сложность: O(n) - линейная
    """
    min_value = lst_obj[0]      # O(1)
    for i in lst_obj:           # O(n)
        if i < min_value:       # O(1)
            min_value = i       # O(1)
    return min_value            # O(1)


LST = [12, 48, 7, 2]
print(min_value_1(LST))
print(min_value_2(LST))
