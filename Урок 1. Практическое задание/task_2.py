from typing import Any

"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Не забудьте указать сложность каждого из двух алгоритмов. Для лучшего закрепления темы
можете определить и указать сложность еще и у каждого выражения этих двух алгоритмов.

Примечание:
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Постарайтесь не использовать ф-ции min() и sort() и другие ф-ции!
Подход должен быть максимально алгоритмическим.
"""


def find_min_1(lst_obj: list) -> Any:
    """
    Функция должна вернуть наименьшее число в списке
    Алгоритм: сравнение каждого числа со всеми другими элементами списка.
    Сложность алгоритма: O(n^2) - квадратичная.
    """
    minimum = lst_obj[0]
    for i in range(len(lst_obj)):
        for j in range(i + 1, len(lst_obj)):
            if lst_obj[i] < lst_obj[j] and lst_obj[i] < minimum:
                minimum = lst_obj[i]
            elif lst_obj[j] < minimum:
                minimum = lst_obj[j]
    return minimum


# первоначально я не использовала индексы, а просто гуляла по списку.
# но я подумала, что так оптимизрованнее
def find_min_2(lst_obj: list) -> Any:
    """
    Функция должна обеспечивать поиск минимального значения для списка
    Алгоритм:
    Сложность алгоритма: O(n) - линейная.
    """
    i, j = 0, len(lst_obj) - 1
    while i != j:
        if lst_obj[i] >= lst_obj[j]:
            i += 1
        else:
            j -= 1
    return lst_obj[j]

