"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Не забудьте указать сложность каждого из двух алгоритмов. Для лучшего закрепления темы
можете определить и указать сложность еще и у каждого выражения этих двух алгоритмов.

Примечание:
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Постарайтесь не использовать ф-ции min() и sort() и другие ф-ции!
Подход должен быть максимально алгоритмическим.
"""


# O(n^2)
def func_n2(list_x):
    x = None                # O(1)
    for i in list_x:        # O(n)
        for el in list_x:   # O(n)
            if i > el:      # O(1)
                x = el      # O(1)
    return x


# O(n)
def func_n(list_x):
    x = list_x[0]     # O(1)
    for i in list_x:  # O(n)
        if i < x:      # O(1)
            x = i     # O(1)
    return x          # O(1)


if __name__ == "__main__":

    lst = [-54215, 20512, 61815, -60841, -7940, 27942, -60951, -89506, -80798, 8947, -15010, -8932, -1478, 43705,
           10942, -6158, -58180, 83069, -46106, -673, -67005, 81140, 7100, -72619, 21359, -51876, -30230, -58371,
           76786, -91015, -12014, -97759, -77343, -52037, -11444, 69715, 94316, -60567, -23489, 3784, 9529, 19717,
           24854, -63579, 1206, 80175, -9386, 23989, -78122]

    print(func_n(lst))
    print(func_n2(lst))
