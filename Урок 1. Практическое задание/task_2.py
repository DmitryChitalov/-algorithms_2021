"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Не забудьте указать где какая сложность.

Примечание:
Построить список можно через списковое включение.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

test_lst = [2, 4, 5, 7, 1]


def find_min(lst_obj):  # O(n^2)
    count = 0
    for i in range(len(lst_obj)):  # Использую диапазон для получения номера элемента списка.
        new_list = list(lst_obj)  # Создаю копию списка.
        del new_list[i]  # Удаляю из этого списка сравниваемый элемент.
        for j in new_list:
            if lst_obj[i] <= j:  # Проверяю, сколько элементов в этом списке больше или равно сравниваемому элементу
                count += 1
        if count == len(new_list):  # Если количество таких элементов равно длине списка
            # (т.е. все элементы удовлетворяют написанному выше условию)
            return lst_obj[i]  # Найден минимальный элемент.
        count = 0


def line_min(lst):  # O(n)
    n = lst[0]  # присваиваю n значение первого элемента списка.
    for num in lst[1:]:
        if num < n:  # Использую цикл для последовательного срвнения n с каждым элементом списка
            n = num  # Сохраняю в n минимальное значение
    return n  # В итоге, в n окажется минимальный из элементов списка, его и возвращаю.


print(find_min(test_lst))
print(line_min(test_lst))
