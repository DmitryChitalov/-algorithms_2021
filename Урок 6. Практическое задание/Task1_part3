"""
Задание 1.
Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива
Сделайте замеры времени выполнения кода с помощью модуля timeit
Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры
Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание считается не принятым
"""
from memory_profiler import profile

@profile()
def func_1(simple_list):
    new_arr = []                       # O(1)
    for i in range(len(simple_list)):  # O(n)
        if simple_list[i] % 2 == 0:    # O(1)
            new_arr.append(i)          # O(1)
    new_arr

@profile()
def func_2(simple_list):
    [i for i, el in enumerate(simple_list) if el % 2 == 0]


simple_list = [el for el in range(100000)]
func_1(simple_list)
func_2(simple_list)

"""
Filename: C:\Users\User\Downloads\Урок 3. Коды примеров\Урок 3. Коды примеров\113_3.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    13     23.9 MiB     23.9 MiB           1   @profile()
    14                                         def func_1(simple_list):
    15     23.9 MiB      0.0 MiB           1       new_arr = []                       # O(1)
    16     25.4 MiB      0.0 MiB      100001       for i in range(len(simple_list)):  # O(n)
    17     25.4 MiB      1.5 MiB      100000           if simple_list[i] % 2 == 0:    # O(1)
    18     25.4 MiB      0.0 MiB       50000               new_arr.append(i)          # O(1)
    19     25.4 MiB      0.0 MiB           1       new_arr


Filename: C:\Users\User\Downloads\Урок 3. Коды примеров\Урок 3. Коды примеров\113_3.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    21     24.2 MiB     24.2 MiB           1   @profile()
    22                                         def func_2(simple_list):
    23     25.4 MiB      0.0 MiB      100003       [i for i, el in enumerate(simple_list) if el % 2 == 0]

===============================
выполнение в отдельных файлах
===============================

Filename: C:\Users\User\Downloads\Урок 3. Коды примеров\Урок 3. Коды примеров\113_5.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
     3     22.7 MiB     22.7 MiB           1   @profile()
     4                                         def func_1(simple_list):
     5     22.7 MiB      0.0 MiB           1       new_arr = []                       # O(1)
     6     25.3 MiB      0.0 MiB      100001       for i in range(len(simple_list)):  # O(n)
     7     25.3 MiB      1.5 MiB      100000           if simple_list[i] % 2 == 0:    # O(1)
     8     25.3 MiB      1.1 MiB       50000               new_arr.append(i)          # O(1)
     9     25.3 MiB      0.0 MiB           1       new_arr


Filename: C:\Users\User\Downloads\Урок 3. Коды примеров\Урок 3. Коды примеров\113_4.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
     3     23.8 MiB     23.8 MiB           1   @profile()
     4                                         def func_2(simple_list):
     5     25.3 MiB      0.3 MiB      100003       [i for i, el in enumerate(simple_list) if el % 2 == 0]


решение через генератор показало лучшую картину в приросте инкремента
"""
