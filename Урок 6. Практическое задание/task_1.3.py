from memory_profiler import profile
from random import randint

'''
    Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, 
соответствующих требованию. Для выполнения задания обязательно используйте генератор.
'''


# Решение задачи через добавление нового списка
@profile
def func_1(lst):
    new_lst = []
    for el in lst:
        if el not in new_lst:
            new_lst.append(el)
    return new_lst


# Решение задачи через текущий список
@profile
def func_2(lst):
    for el in lst:
        if el not in lst:
            lst.remove(el)
    return lst


my_list = [randint(0, 100000) for el in range(100000)]
print('Первая реализация ЗАДАЧИ №3')
print('Подождите выполняются вычисления ...')
func_1(my_list)
print('Вторая реализация ЗАДАЧИ №3')
print('Подождите выполняются вычисления ...')
func_2(my_list)

'''
    Замеры показывают, что с ростом количества данных памяти для первой реализации требуется больше чем для второй. Это
связано с тем, что в первом случае для решения задачи мы используем два массива (текущий массив и новый массив 
куда помещаем решение задачи), а во втором работаем только с текущим массивом (удаляем из него ненужные данные, тем
самым преобразуем его к решению задачи)  
'''
