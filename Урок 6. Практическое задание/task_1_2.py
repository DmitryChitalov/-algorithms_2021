"""
Задание 1.

Выполните профилирование памяти в скриптах.
Проанализируйте результат и определите программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 3-5 ваших РАЗНЫХ скриптов!
(хотя бы 3 разных для получения оценки отл).
На каждый скрипт вы должны сделать как минимум по две реализации.

Можно взять только домашние задания с курса Основ
или с текущего курса Алгоритмов

Результаты профилирования добавьте в виде комментариев к коду.
Обязательно сделайте аналитику (что с памятью в ваших скриптах, в чем ваша оптимизация и т.д.)

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО

Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""

from memory_profiler import profile
import random

'''
пример 2. подсчет количества четных и нечетных цифр в числе.
ниже две реализации на основе рекурсии и цикла.
реализация на основе рекурсии, как видно из лога, требует 1.0 MiB
из-за того, что хранит в памяти результат всех предыдущих вызовов.
при проходе через цикл этого нет. мы просто за один проход на лету вычисляем результат 
'''
############################################################### Пример 2

def even_odd(number, even=0, odd=0):
    if number < 1:
        return f'Количество четных и нечетных цифр в числе равно: ({even}, {odd})'
    if number % 10 % 2 == 0:
        even += 1
    else:
        odd += 1
    return even_odd(number // 10, even, odd)


@profile
def calc_1(*args):
    '''получаем количество четных и нечетных цифр в числе через рекурсию.
    рекурсия занимает лишнюю память при храненеии предыдущих вызовов'''
    return even_odd(*args)


@profile
def calc_2(digits):
    '''получаем количество четных и нечетных цифр в числе через цикл.
    лишнюю память не занимаем'''
    even = 0
    odd = 0
    for digit in str(digits):
        if int(digit) % 2 == 0:
            even += 1
        else:
            odd += 1
    return f'Количество четных и нечетных цифр в числе равно: ({even}, {odd})'


rand_num = random.randint(10 ** 500, 10 ** 520)
print(calc_1(rand_num))
print(calc_2(rand_num))

'''
Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    41     19.2 MiB     19.2 MiB           1   @profile
    42                                         def calc_1(*args):
    43                                             'получаем количество четных и нечетных цифр в числе через рекурсию.
    44                                             рекурсия занимает лишнюю память при храненеии предыдущих вызовов'
    45     20.2 MiB      1.0 MiB           1       return even_odd(*args)


Количество четных и нечетных цифр в числе равно: (249, 270)
Filename: C:\Users\ПК\PycharmProjects\-algorithms_2021\Урок 6. Практическое задание\task_1_2.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    48     20.2 MiB     20.2 MiB           1   @profile
    49                                         def calc_2(digits):
    50                                             'получаем количество четных и нечетных цифр в числе через цикл.
    51                                             лишнюю память не занимаем'
    52     20.2 MiB      0.0 MiB           1       even = 0
    53     20.2 MiB      0.0 MiB           1       odd = 0
    54     20.2 MiB      0.0 MiB         520       for digit in str(digits):
    55     20.2 MiB      0.0 MiB         519           if int(digit) % 2 == 0:
    56     20.2 MiB      0.0 MiB         249               even += 1
    57                                                 else:
    58     20.2 MiB      0.0 MiB         270               odd += 1
    59     20.2 MiB      0.0 MiB           1       return f'Количество четных и нечетных цифр в числе равно: ({even}, {odd})'

'''