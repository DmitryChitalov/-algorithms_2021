"""
Задание 1.

Выполните профилирование памяти в скриптах.
Проанализируйте результат и определите программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 3-5 ваших РАЗНЫХ скриптов!
(хотя бы 3 разных для получения оценки отл).
На каждый скрипт вы должны сделать как минимум по две реализации.

Можно взять только домашние задания с курса Основ
или с текущего курса Алгоритмов

Результаты профилирования добавьте в виде комментариев к коду.
Обязательно сделайте аналитику (что с памятью в ваших скриптах, в чем ваша оптимизация и т.д.)

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО

Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""

from memory_profiler import profile
import random

'''
пример по вычислению нечетных чисел.
ниже реализованы два способа решения.
первый на основе генератора, второй на основе LC.
генератор последовательно перебирает аргументы odd_nums и выдает вычисленное значение,
при этом старое в оперативной памяти не хранится. то есть в один момент времени в 
оперативной памяти находится только одно значение.
LC напротив, вычисляет все значения и все их размещает в оперативной памяти.
это подтверждается выделением 11.6 MiB 
'''

############################################################### Пример 1
def odd_nums(max_num):
    for num in range(1, max_num + 1, 2):
        yield num


@profile
def func_1_1(num):
    '''создаем нечетные числа с помощью генератора.
    память не расходуем, так как генератор вычисляет значение по требованию.'''
    odd_to_num = odd_nums(num)
    try:
        while True:
            next(odd_to_num)
    except StopIteration:
        None


@profile
def func_1_2(max_num):
    '''создаем нечетные числа с помошью LC.
    при этом все элементы размещаются в память'''
    return [num for num in range(1, max_num + 1, 2)]


rand_num = random.randint(10 ** 5, 10 ** 6)
func_1_1(rand_num)
func_1_2(rand_num)

'''
Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    35     19.1 MiB     19.1 MiB           1   @profile
    36                                         def func_1_1(num):
    37                                             'создаем нечетные числа с помощью генератора.
    38                                             память не расходуем, так как генератор вычисляет значение по требованию.'
    39     19.1 MiB      0.0 MiB           1       odd_to_num = odd_nums(num)
    40     19.1 MiB      0.0 MiB           1       try:
    41                                                 while True:
    42     19.1 MiB      0.0 MiB      281756               next(odd_to_num)
    43     19.1 MiB      0.0 MiB           1       except StopIteration:
    44     19.1 MiB      0.0 MiB           1           None


Filename: C:\Users\ПК\PycharmProjects\-algorithms_2021\Урок 6. Практическое задание\task_1_1.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    47     19.1 MiB     19.1 MiB           1   @profile
    48                                         def func_1_2(max_num):
    49                                             'создаем нечетные числа с помошью LC.
    50                                             при этом все элементы размещаются в память'
    51     30.7 MiB     11.6 MiB      281758       return [num for num in range(1, max_num + 1, 2)]


'''