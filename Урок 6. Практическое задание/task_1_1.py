from task_1 import memory_time_profiler


@memory_time_profiler
def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


@memory_time_profiler
def func_2(nums):
    return [x for x in nums if x % 2 == 0]


func_1(range(100000))
print("-----------------------------------------------------------------------------")
func_2(range(100000))

"""
Пример из задачи №1 урок №4. В нем пердставлены две функции для получения четного элемента массива.
Первая функция использует цикл вторая list comprehension. Как видно из замеров list comprehension выигрывает не только
по времени выполнения, но и по количеству используемой памяти. Но что интересно, если увеличивать количество ээлементов 
в массиве, то разница в количестве используемой памяти будет уменьшаться, а разница во времени выполнения наоборот увеличиваться. 
Использовано памяти: 1.9140625 , выполнено за: 0.018818200000000007
-----------------------------------------------------------------------------
Использовано памяти: 1.5 , выполнено за: 0.00571569999999999
"""
