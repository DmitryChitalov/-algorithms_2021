"""
Задание 3 *.
Сделать профилировку для скриптов с рекурсией и сделать описание,
можно ли так профилировать и есть ли 'подводные камни' в профилировании?
Придумать как это решить!
Есть очень простое решение
"""
from memory_profiler import profile


# Задача по подсчету четных и нечетных цифр в числе из второго урока

def odd_even_count(d: int, o=0, e=0):
    mod = d % 10
    if mod % 2 == 0:
        o += 1
    else:
        e += 1
    d_temp = d // 10
    if d_temp == 0:
        return f'Количество четных и нечетных цифр в числе равно: ({o}, {e})'
    return odd_even_count(d=d_temp, o=o, e=e)


@profile
def main():
    return odd_even_count(
        123402564570996856865756875675808546734745750687560567567823490542684369547048457032798357347504675486575748783)


print(main())

# Итоги:
# Это мой вариант решения проблемы, которая прозвучала на уроке (@profile выводит в коносль множество таблиц
# на каждый вызов функции в рекурсии). Собственно достаточно рекурсивную функции обернуть в другую функцию,
# вызывающую ее, и накинуть на нее наш декоратор профилировщика, тогда все отработает корректно и мы получим 1 общую
# таблицу
# Собственно по результатам замеров, на расчеты ушло 0,1Mib памяти:
# Line #    Mem usage    Increment  Occurences   Line Contents
# ============================================================
#     25     19.6 MiB     19.6 MiB           1   @profile
#     26                                         def main():
#     27     19.7 MiB      0.1 MiB           2       return odd_even_count(
#     28     19.6 MiB      0.0 MiB           1           123402564570996856865756875675808546734745750687560567567823490542684369547048457032798357347504675486575748783)
#
#
# Количество четных и нечетных цифр в числе равно: (57, 54)

