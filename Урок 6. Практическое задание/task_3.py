"""
Задание 3 *.
Сделать профилировку для скриптов с рекурсией и сделать описание,
можно ли так профилировать и есть ли 'подводные камни' в профилировании?
Придумать как это решить!
Есть очень простое решение
"""
from memory_profiler import profile

MAX_DEEP = 1000


@profile
def factorial(n=MAX_DEEP):
    def fact(n=MAX_DEEP):
        if n:
            return n * fact(n - 1)
        else:
            return 1

    result = fact(n)
    return result


@profile
def measure(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return result

    return wrapper


@measure
def fact1(n=MAX_DEEP):
    if n:
        return n * fact1(n - 1)
    else:
        return 1


if __name__ == '__main__':
    print(factorial())
    print(fact1())

'''
Выводы:
1. рекурсивная функция замеряется декорированием собственного вызова. factorial()
2. второй способ измерения результатов не дал fact1(). почему не совсем понятно, 
но по смыслу вызовы должны быть эквивалентны. скорее всего, это объясняется тем, 
что работа декоратора начинается до запуска приложения в точке входа, именно поэтому
результат профилировщика функции measure на выводе первый, несмотря на то, что по коду 
он стоит ниже.
3. на глубину вложения в 1000 рекурсий результат по памяти 1 МиБ не очень.
+ лаконичность побеждает все минусы (почти)
- сложность рекурсионная
- затраты по памяти существенные
4. число (факториал 1000) какое-то нереальное. вряд ли такое где-то в реальной работе пригодится.



Filename: /home/master/PycharmProjects/Q1_algo/algo_2021/Урок 6. Практическое задание/task_3.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    12     38.6 MiB     38.6 MiB           1   @profile
    13                                         def measure(func):
    14     38.6 MiB      0.0 MiB           1       def wrapper(*args, **kwargs):
    15                                                 result = func(*args, **kwargs)
    16                                                 return result
    17     38.6 MiB      0.0 MiB           1       return wrapper


Filename: /home/master/PycharmProjects/Q1_algo/algo_2021/Урок 6. Практическое задание/task_3.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    26     38.6 MiB     38.6 MiB           1   @profile
    27                                         def factorial(n=MAX_DEEP):
    28     39.9 MiB      1.3 MiB        1002       def fact(n=MAX_DEEP):
    29     39.9 MiB      0.0 MiB        1001           if n:
    30     39.9 MiB      0.0 MiB        1000               return n * fact(n - 1)
    31                                                 else:
    32     39.9 MiB      0.0 MiB           1               return 1
    33     39.9 MiB      0.0 MiB           1       result = fact(n)
    34     39.9 MiB      0.0 MiB           1       return result


4023872600770937735437024339230039857193748642107146325437999104299385123986290205920442084869694048004\
7998861019719605863166687299480855890132382966994459099742450408707375991882362772718873251977950595099\
5276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835\
9557354325131853239584630755574091142624174743493475534286465766116677973966688202912073791438537195882\
4980812686783837455973174613608537953452422158659320192809087829730843139284440328123155861103697680135\
7304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784\
6358681701643650241536913982812648102130927612448963599287051149649754199093422215668325720808213331861\
1681155361583654698404670897560290095053761647584772842188967964624494516076535340819890138544248798495\
9953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968\
1759215109077880193931781141945452572238655414610628921879602238389714760885062768629671466746975629112\
3408243920816015378088989396451826324367161676217916890977991190375403127462228998800519544441428201218\
7361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265\
1704833042261439742869330616908979684825901254583271682264580665267699586526822728070757813918581788896\
5220816434834482599326604336766017699961283186078838615027946595513115655203609398818061213855860030143\
5694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273\
4975655139587205596542287497740114133469627154228458623773875382304838656889764619273838149001407673104\
4664025989949022222176590433990188601856652648506179970235619389701786004081188972991831102117122984590\
1641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428\
5319266498753372189406942814341185201580141233448280150513996942901534830776445690990731524332782882698\
6460278986432113908350621709500259738986355427719674282224875758676575234422020757363056949882508796892\
8162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156\
8059418727489980942547421735824010636774045957417851608292301353580818400969963725242305608559037006242\
7124341690900415369010593398383577793941097002775347200000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
'''
