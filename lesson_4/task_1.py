"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""
from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    new_arr_2 = [num for num in range(len(nums)) if nums[num] % 2 == 0]
    return new_arr_2


nums_arr = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 22, 2, 2, 3, 4, 5, 6, 7, 8, 9]

nums_arr_2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

# Замер с большим колличеством добавлений в итоговый массив
print(timeit('func_1(nums_arr)', globals=globals()))  # 6.5111641
print(timeit('func_2(nums_arr)', globals=globals()))  # 4.559387300000001
print()
# Замер с малым колличеством добавлений в итоговый массив
print(timeit('func_1(nums_arr_2)', globals=globals()))  # 3.4807582999999997
print(timeit('func_2(nums_arr_2)', globals=globals()))  # 3.7475576999999998

# Для оптимизации кода я использовал list comprehension. Его использование делает код более компактным
# Также при большом колличестве добавлений элементов в list comprehension возрастает скорость работы программы
