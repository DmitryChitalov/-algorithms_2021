"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.

Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

def recur_method(numb, even=0, odd=0):
    """Рекурсия"""
    # все цифры числа извлечены
    if numb == 0:
        return even, odd
    else:
        # достаем очередную цифру числа
        numb = numb // 10 # // Выполняемцелочисленное деление на 10, чтобы перевести цифру в одну позицию
        # число естественно становится короче одну позицию
        cur_n = numb % 10  # % получаем остаток после деления на 10, т. е. некое число, после запятой
# Если бы вводили не ЦЕЛОЕ, а ВЕЩЕСТВЕННОЕ число, то пришлось бы округлять до 1 знака после запятой (cur_n = round(numb % 10, 1))
        # проверяем является ли это некое число четным или нечетным
        if cur_n % 2 == 0:
            even += 1# Подсчет, четных
        else:
            odd += 1# Подсчет, не четных
        return recur_method(numb, even, odd)
# Помнить что перебор цифр из числа ведем с правой стороны числа. Хотя здесь это и не важно

try:
    NUMB = int(input("Введите натуральное число: "))
    print(f"Количество четных и нечетных цифр в числе: {recur_method(NUMB)}")
except ValueError:
    print("Вы вместо числа ввели строку. Исправьтесь")
