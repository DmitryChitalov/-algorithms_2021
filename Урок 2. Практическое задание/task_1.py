"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def get_calc():
    print(f'Введите операцию (+, -, *, / или 0 для выхода):')
    sign = input()
    if sign not in ('0', '+', '-', '*', '/'):
        print('неверный знак')
        return get_calc()
    if sign == '0':
        return print('выход')

    try:
        a = int(input('Введите первое число: '))
        b = int(input('Введите второе число: '))
    except ValueError:
        print('Вы вместо трехзначного числа ввели строку (((. Исправьтесь')
        return get_calc()

    if sign == '+':
        print(f'Ваш результат: {a + b}')
    elif sign == '-':
        print(f'Ваш результат: {a - b}')
    elif sign == '*':
        print(f'Ваш результат: {a * b}')
    elif sign == '/':
        if b == 0:
            print('Делить на ноль нельзя')
            return get_calc()
        else:
            print(f'Ваш результат: = {a / b}')
    return get_calc()


if __name__ == '__main__':
    get_calc()
