"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def calculation(s, one, two):
    if s == '+':
        return one + two
    elif s == '-':
        return one - two
    elif s == '*':
        return one * two
    else:
        return one / two


def my_calc(f_num=None, l_num=None):
    my_op = input('Введите операцию (+, -, *, / или 0 для выхода):')
    if f_num is None:
        f_num = int(input('Введите первое число: '))
    if l_num is None:
        l_num = int(input('Введите второе число: '))
    if my_op == '0':
        print('Выход из программы')
        return 0
    if not l_num and my_op == '/':
        print('Делитель не может быть равен 0')
        my_calc(f_num, l_num)
        return
    if my_op not in ['0', '+', '-', '*', '/']:
        print('Недопустимый знак оператора')
        my_calc()
        return

    print(calculation(my_op, f_num, l_num))
    my_calc()


if __name__ == '__main__':
    my_calc()
