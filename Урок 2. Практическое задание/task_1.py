"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""
def eval_rec():
    op_lst = ['0', '+', '-', '*', '/']
    op = input('Введите операцию (+, -, *, / или 0 для выхода):')
    if op == '0':
        print('Работа закончена.')
        exit(0)
    if op not in op_lst:
        print("Вы ошиблись при вводе операции. Попробуйте еще")
        eval_rec()
    arg1 = (input('Введите первое число:'))
    arg2 = (input('Введите второе число:'))
    try:
        print( f"Ваш результат {eval(arg1 + op + arg2)}")
        eval_rec()
    except NameError:
        print('Одно или оба числа введены неверно. Попытайтесь снова.')
        eval_rec()
    except ZeroDivisionError:
        print("Вы ошиблись, делить на ноль нельзя. Начните сначала")
        eval_rec()
    else:
        eval_rec()

eval_rec()
