"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""



def rec_calc():
    operation = str(input('Введите операцию (+, -, *, / или 0 для выхода): '))
    if operation == '0':
        return 'Конец'
    try:
        if operation not in ['+', '-', '*', '/']:
            raise ValueError
    except ValueError as a:
        print(f'Вы ввели некорректную операцию. Повторите попытку.')
        rec_calc()
        return 1
    try:
        first_num = int(input('Введите первое число: '))
        second_num = int(input('Введите второе число: '))
    except ValueError as e:
        print(f'Вы ввели некорректные данные, повторите попытку. {e.args}')
        rec_calc()
        return 1
    try:
        result = eval(str(first_num) + operation + str(second_num))
    except ZeroDivisionError as f:
        print('Деление на 0.')
        rec_calc()
        return 1
    print(f'Ваш результат {result}')
    return rec_calc()

rec_calc()