"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""



def calc_func():
    operators = ['+', '/', '-', '*']
    operation = input('Enter operation (+, -, *, / or 0 for exit): ')
    if operation == '0': return
    elif operation not in operators:
        print('it is not number')
        return calc_func()
    operand_1 = input('Enter first operand: ')
    operand_2 = input('enter second operation: ')
    if not operand_1.isdigit() or not operand_2.isdigit():
        print('Неверный ввод, попробуйте ещё раз')
        return calc_func()
    operand_1 = float(operand_1)
    operand_2 = float(operand_2)
    if operation == '+': print(operand_1 + operand_2)
    elif operation == '-': print(operand_1 - operand_2)
    elif operation == '/': print(operand_1 / operand_2)
    elif operation == '*': print(operand_1 * operand_2)
    return calc_func()


calc_func()
