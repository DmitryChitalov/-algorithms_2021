"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

VALID_SIGNS = '+-*/0'
ADD, SUB, MUL, DIV, ZERO = VALID_SIGNS
COMMAND_LEN = 1


def get_input():
    ch, one, two = '', '', 0
    print("NOTE: при операции деления второе число не должно быть == 0")
    while not (ch in VALID_SIGNS and len(ch) == COMMAND_LEN):
        ch = input('Введите операцию (+, -, *, / или 0 для выхода): ')
    if ch == ZERO:
        return ch, 0, 0
    while not (one.isnumeric() and two.isnumeric() and
               (not (ch == DIV and int(two) == 0))):
        one = input("Введите первое число: ")
        two = input("Введите второе число: ")
    return ch, int(one), int(two)


def command_recursion():
    cmd, one, two = get_input()
    if cmd == ZERO:
        print('Bye!')
        return
    print('Ваш результат:',
          one + two if cmd == ADD else
          one - two if cmd == SUB else
          one * two if cmd == MUL else one / two)
    command_recursion()


if __name__ == '__main__':
    command_recursion()
    exit(0)
