"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.

Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.

Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ

Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def calculate():
    messages = ['Вас приветстсвует калькулятор.\n',
                'Введите операцию (+, -, *, / или ! для выхода):\n',
                'Введите первое число:\n',
                'Введите второе число:\n',
                'Ваш результат:\n',
                'Деление на ноль недопустимо! Программа прекратила работу.',
                'Вы вместо числа ввели что-то другое. Исправьтесь\n',
                'Введите корректный оператор',
                'Вы завершили работу калькулятора. Здоровья!']
    _operators = ('+', '-', '*', '/')
    print(messages[0])

    def realisation():
        operation = input(messages[1])
        if operation == '!':
            print(messages[-1])
        elif operation not in _operators:
            print(messages[7])
            realisation()
        else:
            val_1 = check_number(input(messages[2]))
            val_2 = check_number(input(messages[3]))
            if val_1 is None or val_2 is None:
                print(messages[6])
                realisation()
            else:
                try:
                    # result = (''.join([str(val_1), operation, str(val_2)]))
                    # print(eval(result))                                           # Очень небезопасно!!!
                    result_dict = {'+': val_1 + val_2, '-': val_1 - val_2,          # Это значительно лучше
                                   '*': val_1 * val_2, '/': val_1 / val_2}
                    print(f'{messages[4]} {result_dict.get(operation)}')
                    realisation()
                except ZeroDivisionError:
                    print(messages[5])
    realisation()


# служебная функция для проверки введенных данных
def check_number(string):
    if string.isdigit():
        result = int(string)
    else:
        try:
            result = float(string)
        except ValueError:
            result = None
    return result


calculate()
