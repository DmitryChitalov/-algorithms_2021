"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

def even_odd_recursion(number):
    whole_part = number // 10
    remains = number % 10

    if whole_part == 0:
        even, odd = 0, 0
        if remains % 2 == 0:
            even += 1
        else:
            odd += 1
        return [even, odd]
    if remains % 2 == 0:
        even, odd = even_odd_recursion(whole_part)[0] + 1, even_odd_recursion(whole_part)[1]
    else:
        even, odd = even_odd_recursion(whole_part)[0], even_odd_recursion(whole_part)[1] + 1
    return [even, odd]


def even_odd():
    try:
        user_number = int(input('Введите число: '))
    except:
        print('Вы ввели не числовое значение')
        return
    result = even_odd_recursion(user_number)
    print(f'Число четных цифр: {result[0]}, число нечетных цифр: {result[1]}')


even_odd()