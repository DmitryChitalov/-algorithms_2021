"""
3.	Сформировать из введенного числа обратное по порядку входящих в него
цифр и вывести на экран. Например, если введено число 3486,
 то надо вывести число 6843.

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все цифры извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число, которое требуется перевернуть: 123
Перевернутое число: 321

Не забудьте проверить и на числах, заканчивающихся нулем.
Пример:
Введите число, которое требуется перевернуть: 1230
Перевернутое число: 0321

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

""" 
Домашнее задание к уроку №2. Алгоритмы и структуры данных на Python.
Студент: Сапунов Максим. Jenny6199@yandex.ru 06.06.2021
"""


class ReverseDigit:
    """ Набор функций для обратного представления числа."""

    def __init__(self):
        """ Конструктор класса."""
        print('Программа выводит обратное представление введенного числа.')
        self.reversed = ''

    def separator(self, digit):
        """ С помощью рекурсии разделяет число на составляющие цифры и объединяет их в обратном порядке."""
        if digit == 0:  # Крайний случай
            print(f'Результат: {self.reversed}')
        else:
            symbol = digit % 10
            self.reversed += str(symbol)
            digit = digit // 10
            self.separator(digit)   # Рекурсивный вызов функции.


if __name__ == '__main__':
    v1 = ReverseDigit()
    v1.separator(int(input('Введите произвольное число: ')))
