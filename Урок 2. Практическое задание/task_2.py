"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


# не понял как обработать кейс, когда пользователь вводит 0 - он тоже четный, поэтому сделал костыль
def count_even_odd(num, even, odd):
    if not (num == 0 and num // 10 == 0):
        if num % 2 == 1:
            odd += 1
        elif num % 2 == 0:
            even += 1
    return (even, odd) if num == 0 else count_even_odd(num // 10, even, odd)


num = int(input("Введите число: "))
if num == 0:
    print("Количество четных и нечетных цифр в числе равно: (1, 0)")
else:
    print(f'Количество четных и нечетных цифр в числе равно: {count_even_odd(num, 0, 0)}')
