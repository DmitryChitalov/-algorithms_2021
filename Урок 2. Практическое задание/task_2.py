"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def numbers():
    number = input('Введите натуральное число: ')
    if not number.isdigit() or not int(number):  # После этого остаются только натуральные числа. Последним отсекаем '0'
        print('Вы должны были ввести натуральное число. Попробуйте еще раз.')
        return numbers()
    return even_odd(int(number))


def even_odd(number):
    values = [0, 0]
    if not number // 10:
        if number % 2:
            values[1] += 1
        else:
            values[0] += 1
        return values
    return tuple(x + y for x, y in zip(even_odd(number // 10), even_odd(number % 10)))


print('Количество четных и нечетных цифр в числе равно:', numbers())
