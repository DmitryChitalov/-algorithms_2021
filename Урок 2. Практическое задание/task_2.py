"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def even_odd():
    number = input('Введите натуральное число: ')
    even_lst = []
    odd_lst = []
    count_even = 0
    count_odd = 0
    while number:
        result = int(number) % 10
        number = int(number) // 10
        if result % 2 == 0:
            even_lst.append(result)
            count_even += 1
        else:
            odd_lst.append(result)
            count_odd += 1
    print(f'Количество чётных цифр: {count_even}\nКоличество нечётных цифр: {count_odd}')


even_odd()


def even_odd_recurs():
    number = input('Введите натуральное число: ')
    even_lst = []
    odd_lst = []
    count_even = 0
    count_odd = 0
    if not number:
        return f'Количество чётных цифр: {count_even}\nКоличество нечётных цифр: {count_odd}'
    else:
        result = int(number) % 10
        number = int(number) // 10
        if result % 2 == 0:
            even_lst.append(result)
            count_even += 1
        else:
            odd_lst.append(result)
            count_odd += 1
