"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

def even_odd_count(n, even_digits_count, odd_digits_count):
    if n < 1:
        return even_digits_count, odd_digits_count
    if (n % 10) % 2 == 0:
        even_digits_count += 1
    else:
        odd_digits_count += 1
    return even_odd_count(n // 10, even_digits_count,odd_digits_count)

if __name__ == "__main__":
    print(even_odd_count(int(input('Введите натуральное число: ')), 0, 0))