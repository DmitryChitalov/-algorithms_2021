"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""
def Check_number(user_answer):
    global count_odd, count_even
    if user_answer == 0:
        return f"Чётных чисел - {count_even}, нечётных чисел - {count_odd}"
    else:
        if (user_answer % 10) % 2 == 0:
            count_even += 1
            return Check_number(int(user_answer / 10))
        else:
            count_odd += 1
            return Check_number(int(user_answer / 10))

count_even = 0
count_odd = 0
print(Check_number(int(input("Введите число: "))))