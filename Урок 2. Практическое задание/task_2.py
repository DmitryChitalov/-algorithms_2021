"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def even_n_odd(user_number, evens=0, odds=0):
    digit = user_number % 10
    new_number = user_number // 10

    if digit % 2 == 0:
        evens += 1
    else:
        odds += 1

    if new_number == 0:
        print(f'Количество четных и нечетных цифр в числе равно: ({evens}, {odds})')
        return
    even_n_odd(new_number, evens, odds)


while True:
    user_number = input("Введите число\n>>>")
    if user_number.isdigit():
        user_number = int(user_number)
        break
    else:
        print("Вы ввели не число, пожалуйста введите число")

even_n_odd(user_number)
