"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def even_odd_numbers_input():
    try:
        number = int(input('Введите число - '))
    except ValueError:
        print("Вводить можно только натуральные числа")
        return even_odd_numbers_input()
    else:
        print(f'\nВ числе {number} ')
        return number


def even_odd_numbers(number, even=0, odd=0):
    if number == 0:
        print(f'четных чисел - {even}, нечетных - {odd}')

    else:
        remains = number % 10
        number = number // 10
        if remains % 2 == 0:
            even += 1
        else:
            odd += 1
        return even_odd_numbers(number, even, odd)


even_odd_numbers(even_odd_numbers_input())
