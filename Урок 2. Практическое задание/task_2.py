"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def check_parity(number):
    if len(str(number)) < 2:
        return 0 if number % 2 else 1
    else:
        return check_parity(number // 10) + (0 if number % 2 else 1)


try:
    num_to_check = int(input('Введите натуральное число: '))
    if num_to_check < 0:
        raise ValueError
    parity = check_parity(num_to_check)
    print(
        f'Количество четных и нечетных цифр в числе {num_to_check} равно: '
        f'({parity}, {len(str(num_to_check)) - parity})')

except ValueError:
    print('Некорректный ввод.')
