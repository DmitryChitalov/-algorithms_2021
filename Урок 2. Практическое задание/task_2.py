"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


# Вариант 1 без ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
def sort_even_num_1(num, even=0, uneven=0):
    if num == 0:
        return f'Количество четных и нечетных цифр в числе равно: ({even}, {uneven})'
    elif num % 2 == 1:
        return sort_even_num_1(num // 10, even, uneven + 1)
    else:
        return sort_even_num_1(num // 10, even + 1, uneven)


int_num_1 = int(input(f'Введите натуральное число: '))
print(sort_even_num_1(int_num_1))


# Вариант 2 взял по индексу из кортежа
def sort_even_num_2(num):
    even = 0  # четное число
    uneven = 0  # нечетное число
    if num % 2:
        even += 1
    else:
        uneven += 1
    num //= 10
    if num == 0:
        return even, uneven
    else:
        return even + sort_even_num_2(num)[0], uneven + sort_even_num_2(num)[1]


int_num_2 = int(input(f'Введите натуральное число: '))
print(f'Количество четных и нечетных цифр в числе равно: {sort_even_num_2(int_num_2)}')
