"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def even_odd(numbers, even, odd):
    this_number = numbers % 10

    if this_number == 0 or this_number % 2 == 0:
        even += 1
    else:
        odd += 1

    if len(str(numbers)) > 1:
        next_numbers = numbers // 10
        return even_odd(next_numbers, even, odd)

    return even, odd


while True:
    try:
        value = int(input('Введите число:\n'))
        break
    except ValueError:
        print('Вы ввели строку, а не число')

print(f'Количество четных и нечетных цифр в числе равно: {even_odd(value, 0, 0)}')

