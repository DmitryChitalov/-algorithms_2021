"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

<<<<<<< HEAD
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_odd_numbers_cycle(number):
    odd = 0
    even = 0
    while number != 0:
        if number % 2 == 0:
            even += 1
        else:
            odd += 1
        number = number // 10
    print(f'{even} четные, {odd} нечетные')


def even_odd_numbers_rec(number, even=0, odd=0):
    if number == 0:
        print(f'{even} четные, {odd} нечетные')
    else:
        if number % 2 == 0:
            even_odd_numbers_rec(number // 10, even + 1, odd)
        else:
            even_odd_numbers_rec(number // 10, even, odd + 1)


if __name__ == '__main__':
    even_odd_numbers_cycle(1234)
    even_odd_numbers_rec(1234)
=======
Не забудьте указать где какая сложность.

Примечание:
Построить список можно через списковое включение.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""
>>>>>>> 7b05359d119ad7d2edbbbbace24e97f96351fcd5
