"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""
# print(f'Количество цифр в числе {number}: четных - {count_even}, нечетных - {count_odd}')

def count_even_odd(u_number, count_even=0, count_odd=0, counter=0):
    """
    Функция определяет количество четных и нечетных цифр во введенном чилсе, в том чилсе и в нуле.
    """
    try:
        u_number = int(u_number)
    except ValueError:
        print('Ошибка ввода. Введите число!')
    if u_number == 0 :
        if counter == 0:
            count_even += 1
            return f'Количество цифр в числе: четных - {count_even}, нечетных - {count_odd}'
        else:
            return f'Количество цифр в числе: четных - {count_even}, нечетных - {count_odd}'
    elif u_number % 2 == 0:
        counter += 1
        count_even += 1
    elif u_number % 2 == 1:
        counter += 1
        count_odd += 1
    return count_even_odd(u_number // 10, count_even, count_odd, counter)


print(count_even_odd(input('Введите натуральное число: ')))
