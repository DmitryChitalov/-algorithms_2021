"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def get_even_odd_from_number(input_number, even=0, odd=0):
    """
    Рекурсивный подсчёт четных и нечетных чисел в числе.
    :param input_number: Введенное число
    :param even: Счётчик чётных номеров
    :param odd: Счётчик нечётных номеров
    :return: tuple
    """
    if input_number == 0:
        return even, odd
    else:
        if input_number % 2 == 0:
            even += 1
        else:
            odd += 1
        input_number = input_number // 10

        return get_even_odd_from_number(input_number, even, odd)


number = int(input("Введите число: \n"))
print("Вы ввели: ", number)
x = get_even_odd_from_number(number)
print(f"Количество четных и нечетных цифр в числе равно: {x}\n")
