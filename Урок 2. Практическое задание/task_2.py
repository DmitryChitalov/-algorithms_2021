"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик.
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def even_odd_digits_calc(num):
    """Возвращает кортеж с кол-вом четных и нечетных цифр в числе =>
    (cnt_even, cnt_odd)"""

    # выделяем последнюю цифру и оставшееся число
    remain, last_digit = divmod(num, 10)
    cnt_even, cnt_odd = 0, 0  # заводим счетчики четных и нечетных цифр

    # базовый случай - получили последний разряд числа
    if remain == 0:
        # проверяем на четность, меняем счетчики и возвращаем результат
        if last_digit % 2 == 0:
            return (cnt_even + 1), cnt_odd
        return cnt_even, (cnt_odd + 1)

    # шаг рекурсии
    # пока в числе есть цифры - проверяем последнюю на четность, меняем счетч.
    if last_digit % 2 == 0:
        cnt_even += 1
    else:
        cnt_odd += 1
    # вызываем себя же для числа без последней цифры
    rem_cnt_even, rem_cnt_odd = even_odd_digits_calc(remain)
    # аккумулируем возвращенные данные в счетчиках и возвращаем итог
    cnt_even += rem_cnt_even
    cnt_odd += rem_cnt_odd
    return cnt_even, cnt_odd


if __name__ == '__main__':
    # ввод и валидация данных от пользователя
    try:
        number = int(input('Введите натуральное число {1, 2, 3...}: '))
    except ValueError:
        print("Введено не число!")
        exit(1)
    else:
        if number < 1:
            print("Введено не натуральное число! Натуральные: {1, 2, 3...}")
            exit(1)

    even_digits, odd_digits = even_odd_digits_calc(number)
    print(f'В натуральном числе {number}: '
          f'\n\t{even_digits} четных цифр'
          f'\n\t{odd_digits} нечетных цифр')
