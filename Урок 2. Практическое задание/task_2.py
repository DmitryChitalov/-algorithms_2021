"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


class OwnError (Exception):
    def __init__(self, txt):
        self.txt = txt


def req_count_even_odd(user_number, even_count=0, odd_count=0):
    if (user_number % 10) % 2:
        odd_count += 1
    else:
        even_count += 1
    if user_number < 10:
        print(f'Количество четных цифр в числе {even_count}, а нечетных {odd_count}')
    else:
        req_count_even_odd(user_number // 10, even_count, odd_count)


while True:
    try:
        user_number = int(input(f"Введите число:"))
        if user_number <= 0:
            raise OwnError("Введено не натуральное число!\n")
        req_count_even_odd(user_number)
        break
    except ValueError:
        print('Введено не число!\n')
    except OwnError as err:
        print(err)
