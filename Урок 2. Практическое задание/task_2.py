"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

# Так себе решение, можно вывести дубль кода в отдельную функцию, да и встроенные использовать. Тогда решение будет в
# 1-2 строки.


def count_evens(num, ev=0, n_ev=0):
    if len(str(abs(num))) == 1:
        if not num % 2:
            n_ev += 1
        else:
            ev += 1
        print(f'Количество четных и нечетных цифр в числе равно: ({ev}, {n_ev})')
        return
    else:
        if not num % 10 % 2:
            n_ev += 1
        else:
            ev += 1
        count_evens(num // 10, ev, n_ev)


if __name__ == '__main__':
    count_evens(34560)
    count_evens(123)
    count_evens(-500)
