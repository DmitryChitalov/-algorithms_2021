"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""
even, odd = 0, 0


def subtract(num):
    global odd, even
    if 0 < num <= 1:   # базовый случай для вычитания
        odd += 1
        return
    elif num == 0:   # базовый случай для вычитания
        even += 1
        return
    else:
        subtract(num-2)


def func():     # ф-ция проверки введенного числа
    n = input("Введите число: ")
    num = 0
    try:
        num = [int(i) for i in n]
    except ValueError:
        print("Вы ввели не число, попробуем еще раз: ")
        func()
    iterate(num)
    return f"Количество четных цифр в числе '{n}' равно {even}, нечетных - {odd}"


def iterate(num):       # рекурсивная ф-ция для перебора по списку
    if not num:   # базовый случай для перебора
        return
    else:
        subtract(num.pop())
        iterate(num)


print(func())
