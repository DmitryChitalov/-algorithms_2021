"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7


Сперва начал делать, отсеткая цифра слева направо. Придумал вот 
такой алгоритм.Не через функцию и без рекурсии
""""""
for i in range(1,len_a+1,1):
    if a < 10 :
        if a % 2 == 0:
            even += 1
        else:
            uneven += 1
    else:
        b = a // (10**(len_a-i))
        a = a - b * (10 ** (len_a - i))
        if b % 2 == 0:
            even += 1
        else:
            uneven += 1


print(f'Четных = {even}')
print(f'Нечетных = {uneven}')


def digits(n):
    i = 0
    while n > 0:
        n = n // 10
        i += 1
    return i



Затем, подумав, что должно быть решение проще, написал другой 
алгоритм с отсечением цифр справа налево


a=1234
while a > 0:
    if a % 2 == 0:
        even += 1
    else:
        uneven += 1
    a = a // 10
print(even,uneven)


Решение с рекурсией
"""""

def calc2(a,result=None):
    if result is None:
        result = [0,0]
    if a <= 0:
        return result
    else:
        if a % 2 == 0:
            result[0] += 1
        else:
            result[1] += 1
    return calc2(a//10,result)

a = int(input('Введите число: '))
print(f'Количество четных и нечетных цифр в числе равно: {tuple(calc2(a))}')