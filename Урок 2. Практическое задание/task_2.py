"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""
def recursion(val,cnt):
    if val // 10 == 0:
        if val  % 2:
            cnt[1] += 1
        else:
            cnt[0] += 1
        return
    if (val % 10) % 2:
        cnt[1] += 1
    else:
        cnt[0] += 1
    recursion(val // 10,cnt)

res_lst = [0,0]
recursion(12121212121212,res_lst)
print(f"Количество четных и нечетных цифр в числе равно: {tuple(res_lst)}")
