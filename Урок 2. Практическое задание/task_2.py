"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def even_odd_numbers_cycle(number):
    odd = 0
    even = 0
    while number != 0:
        if number % 2 == 0:
            even += 1
        else:
            odd += 1
        number = number // 10
    print(f'{even} четные, {odd} нечетные')


def even_odd_numbers_rec(number, even=0, odd=0):
    if number == 0:
        print(f'{even} четные, {odd} нечетные')
    else:
        if number % 2 == 0:
            even_odd_numbers_rec(number // 10, even + 1, odd)
        else:
            even_odd_numbers_rec(number // 10, even, odd + 1)


if __name__ == '__main__':
    even_odd_numbers_cycle(1234)
    even_odd_numbers_rec(1234)
