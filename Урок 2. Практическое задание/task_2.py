"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def num_sum(num):
    if num == 0:
        return 0, 0
    else:
        even, odd = num_sum(num // 10)  # эта запись - реализация возможности
        print(num)
        # одновременно присваивать значения сразу нескольким переменным.
        # Рекурсией разворачиваю числа в ряд от 1 и до 12456 и проверяю каждое число
        # на четность (по правилам, четным является число, последняя цифра которого делится на два без остатка,
        # верно и обратное утверждение, последней цифрой четного числа будет четная
        if num % 2 == 0:  # Проверка числа на четность
            even += 1
        else:
            odd += 1
        return even, odd


def num_query():
    try:
        print(f"Количество четных и нечетных цифр в числе равно: {num_sum(int(input('Введите число: ')))}")
    except ValueError:
        print('Необходимо вводить числа.')
        num_query()


num_query()
