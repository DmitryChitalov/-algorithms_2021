"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def even_not_even(num, even=0, not_even=0):
    """ Рекурсивная функция, считающая количество четных и нечетных цифр натурального числа """
    # Базовый случай
    if num == 0:
        return even, not_even
    else:
        num_digit = num % 10
        if num_digit % 2 == 0:
            even += 1
        else:
            not_even += 1
        return even_not_even(num // 10, even, not_even)


if __name__ == '__main__':

    try:
        NUM1 = int(input('Введите число: '))
        print(f'Количество четных и нечетных цифр в числе равно:{even_not_even(NUM1)}')
    except ValueError:
        print('Вы ввели не число')




