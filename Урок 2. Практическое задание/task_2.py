"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def calc_type_num(num, n_even=0, n_uneven=0):
    # Базовый случай
    if int(num) == 0:
        return print(f'Количество четных и нечетных цифр в числе равно: {n_even, n_uneven}')
    # Шаг рекурсии
    else:
        if (int(num) % 10) % 2 == 0:  # Проверяем, делится ли последние число на 2 без остатка
            n_even += 1  # Добавляем к счетчику четных цифр +1
            return calc_type_num(int(num) // 10, n_even, n_uneven)  # Возвращаем функцию с новыми значениями
            # без последней цифры
        else:  # Добавляем к счетчку нечетных цифр +1, если последняя цифра на 2 не делится
            n_uneven += 1
            return calc_type_num(int(num) // 10, n_even, n_uneven)


number = input('Введите число: ')

calc_type_num(number)
