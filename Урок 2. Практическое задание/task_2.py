"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""

res_list = [0, 0]


def get_even_odd(number):
    if number == 0:
        return 0
    else:
        _buf_num = number % 10
        number = number // 10
        if _buf_num % 2 == 0:
            res_list[0] += 1
        else:
            res_list[1] += 1
        return get_even_odd(number)


if __name__ == '__main__':
    get_even_odd(4546755)
    print(f'Even numbers: {res_list[0]}\nOdd numbers: {res_list[1]}')
