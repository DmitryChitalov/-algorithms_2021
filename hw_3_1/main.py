"""
Задание 1.
Реализуйте свои пользовательские функции, в которых реализуйте:
a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и
   отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
# 1
from timeit import default_timer as timer

dict_1 = {}
list_1 = []
def decoration(func): # O(1)
    start = timer()
    func()
    print(1000 * (timer() - start), 'Миллисекунд')

@decoration
def create_dict(): # O(1)
    dict_1 = dict(one=1, two=2)
    return dict_1

@decoration
def create_list():  # O(1)
    list_1 = list('список сосисок')
    return list_1

# Создание листа здесь больше по времени, наверное потому что здесь слово делится на отдельные буквы

@decoration
def ins_list(): # O(1)
    list_1.insert(3, 'aaaaaaaaaaaaaaaaaaaa')

@decoration
def ins_dict(): # O(1)
    dict_1['three'] = 4 ** 2

# Почему здесь вставка в лист дольше чем словарь я не понял
@decoration
def delete_list(): # O(1)
    list_1.pop(0)

@decoration
def delete_dict(): # O(1)
    dict_1.popitem()

# Вообще одинаково вышло в первый раз, но чаще лист тоже дольше







