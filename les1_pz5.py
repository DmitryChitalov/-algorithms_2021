"""
Задание 5.
Задание на закрепление навыков работы со стеком
Реализуйте структуру "стопка тарелок".
Мы можем складывать тарелки в стопку и при превышении некоторого значения
нужно начать складывать тарелки в новую стопку.
Структура должна предусматривать наличие нескольких стеков.
Создание нового стека происходит при достижении предыдущим стеком порогового значения.
Реализуйте по аналогии с примером, рассмотренным на уроке, необходимые методы,
для реализации это структуры, добавьте новые методы (не рассмотренные в примере с урока)
для реализации этой задачи.
После реализации структуры, проверьте ее работу на различных сценариях
Подсказка:
Отдельне стопки можно реализовать через:
1) созд-е экземпляров стека (если стопка - класс)
или
2) lst = [[], [], [], [],....]
Примечание: в этом задании вспомните ваши знания по работе с ООП
и опирайтесь на пример урока
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
Задание творческое. Здесь нет жестких требований к выполнению.
"""

class StackPlatesClass:
    stack_max = 3

    def __init__(self):
        self.elems = [[]]

    def is_empty(self):
        return self.elems == [[]]

    def push_in(self, el):
        """
        Предполагаем, что верхний элемент стека находится в конце
        Создание нового стека происходит при достижении предыдущим стеком порогового значения
        """
        # если стопка заполнилась или еще нет ни одной, то создаем новую стопку
        if len(self.elems[-1]) == StackPlatesClass.stack_max:
            self.elems.append([])
            self.elems[-1].append(el)
        else:  # просто добавляем тарелку в последнюю стопку
            self.elems[-1].append(el)


    def pop_out(self):
        """
        При очистке стека от элементов, пустой стек удаляется
        """
        pop_elem = self.elems[-1].pop()
        if len(self.elems[-1]) == 0:
            self.elems.pop()
        return pop_elem

    def st_count(self):
        """
        Возвращает количество стеков в списке
        """
        return len(self.elems)



SC_OBJ = StackPlatesClass()

# наполняем стеки
SC_OBJ.push_in(1)
SC_OBJ.push_in(2)
SC_OBJ.push_in(3)
SC_OBJ.push_in(4)
SC_OBJ.push_in(5)
SC_OBJ.push_in(6)
SC_OBJ.push_in(7)
SC_OBJ.push_in(8)
SC_OBJ.push_in(9)
SC_OBJ.push_in(10)

# узнаем кол-во стеков
print(f'кол-во стеков = {SC_OBJ.st_count()}')  # -> 4

# убираем элемент с вершины стека и возвращаем его значение

print(SC_OBJ.pop_out())  # -> 10
print(SC_OBJ.pop_out())  # -> 9
print(SC_OBJ.pop_out())  # -> 8

# вновь узнаем размер стека
print(f'кол-во стеков = {SC_OBJ.st_count()}')  # -> 3


