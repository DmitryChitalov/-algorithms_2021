"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Не забудьте указать где какая сложность.

Примечание:
Построить список можно через списковое включение.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""
import random as rnd
"""
Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.
"""

def funct_1(lst):
    min_value = 50
    for i in range(len(lst)):
        if lst[i] < min_value:
            min_value = lst[i]
    return min_value

for el in (30, 35, 47, 49):
    lst = rnd.sample(range(1, 50), el)

print(f'Ответ по первому блоку с уровнем сложности алгоритма = квадратичная: {funct_1(lst)}\n')
print(f'Список: {lst}')
"""
Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.
"""
def funct_2(lst):
    #return min(lst)
    lst.sort()
    return lst[0]

print(f'Ответ по первому блоку с уровнем сложности алгоритма = квадратичная: {funct_2(lst)}\n')
print(f'Список: {lst}')




for el in (30, 35, 47, 49):
    lst = rnd.sample(range(1, 50), el)