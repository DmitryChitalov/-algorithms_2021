"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def check_number(user_number, count_even, count_odd):
    if user_number >= 10:
        if (user_number % 10) % 2 == 1:
            count_odd += 1
        else:
            count_even += 1
        user_number = user_number // 10
        check_number(user_number, count_even, count_odd)
    else:
        if user_number % 2 == 1:
            count_odd += 1
        else:
            count_even += 1
        print('Четных цифр вашем числе:' + str(count_even))
        print('Нечетных цифр вашем числе:' + str(count_odd))
        return


check_number(int(input('Введите число: ')), 0, 0)
