"""
Задание 1.
Реализуйте кодирование строки "по Хаффману".
У вас два пути:
1) тема идет тяжело? тогда вы можете, опираясь на пример с урока, сделать свою!!! версию алгоритма
Разрешается и приветствуется изменение имен переменных, выбор других коллекций, различные изменения
и оптимизации.

2) тема понятна? постарайтесь сделать свою реализацию.
Вы можете реализовать задачу, например, через ООП или предложить иной подход к решению.
"""

"""Хаффман через коллекции"""


"""
Нашел интересный вариант решения. немного переработал.
heapq - модуль для работы с мин. кучей из стандартной библиотеки Python. 
По документации разработан как раз для бинарных деревьев с автоматизацией сортировки.
https://tirinox.ru/heap-priority-queue/

"""
import heapq                            # Из нюансов библиотека heapq не может принимать как аргументы deque
from collections import Counter
from collections import namedtuple


class Node(namedtuple("Node", ["left", "right"])):  # класс для ветвей дерева - внутренних узлов; у них есть потомки
    def walk(self, code, acc):
        # чтобы обойти дерево нам нужно:
        self.left.walk(code, acc + "0")  # пойти в левого потомка, добавив к префиксу "0"
        self.right.walk(code, acc + "1")  # затем пойти в правого потомка, добавив к префиксу "1"


class Leaf(namedtuple("Leaf", ["char"])):  # класс для листьев дерева, у него нет потомков, но есть значение символа
    def walk(self, code, acc):
        # потомков у листа нет, по этому для значения мы запишем построенный код для данного символа
        code[self.char] = acc or "0"  # если строка длиной 1 то acc = "", для этого случая установим значение acc = "0"


def huffman_encode(s):                      # функция кодирования строки в коды Хаффмана
    h = list()                             # инициализируем очередь с приоритетами
    for ch, freq in Counter(s).items():     # построим очередь с помощью цикла, добавив счетчик для всех листьев
        h.append((freq, len(h), Leaf(ch)))  # очередь будет представлена частотой символа, счетчиком и самим символом
    print(f'Базовая очередь: {h}')
    heapq.heapify(h)                     # построим очередь с приоритетами
    print(f'Очередь с приоритетами: {h}')
    count = len(h)                          # инициализируем значение счетчика длиной очереди
    while len(h) > 1:                       # пока в очереди есть хотя бы 2 элемента
        freq1, _count1, left = heapq.heappop(h)  # вытащим элемент с минимальной частотой - левый узел
        freq2, _count2, right = heapq.heappop(h)  # вытащим следующий элемент с минимальной частотой - правый узел
        # поместим в очередь новый элемент, у которого частота равна сумме частот вытащенных элементов
        heapq.heappush(h, (freq1 + freq2, count, Node(left, right)))   # добавим новый внутренний узел у которого                                                                 # потомки left и right соответственно
        count += 1                          # инкрементируем значение счетчика при добавлении нового элемента дерева
    code = {}                               # инициализируем словарь кодов символов
    if h:                                   # если строка пустая, то очередь будет пустая и обходить нечего
        [(_freq, _count, root)] = h  # в очереди 1 элемент, приоритет которого не важен, а сам элемент - корень дерева
        root.walk(code, "")              # обойдем дерево от корня и заполним словарь для получения кодирования Хаффмана
    print(h)
    print(code)
    return code                          # возвращаем словарь символов и соответствующих им кодов


def main():
    string = input("Введите символы для кодирования: \n")            # читаем строку длиной  до 10**4
    code = huffman_encode(string)                                # кодируем строку
    encoded = "".join(code[ch] for ch in string)                 # отобразим закодированную версию, отобразив каждый символ
    print(f' Итоговый код: {encoded}')                                          # в соответствующий код и конкатенируем результат
    print(f'Число символов: {len(code)}; Длинна закодированной строки {len(encoded)}')

    for ch in sorted(code):                 # обойдем символы в словаре в алфавитном порядке с помощью функции sorted()
        print(f"{ch}: {code[ch]}")          # выведем символ и соответствующий ему код


if __name__ == "__main__":
    main()


