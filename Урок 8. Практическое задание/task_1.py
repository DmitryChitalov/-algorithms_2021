"""
Задание 1.
Реализуйте кодирование строки "по Хаффману".
У вас два пути:
1) тема идет тяжело? тогда вы можете, опираясь на пример с урока, сделать свою!!! версию алгоритма
Разрешается и приветствуется изменение имен переменных, выбор других коллекций, различные изменения
и оптимизации.

2) тема понятна? постарайтесь сделать свою реализацию.
Вы можете реализовать задачу, например, через ООП или предложить иной подход к решению.
"""

import heapq
from collections import Counter
from collections import namedtuple
import random
import string

# классы для хранения информации о структуре дерева

class Node(namedtuple("Node", ["left", "right"])):  # класс для ветвей дерева - внутренних узлов; у них есть потомки
    def walk(self, code, acc):
        # чтобы обойти дерево нам нужно:
        self.left.walk(code, acc + "0")  # пойти к левому потомку, добавив к префиксу "0"
        self.right.walk(code, acc + "1")  # пойти к правому потомку, добавив к префиксу "1"

class Leaf(namedtuple("Leaf", ["char"])):  # класс для листьев дерева, у него нет потомков, но есть значение символа
    def walk(self, code, acc):
        # потомков у листа нет, по этому для значения мы запишем построенный код для данного символа
        code[self.char] = acc or "0"  # если строка длиной 1 то acc = "", для этого случая установим значение acc = "0"


def huffman_encode(orig_str):  # функция кодирования строки в коды Хаффмана
    char_deque = []  # инициализируем дек с приоритетами
    for char, freq in Counter(orig_str).items(): # постоим очередь с помощью цикла, добавив счетчик, уникальный для всех листьев
        char_deque.append((freq, len(char_deque), Leaf(char)))  # очередь будет представлена частотой символа, счетчиком и самим символом
    heapq.heapify(char_deque)  # построим очередь с приоритетами
    count = len(char_deque) # инициализируем значение счетчика длиной очереди
    while len(char_deque) > 1:  # пока в очереди есть хотя бы 2 элемента
        freq1, _count1, left = heapq.heappop(char_deque)  # вытащим элемент с минимальной частотой - левый узел
        freq2, _count2, right = heapq.heappop(char_deque)  # вытащим следующий элемент с минимальной частотой - правый узел
        # поместим в очередь новый элемент, у которого частота равна суме частот вытащенных элементов
        heapq.heappush(char_deque, (freq1 + freq2, count, Node(left, right))) # добавим новый внутренний узел у которого
                                                                     # потомки left и right соответственно
        count += 1  # инкрементируем значение счетчика при добавлении нового элемента дерева
    code = {}  # инициализируем словарь кодов символов
    if char_deque:  # если строка пустая, то очередь будет пустая и обходить нечего
        [(_freq, _count, root)] = char_deque  # в очереди 1 элемент, приоритет которого не важен, а сам элемент - корень дерева
        root.walk(code, "")  # обойдем дерева от корня и заполним словарь для получения кодирования Хаффмана
    return code  # возвращаем словарь символов и соответствующих им кодов

def main():
    orig_str = input('Введите строку: ')
    code = huffman_encode(orig_str)  # кодируем строку
    encoded = "".join(code[char] for char in orig_str)  # отобразим закодированную версию, отобразив каждый символ
                                             # в соответствующий код и конкатенируем результат
    print(len(code), len(encoded))  # выведем число символов и длину закодированной строки
    for char in sorted(code): # обойдем символы в словаре в алфавитном порядке с помощью функции sorted()
        print("{}: {}".format(char, code[char]))  # выведем символ и соответствующий ему код
    print(encoded)  # выведем закодированную строку

if __name__ == "__main__":
    main()

# декодирование исходной строки
def huffman_decode(encoded, code):
    decode_str =[]  # инициализируем массив символов раскодированной строки
    enc_char = ""  # инициализируем значение закодированного символа
    for char in encoded:  # обойдем закодированную строку по символам
        enc_char += char  # добавим текущий символ к строке закодированного символа
        for dec_char in code:  # постараемся найти закодированный символ в словаре кодов
            if code.get(dec_char) == enc_char:  # если закодированный символ найден,
                decode_str.append(dec_char)  # добавим значение раскодированного символа к массиву раскодированной строки
                enc_char = ""  # обнулим значение закодированного символа
                break
    return "".join(decode_str)  # вернем значение раскодированной строки


def test(n_iter=100):  # тест для проверки алгоритма
    # сгененрируем строку из ascii-символов
    for i in range(n_iter):  # тест включает краевые случаи с пустой строкой и строкой из 1 символа
        length = random.randint(0, 32)  # сгеренируем код символа
        s = "".join(random.choice(string.ascii_letters) for _ in range(length)) # получим символ по коду и добавим к строке
        code = huffman_encode(s)  # выполним кодирование строки
        encoded = "".join(code[char] for char in s)  # получим закодированную строку
        if huffman_decode(encoded, code) == s: # раскодируем строку и сравним ее с исходной строкой
            return 'test is passed successfully'
        else:
            return 'test failed'


if __name__ == "__main__":
    print(test())

# Введите строку: Algorithms are awesome!
# 15 89
#  : 1110
# !: 0111
# A: 0000
# a: 1111
# e: 100
# g: 0010
# h: 0101
# i: 0011
# l: 0001
# m: 1100
# o: 1010
# r: 1011
# s: 1101
# t: 0100
# w: 0110
# 00000001001010101011001101000101110011011110111110111001110111101101001101101011001000111
# test is passed successfully