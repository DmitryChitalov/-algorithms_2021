"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

import random
import timeit


def bubble_sort(lst):
    n = 1

    while n < len(lst):
        count = 0

        for i in range(len(lst) - 1 - (n - 1)):

            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                count += 1
            # таким образом, если при проходе обнаруживается элемент меньше следующего, то обноаляется порядок,
            # и следующий элемент становится первым

        if count == 0:
            break

        n += 1


def bubble_sort_unoptimized(lst):
    n = 1
    while n < len(lst):
        for i in range(len(lst) - 1 - (n - 1)):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
        n += 1
    return array


SIZE = 1000
MIN_ITEM = -100
MAX_ITEM = 99
array = [random.randint(MIN_ITEM, MAX_ITEM) for _ in range(SIZE)]
array_2 = array.copy()

print(f'Сортировка без оптимизации:  {timeit.timeit("bubble_sort(array_2[:])", globals=globals(), number=1000)}')
print('Массив:', array_2, sep='\n')
# bubble_sort_wo_run(array_2)
print('После сортировки:', array_2, sep='\n')
print('Массив:', array, sep='\n')
# bubble_sort(array)
print(f'Сортировка с оптимизацией: {timeit.timeit("bubble_sort_wo_run(array[:])", globals=globals(), number=1000)}')
print('После сортировки:', array, sep='\n')

# В общем, смотрел я разные варианты, отличие есть в пределах погрешности, на 10 элементах, вижу есть 1-2 элемента,
# которые не меняют место в массиве, на 100 элементах различие уже почти в два раза больше по времени

# Сортировка без оптимизации:  0.0060319
# Массив:
# [-29, -94, -83, -84, 62, 87, -49, 99, -71, 51]
# После сортировки:
# [99, 87, 62, 51, -29, -49, -71, -83, -84, -94]
# Массив:
# [-29, -94, -83, -84, 62, 87, -49, 99, -71, 51]
# Сортировка с оптимизацией: 0.003924199999999999
# После сортировки:
# [99, 87, 62, 51, -29, -49, -71, -83, -84, -94]

# для 1000 элементов:
# Сортировка без оптимизации:  43.3132167
# Сортировка с оптимизацией: 39.5513678
