"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в
виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

from timeit import timeit
from random import randint


def bubb_sorted_1(lst_item):
    num = 1
    while num < len(lst_item):
        for i in range(len(lst_item) - num):
            if lst_item[i] < lst_item[i + 1]:
                lst_item[i], lst_item[i + 1] = lst_item[i + 1], lst_item[i]
        num += 1
    return lst_item


def bubb_sorted_2(lst_item):
    num = 1
    while num < len(lst_item):
        go = False
        for i in range(len(lst_item) - num):
            if lst_item[i] < lst_item[i + 1]:
                lst_item[i], lst_item[i + 1] = lst_item[i + 1], lst_item[i]
                go = True
        if not go:
            break
        num += 1
    return lst_item


list_pattern = [randint(-100, 100) for _ in range(12)]

print('Исходный список:\n', list_pattern)
print()
print('Отсортированный список по убыванию:\n', bubb_sorted_1(list_pattern[:]))
print()
print('Отсортированный список по убыванию модифицированной функцией:\n', bubb_sorted_2(list_pattern[:]))

list_pattern = [randint(-100, 100) for _ in range(1000)]
print()
print('Замеры обычной функции:')
print(timeit("bubb_sorted_1(list_pattern[:])", globals=globals(), number=1000))
print()
print('Замеры модифицированной функции:')
print(timeit("bubb_sorted_2(list_pattern[:])", globals=globals(), number=1000))


'''
Я создал перемнную флаг, которая отвечает за выход из цикла. Идея в том чтобы
выходить из цикла если за проход по списку нет ни одной перестановки.
Оптимизация не дала эффективность. Цифра даже стала ещё больше. Я смотрел в дебаггере
как происходит проход на списке длиной из пяти элементов. И сделал вывод что
чаще всего он заканчивает изменения на 4 из пяти проходов для num. А чтоб понять
надо выйти или нет он идёт пятый из пяти проход и попадает на условие когда не
меняются данные, но ведь это и так последний проход. Поэтому оптимизации получается
будто и нет. Конечно еслиб список был заранее отсортирован как надо, то был бы
один проход, но вероятность такого очень мала.

Исходный список:
 [33, -79, 6, 28, -38, 1, -91, -1, -46, 0, -17, -10]

Отсортированный список по убыванию:
 [33, 28, 6, 1, 0, -1, -10, -17, -38, -46, -79, -91]

Отсортированный список по убыванию модифицированной функцией:
 [33, 28, 6, 1, 0, -1, -10, -17, -38, -46, -79, -91]

Замеры обычной функции:
53.73198843499995

Замеры модифицированной функции:
54.73322164299998
'''
