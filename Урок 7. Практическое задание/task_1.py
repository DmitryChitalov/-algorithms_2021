"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
import timeit
import random


def bubble_sort_1(lst1):
    x = 1
    while x < len(lst1):
        for y in range(len(lst1) - x):
            if lst1[y] < lst1[y+1]:
                lst1[y], lst1[y+1] = lst1[y+1], lst1[y]

        x += 1
    return lst1


def bubble_sort_2(lst2):
    n = 1
    while n < len(lst2):
        count = 0
        for j in range(len(lst2) - n):
            if lst2[j] < lst2[j+1]:
                count += 1
                lst2[j], lst2[j+1] = lst2[j+1], lst2[j]
        if count == 0:
            break

        n += 1

    return lst2


if __name__ == '__main__':

    test_list = [random.randrange(-100, 100) for _ in range(10)]
    print(f'Test list: {test_list}')
    # print(f'Sorted by bs_1: {bubble_sort_1(test_list)}')
    print(timeit.timeit("bubble_sort_1(test_list[:])", globals=globals(), number=1000))
    # print(f'Sorted by bs_2: {bubble_sort_2(test_list)}')
    print(timeit.timeit("bubble_sort_2(test_list[:])", globals=globals(), number=1000))

"""
Доработка заключалась в установке счетчика, который считал количество сортировок сортивок
за один проход по массиву. Если этот счетчик показывад "0", то цикл прерывался  и 
тем самым не производились лишние проходы и экономилось время. Данная доработка  в случамщжет иметь
смысл если исходный список частично отсортирован и он достаточно большой.
Как показывают замеры, какого-то ощутимого преимущества на не больших массивах это не дает.
 
Test list: [66, 14, -13, 42, -64, -41, -24, 73, -88, 90]
Sorted by bs_1: [90, 73, 66, 42, 14, -13, -24, -41, -64, -88]
Sorted by bs_2: [90, 73, 66, 42, 14, -13, -24, -41, -64, -88]
bs_1  0.007096100000000001
bs_2  0.0082365
"""