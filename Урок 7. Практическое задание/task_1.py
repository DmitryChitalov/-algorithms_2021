"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
from random import randint
from timeit import timeit


def bubble_sort_1(l: int):
    lst = [randint(1, 100) for i in range(l)]
    # print(f'Начальный массив: {lst}')
    for i in range(len(lst)):
        for j in range(len(lst) - 1):
            if lst[j] < lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
    # print(f'Отсортированный массив: {lst}')
    return lst


def bubble_sort_2(l: int):
    lst = [randint(1, 100) for i in range(l)]
    # print(f'Начальный массив: {lst}')
    for i in range(len(lst)):
        for j in range(len(lst) - i - 1):
            if lst[j] < lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
    # print(f'Отсортированный массив: {lst}')
    return lst

print('Сортировка пузырьком вариант №1 (Длина 100): ',
      timeit(
          "bubble_sort_1(100)",
          globals=globals(),
          number=1))

print('Сортировка пузырьком вариант №1 (Длина 1000): ',
      timeit(
          "bubble_sort_1(1000)",
          globals=globals(),
          number=1))

print('Сортировка пузырьком вариант №1 (Длина 10000): ',
      timeit(
          "bubble_sort_1(10000)",
          globals=globals(),
          number=1))

print('Сортировка пузырьком вариант №2 (Длина 100): ',
      timeit(
          "bubble_sort_2(100)",
          globals=globals(),
          number=1))

print('Сортировка пузырьком вариант №2 (Длина 1000): ',
      timeit(
          "bubble_sort_2(1000)",
          globals=globals(),
          number=1))

print('Сортировка пузырьком вариант №2 (Длина 10000): ',
      timeit(
          "bubble_sort_2(10000)",
          globals=globals(),
          number=1))

# Результаты
# Сортировка пузырьком вариант №1 (Длина 100):  0.0007325999999999999
# Сортировка пузырьком вариант №1 (Длина 1000):  0.07723769999999999
# Сортировка пузырьком вариант №1 (Длина 10000):  8.346442
# Сортировка пузырьком вариант №2 (Длина 100):  0.000513399999999109
# Сортировка пузырьком вариант №2 (Длина 1000):  0.07015769999999932
# Сортировка пузырьком вариант №2 (Длина 10000):  6.3268278
# Выводы: Перейдем сразу к оптимимизации алгоритма, я не стал добавлять флаг,
# проверяющий совершались ли перестановки или нет, т.к. шанс на такой исход крайне мал,
# тем более что для каждого запуска массив генерируется рандомно, но я урезал количество прохождений  во втором цикле,
# т.к. нам достаточно пройти len(lst)-i-1 раз,
# ведь на каждой итерации пузыри будут всплывать справа и нет смысла их проверять их еще раз.
# Ну и по замерам видно, что такая оптимизация дала солидную оптимизацию, но т.к. суть алгоритма осталось прежней,
# то затраты по времени все равно слишком большие :(
