"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
import random
import timeit


def booble_sort(my_mas):
    len_mas = len(my_mas)
# сортировка по возрастанию
    for el_mas in range(len_mas - 1):
        g = True
        #       for i in range(len_mas-1): улучшил, теперь не будем сравнивать уже найденный правильно стоящий элевент
        for i in range(len_mas - 1 - el_mas):
            if my_mas[i] > my_mas[i + 1]:
                my_mas[i], my_mas[i + 1] = my_mas[i + 1], my_mas[i]
                g = False
        if g:
            break

    print('сортировка по возрастанию ', my_mas)

# сортировка по убыванию
    for el_mas in range(len_mas-1):

        for i in range(len_mas-1-el_mas):

            if my_mas[i] < my_mas[i+1]:
               my_mas[i], my_mas[i+1] = my_mas[i+1], my_mas[i]

    print('сортировка по убыванию    ', my_mas)

len_mas = int(input("Enter len for MAS : "))
my_mas = [random.randint(-100, 100) for i in range(len_mas)]
print(my_mas)

print(
    timeit.timeit(
        "booble_sort(my_mas)",
        globals=globals(),
        number=1000))


# Оптимизация данного алгоритма не имеет смысла,
# т.к. данный метод всеравно On2! т.е. явного прироста мы неувидим!