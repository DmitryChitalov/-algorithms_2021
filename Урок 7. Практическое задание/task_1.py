"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
from random import randrange
import timeit


def bubble_reverse_sort(lst_obj):
    """Пузырьковая сортировка по убыванию"""
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj


def bubble_reverse_sort_2(lst_obj):
    """Оптимизированая сортировка пузырьком по убыванию"""
    n = 1
    while n < len(lst_obj):
        flag = False
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                flag = True
        if not flag:
            break
        n += 1
    return lst_obj


my_array_10 = [randrange(-100, 101) for _ in range(10)]
my_array_100 = [randrange(-100, 101) for _ in range(100)]
my_array_1000 = [randrange(-100, 101) for _ in range(1000)]

print('Исходный масив: ')
print(my_array_10)
print('Отортированый масив: ')
print(bubble_reverse_sort(my_array_10[:]))

print("#" * 120)
print("До оптимизации: ")
print('Массив 100 элементов: ',
      timeit.timeit('bubble_reverse_sort(my_array_100[:])', globals=globals(), number=100))
print('Массив 1000 элементов: ',
      timeit.timeit('bubble_reverse_sort(my_array_1000[:])', globals=globals(), number=100))

print("#" * 120)

print('После оптимизации: ')
print('Массив 100 элементов: ',
      timeit.timeit('bubble_reverse_sort_2(my_array_100[:])', globals=globals(), number=100))
print('Массив 1000 элементов: ',
      timeit.timeit('bubble_reverse_sort_2(my_array_1000[:])', globals=globals(), number=100))

# Исходный масив:
# [98, 94, -60, -20, 68, -83, 90, -39, -16, -41]
# Отортированый масив:
# [98, 94, 90, 68, -16, -20, -39, -41, -60, -83]
###############################################################################################
# До оптимизации:
# Массив 100 элементов:  0.09290258500004711
# Массив 1000 элементов:  7.8507300480000595
###############################################################################################
# После оптимизации:
# Массив 100 элементов:  0.06801183600009608
# Массив 1000 элементов:  7.792295147000004

#  В доработаной функции я добавил флаг, в начале цикла while утанавливается значение False, ели
#  были перетасновки, то значение меняется на True, в конце цикла проверяется значение флага,
#  если False, то цикл прерывается. В результате оптимизации скорость работы на массиве 100
#  элементов увеличилась ощутимо, но в 1000 элементов практически нет разницы, думаю это
#  связано с тем что на большом массиве вероятность случайного совпадения ощутимого количества
# чисел в нужном порядке относительно дины массива, чтобы это както повлияло на время крайне мала.
