"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в
виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

import random
import timeit


def bubble_sort(lst_obj):
    """Функция осуществляющая сортировку списка пузырьком по убыванию"""
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj) - 1, n - 1, -1):
            if lst_obj[i - 1] < lst_obj[i]:
                lst_obj[i - 1], lst_obj[i] = lst_obj[i], lst_obj[i - 1]
        n += 1
    return lst_obj


def bubble_improved(lst_obj):
    """
    Функция осуществляющая сортировку списка пузырьком по убыванию,
    выполняющая возвращение отсортированного спмска если за проход
    по списку не совершается ни одной сортировки
    """
    n = 1
    while n < len(lst_obj):
        flag = 1
        for i in range(len(lst_obj) - 1, n - 1, -1):
            if lst_obj[i - 1] < lst_obj[i]:
                lst_obj[i - 1], lst_obj[i] = lst_obj[i], lst_obj[i - 1]
                flag = 0
        if flag:
            return lst_obj
        n += 1

    return lst_obj


orig_list = [random.randint(-10, 10) for _ in range(10)]
print('=' * 50)
print(f'Исходный список       : {orig_list}')
print(f'Отсортированный список: {bubble_improved(orig_list)}')

# Замеры -----------------------------------------------------------------------
metric = (10, 50, 100, 500, 1000)

for i in metric:
    print(f'\n{"-" * 15} Список из {i} элементов {"-" * 15}')
    orig_list = [random.randint(-100, 100) for _ in range(i)]
    print('Обычная функция   :', end=' ')
    print(timeit.timeit("bubble_sort(orig_list[:])", globals=globals(), number=1000))
    print('Улучшенная функция:', end=' ')
    print(timeit.timeit("bubble_improved(orig_list[:])", globals=globals(), number=1000))

"""
В данном скрипте представлена доработанная функция сортировки списка пузырьком.
Суть доработки в назначении флага, который при проходе по списку с совершением
сортировки мменяет свое значение, если сортировка не осуществляется, то значение
остается прежним и осуществляется возвращение результата.

Результаты замеров:
--------------- Список из 10 элементов ---------------
Обычная функция   : 0.007527900000000004
Улучшенная функция: 0.006149500000000002

--------------- Список из 50 элементов ---------------
Обычная функция   : 0.1287801
Улучшенная функция: 0.12724220000000003

--------------- Список из 100 элементов ---------------
Обычная функция   : 0.5130442
Улучшенная функция: 0.847663

--------------- Список из 500 элементов ---------------
Обычная функция   : 15.658681
Улучшенная функция: 15.5894287

--------------- Список из 1000 элементов ---------------
Обычная функция   : 65.6975486
Улучшенная функция: 66.8174918

Как показала практика, при применении доработанной функции показатели 
незначительно улучшаются при сортировки списков малой длинны. При увеличении длинны
списка преимущество сходит на нет и далее обе функции работают примерно одинаково
"""















