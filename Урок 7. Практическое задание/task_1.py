"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
from timeit import timeit
from random import sample


def sort_base(arr):  # Обычная сортировка пузырьком
    for j in range(len(arr)-1):
        for i in range(len(arr)-j-1):
            if arr[i] < arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
    return arr


def sort_optimaze(arr, end=True):  # Оптимизированная сортировка пузырьком
    for j in range(len(arr)-1):
        for i in range(len(arr)-j-1):
            if arr[i] < arr[i+1]:
                arr[i], arr[i+1] = arr[i+1], arr[i]
                end = False
        if end:
            return arr
    end = True
    return arr


if __name__ == '__main__':
    n = sample(range(-100, 101), 30)

    print('Исходный массив', n, sep='\n')
    print('Массив отсортированный обычной "сотировкой пузырьком"', sort_base(n[:]), sep='\n')
    print('Массив отсортированный доработанной "сотировкой пузырьком"', sort_optimaze(n[:]), sep='\n')
    print('Обычная сортировка -', timeit("sort_base(n[:])", globals=globals(), number=1000))
    print('Оптимизированная сортировка -', timeit("sort_optimaze(n[:])", globals=globals(), number=1000))

"""
вывод
    Исходный массив
    [10, 17, 78, -44, -38, 68, -84, 5, 39, 14, -31, 86, 70, -100, -68, -70, -5, 100, -7, -65, -37, -45, -69, 23, 98, -54, -20, 22, 15, 80]
    Массив отсортированный обычной "сотировкой пузырьком"
    [100, 98, 86, 80, 78, 70, 68, 39, 23, 22, 17, 15, 14, 10, 5, -5, -7, -20, -31, -37, -38, -44, -45, -54, -65, -68, -69, -70, -84, -100]
    Массив отсортированный доработанной "сотировкой пузырьком"
    [100, 98, 86, 80, 78, 70, 68, 39, 23, 22, 17, 15, 14, 10, 5, -5, -7, -20, -31, -37, -38, -44, -45, -54, -65, -68, -69, -70, -84, -100]
    Обычная сортировка - 0.09270419999999999
    Оптимизированная сортировка - 0.08622839999999998
"""
# доработка исключает холостые проходы когда массив уже отсортирован и завершает работу,
# на практике получилось, что такая сортировка стабильно немного быстрей
