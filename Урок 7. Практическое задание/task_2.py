"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Хотя в примерах к уроку уже есть вариант реализации слияния,
попробуйте предложить другой (придумать или найти).

И попытаться сделать замеры на массивах разной длины: 10, 100, 1000, ...

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""

"""Сортировка слиянием"""

import timeit
import random
import operator  # для второго варианта


# 1. Базовый вариант
def merge_sort(lst_obj):  # O(nlog(n))
    if len(lst_obj) > 1:
        center = len(lst_obj) // 2
        left = lst_obj[:center]
        right = lst_obj[center:]

        merge_sort(left)
        merge_sort(right)

        # перестали делить
        # выполняем слияние
        i, j, k = 0, 0, 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:  # если нужно сделать по возрастанию, то поменять знак
                lst_obj[k] = left[i]
                i += 1
            else:
                lst_obj[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            lst_obj[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            lst_obj[k] = right[j]
            j += 1
            k += 1
        return lst_obj


# 2. Вариант с резделением блоков на функции и использованием бибилиотеки operators
#  https://webdevblog.ru/sortirovka-sliyaniem-merge-sort-v-python/
def merge_sort_v2(lst_obj, compare=operator.lt):
    if len(lst_obj) < 2:
        return lst_obj[:]
    else:
        middle = int(len(lst_obj) / 2)
        left = merge_sort_v2(lst_obj[:middle], compare)
        right = merge_sort_v2(lst_obj[middle:], compare)
        return merge_v2(left, right, compare)


def merge_v2(left, right, compare):
    result = []
    i, j = 0, 0
    while i < len(left) and j < len(right):
        if compare(left[i], right[j]):
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    while i < len(left):
        result.append(left[i])
        i += 1
    while j < len(right):
        result.append(right[j])
        j += 1
    return result


# ---- Параметры замеров:
len_arr = [10, 20, 50, 100, 200, 300]           # размер сортируемого массива
res_time = {'Len_arr': ('ms', 'ms2', '%')}    # словарь для результатов замеров

# --- Делаем замер и выводим результаты:
for len_i in len_arr:
    # в условии 50 не включается, поэтому сделаем верхнюю границу 49.99
    orig_list = [random.random() * 49.99 for _ in range(len_i)]
    ms = timeit.timeit(
            "merge_sort(orig_list[:])",
            globals=globals(), number=1000)
    ms2 = timeit.timeit(
            "merge_sort_v2(orig_list[:])",
            globals=globals(), number=1000)
    res_time[len_i] = (round(ms, 4), round(ms2, 4),
                       round((ms2/ms - 1)*100, 2))
    print(f'-- При длине массива: {len_i} ')
    print(f'Массив до сортировки: {orig_list}')
    print(f'Массив после сортировки merge_sort или ms: {merge_sort(orig_list[:])}')
    print(f'Массив после сортировки merge_sort_v2 или ms2: {merge_sort_v2(orig_list[:])}')

# Выводим результаты
for pos, item in enumerate(res_time.items()):
    print(f'{pos})  {item[0]}   {item[1][0]}  {item[1][1]}   {item[1][2]}')


"""
Вывод:
Найденные реализации имеют одинаковую структуру кода, поэтому в данном случае
была разобран базовый вариант и вариант, предполагающий разделение на две функции.
Второй вариант может быть понятнее для разбора на определенном этапе.
 
В результате выполнения практического задания было сделано следующее:

1. Создан одномерный вещественный массив, заданный случайными числами на промежутке [0; 50)

2. Добавлен вариант реализации, где процесс слияния вынесен в отдельную функцию и 
используется библиотека operator для выполнения сравнения.

3. Проведена более глубокая работа по изучению алгоритма. 

Результаты замеров показали, что базовая функция ms работает быстрее второго варианта. 
Полагаю, что в данном случае использование функционала библиотеки operator является избыточным, 
что приводит к потерям времени - см. результаты ниже. 

Вывод результатов:
-- При длине массива: 10 
Массив до сортировки: [7.882027968315992, 2.3942869308158237, 19.471793295338454, 46.830922589147534, 9.854972713057427,
 8.295871952980995, 23.48217455917894, 17.532212956344765, 37.146397015814784, 35.947391036337436]
Массив после сортировки merge_sort или ms: [2.3942869308158237, 7.882027968315992, 8.295871952980995, 9.854972713057427, 
17.532212956344765, 19.471793295338454, 23.48217455917894, 35.947391036337436, 37.146397015814784, 46.830922589147534]
Массив после сортировки merge_sort_v2 или ms2: [2.3942869308158237, 7.882027968315992, 8.295871952980995, 9.8549727130,
17.532212956344765, 19.471793295338454, 23.48217455917894, 35.947391036337436, 37.146397015814784, 46.830922589147534]
-- При длине массива: 20 
... и т.д.

Сводные результаты замеров:

0)  Len_arr   ms  ms2   %
1)  10   0.0208  0.0264   26.72
2)  20   0.0523  0.0596   14.07
3)  50   0.2256  0.1713   -24.07
4)  100   0.3484  0.3843   10.31
5)  200   0.7257  0.8385   15.55
6)  300   1.1442  1.3434   17.41
"""
