"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Хотя в примерах к уроку уже есть вариант реализации слияния, попробуйте предложить другой
(придумать или найти)

И попытаться сделать замеры на массивах разной длины: 10, 100, 1000, ...

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""

import timeit
import random

# Код, написанный на уроке
def merge_sort(lst_obj):
    if len(lst_obj) > 1:
        center = len(lst_obj) // 2
        left = lst_obj[:center]
        right = lst_obj[center:]

        merge_sort(left)
        merge_sort(right)

        # перестали делить
        # выполняем слияние
        i, j, k = 0, 0, 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                lst_obj[k] = left[i]
                i += 1
            else:
                lst_obj[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            lst_obj[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            lst_obj[k] = right[j]
            j += 1
            k += 1
        return lst_obj

# ----------------------------------------------------------
# Код для домашнего задания
def merge_sort_hw(orig_list):
    """Функция деления списка рекурсией"""
    if len(orig_list) == 1:
        return orig_list

    middle = len(orig_list) // 2
    left = merge_sort(orig_list[:middle])
    right = merge_sort(orig_list[middle:])
    return merge_lists(left, right)


def merge_lists(left, right):
    """Функция объединения списков"""
    temp = []
    i = 0
    j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            temp.append(left[i])
            i += 1
        else:
            temp.append(right[j])
            j += 1

    if i < len(left):
        temp += left[i:]
    if j < len(right):
        temp += right[j:]

    return temp

if __name__ == '__main__':

    num = int(input('Введите число элементов списка: '))
    orig_list = [random.uniform(-100.0, 100.0) for _ in range(num)]
    print(f'Сгенерированный список: {orig_list}')
    print(f'Отсортированный список: {merge_sort_hw(orig_list)}')

    metric = (10, 50, 100, 500, 1000)

    for i in metric:
        print(f'\n{"-" * 15} Список из {i} элементов {"-" * 15}')
        orig_list = [random.uniform(-100.0, 100.0) for _ in range(i)]
        print('Вариант "На уроке"        :', end=' ')
        print(timeit.timeit("merge_sort(orig_list[:])", globals=globals(), number=1000))
        print('Вариант "Домашнее задание":', end=' ')
        print(timeit.timeit("merge_sort_hw(orig_list[:])", globals=globals(), number=1000))

"""
Замеры показывают, что оба варианта дают примерно одинаковые результаты, так как
имеют одинаковую сложность O(n * log n)

--------------- Список из 10 элементов ---------------
Вариант "На уроке"        : 0.009841699999999953
Вариант "Домашнее задание": 0.00968250000000026

--------------- Список из 50 элементов ---------------
Вариант "На уроке"        : 0.07449330000000032
Вариант "Домашнее задание": 0.0794630999999999

--------------- Список из 100 элементов ---------------
Вариант "На уроке"        : 0.16159610000000013
Вариант "Домашнее задание": 0.16751119999999986

--------------- Список из 500 элементов ---------------
Вариант "На уроке"        : 1.1132168999999998
Вариант "Домашнее задание": 1.1110148000000004

--------------- Список из 1000 элементов ---------------
Вариант "На уроке"        : 2.4808724999999994
Вариант "Домашнее задание": 2.5397351000000015
"""





