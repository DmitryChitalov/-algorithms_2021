"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные по длине части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.

Задачу можно решить без сортировки исходного массива.

Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках: Шелла, Гномья, Кучей...

[5, 3, 4, 3, 3, 3, 3]

[3, 3, 3, 3, 3, 4, 5]

my_lst
new_lts

arr[m]


from statistics import median

[3, 4, 3, 3, 5, 3, 3]

left = []
right = []

left == right and

for i in
    for
    left == right
    left.clear()
    right.clear()


"""

from statistics import median
from timeit import timeit
import random


def find_median(lst_obj: list):
    n = 0
    avg = len(lst_obj) // 2
    while n != avg:
        lst_obj.pop(lst_obj.index(max(lst_obj)))
        n += 1
    return max(lst_obj)


orig_list = [random.randint(-100, 100) for _ in range(11)]
print(f"Список с которым работаем {orig_list}")

print(f'Медиана по стандартной функции = {median(orig_list)}')
print(f'Медиана по нашей функции = {find_median(orig_list)}')

print(f"Скорость нахождения медианы по стандартной функции = {timeit('median(orig_list)', globals=globals())}")
print(f"Скорость нахождения медианы по нашей функции  = {timeit('find_median(orig_list)', globals=globals())}")

# Скорость нахождения медианы по стандартной функции = 2.342088239
# Скорость нахождения медианы по нашей функции  = 1.145398754
"""
Стандартная функция скорее всего в себя включает еще сортировку
При данном исходе сложность возрастает до O(NLogN)
При нашей сортировке мы имеем сложность O(N)
Из - за этого наша функция и отрабатывает быстрее
"""
