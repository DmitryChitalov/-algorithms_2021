"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные по длине части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.

Задачу можно решить без сортировки исходного
массива.

Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках: Шелла, Гномья, Кучей...

[5, 3, 4, 3, 3, 3, 3]

[3, 3, 3, 3, 3, 4, 5]

my_lst
new_lts

arr[m]


from statistics import median

[3, 4, 3, 3, 5, 3, 3]


left.clear()
right.clear()


m = 3
len = 7
i
left = []
right = []

left == right and

for i in
    for
    left == right
    left.clear()
    right.clear()


"""
import statistics
from random import randint

"""
Для решения использую сортировку Шелла, затем выбиру элемент находящийся в середине.
Сортировка Шелла сравнивает не рядом стоящие элементы, а находящиеся на расстоянии.
Сначала это элементы, индексы которых отличаются на половину длинны списка,
а затем этот промежуток уменьшается в 2 раза.
Завершающий проход сортировки происходит когда сравниваются ряжом стоящие элементы.
"""


def shell(lst):
    inc = len(lst) // 2
    while inc:
        for i, el in enumerate(lst):
            while i >= inc and lst[i - inc] > el:
                lst[i] = lst[i - inc]
                i -= inc
            lst[i] = el
        inc = 1 if inc == 2 else int(inc * 5.0 / 11)


my_lst = [randint(0, 10) for _ in range(11)]

print(my_lst)
print(f"Медиана массива, полученая функцией из модуля statistics: {statistics.median(my_lst)}")
shell(my_lst)
print(f"Медиана массива, в отсортированном массиве: {my_lst[len(my_lst) // 2]}")
