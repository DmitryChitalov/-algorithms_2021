"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные по длине части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.

*************************************************************

На маленьких значениях m все функции показывают примерно одинаковую эффективность.
Функции сортировки работают чуть медленнее, т.к. производят дополнительную обработку
массива перед поиском заданного элемента.

С ростом количества элементов у функций сортировки появляется
преимущество, как по времени выполнения, так и по памяти.
Кроме гномьей сортировки, т.к. её сложность выполнения по времени
O(n^2) и с увеличением количества элементов скорость выполнения резко
падает.

Скорость выполнения функций деления массива пополам и
сортировка подсчётом сильно зависят от количества посторяющихся элементов
в исходном массиве.

Наилучший результат работы на больших массивах с редкими повторяющимися
значениями показывает сортировка кучей.
"""
from random import randint
from statistics import median
from timeit import default_timer
from memory_profiler import memory_usage
import sorts


def time_memo_prof(func):

    def wrapper(*args, **kwargs):
        used_time = default_timer()
        used_memory1 = memory_usage()

        result = func(*args, **kwargs)

        used_memory2 = memory_usage()
        used_memory = used_memory2[0] - used_memory1[0]
        used_time = default_timer() - used_time

        print(f'Функция {func.__name__}:\n'
              f'Время выполнения: {used_time} сек.\n'
              f'Использованная память: {used_memory} Mib.')
        return result

    return wrapper


@time_memo_prof
def median_by_max(array):
    for _ in range(len(array) // 2):
        array.remove(max(array))
    return max(array)


@time_memo_prof
def median_by_split(array):
    for i in array:
        left = [el for el in array if el < i]
        right = [el for el in array if el > i]
        if len(left) == len(right) or abs(len(left) - len(right)) < array.count(i):
            return i


@time_memo_prof
def median_by_sort(function, array):
    return function(array)[m]


if __name__ == '__main__':

    m = int(input('Введите m '))
    test_list = [randint(0, 1000000) for _ in range(2 * m + 1)]
    print(f'TEST: {median(test_list[:])}')

    print(median_by_max(test_list[:]))
    print(median_by_split(test_list[:]))
    print('Функции сортировки:')
    print(f'Гномья: {median_by_sort(sorts.gnome_sort, test_list[:])}')
    print(f'Шелла: {median_by_sort(sorts.shell_sort, test_list[:])}')
    print(f'Кучей: {median_by_sort(sorts.heap_sort, test_list[:])}')
    print(f'Подсчётом: {median_by_sort(sorts.count_sort, test_list[:])}')

"""
Результаты, m = 10

Функция median_by_max:
Время выполнения: 0.19552939999999985 сек.
Использованная память: 0.0078125 Mib.

Функция median_by_split:
Время выполнения: 0.20047039999999994 сек.
Использованная память: 0.0 Mib.

Функции сортировки:
Гномья:
Время выполнения: 0.20063699999999995 сек.
Использованная память: 0.0 Mib.

Шелла:
Время выполнения: 0.20097109999999985 сек.
Использованная память: 0.0 Mib.

Кучей:
Время выполнения: 0.20053169999999998 сек.
Использованная память: 0.0 Mib.

Подсчётом:
Время выполнения: 0.20016049999999996 сек.
Использованная память: 0.0 Mib.

*******************************************

Результаты, m = 500

Функция median_by_max:
Время выполнения: 0.23412750000000004 сек.
Использованная память: 0.0078125 Mib.

Функция median_by_split:
Время выполнения: 0.20072960000000029 сек.
Использованная память: 0.10546875 Mib.

Функции сортировки:
Гномья:
Время выполнения: 0.36208149999999995 сек.
Использованная память: 0.0 Mib.

Шелла::
Время выполнения: 0.2169762000000004 сек.
Использованная память: 0.0 Mib.

Кучей:
Время выполнения: 0.22247639999999969 сек.
Использованная память: 0.0 Mib.

Подсчётом:
Время выполнения: 0.20073249999999998 сек.
Использованная память: 0.046875 Mib.

*******************************************

Результаты, m = 10000, [0,10]

Функция median_by_max:
Время выполнения: 3.066254800000001 сек.
Использованная память: 0.0078125 Mib.

Функция median_by_split:
Время выполнения: 0.2498162000000015 сек.
Использованная память: 0.00390625 Mib.

Функции сортировки:
Гномья: 
Время выполнения: 58.23560630000001 сек.
Использованная память: 0.0 Mib.

Шелла:
Время выполнения: 3.4865984999999995 сек.
Использованная память: 0.0 Mib.

Кучей:
Время выполнения: 0.3612676999999991 сек.
Использованная память: 0.0 Mib.

Подсчётом:
Время выполнения: 0.21740860000001305 сек.
Использованная память: 0.33984375 Mib.

*******************************************

Результаты, m = 10000, [0,1000000]

Функция median_by_max:
Время выполнения: 2.8026039000000003 сек.
Использованная память: 0.01171875 Mib.

Функция median_by_split:
Время выполнения: 16.1232948 сек.
Использованная память: 1.8203125 Mib.

Функции сортировки:
Гномья: 
Время выполнения: 70.3208559 сек.
Использованная память: 0.0 Mib.

Шелла:
Время выполнения: 6.191544300000004 сек.
Использованная память: 0.0 Mib.

Кучей:
Время выполнения: 0.38075339999998903 сек.
Использованная память: 0.0 Mib.

Подсчётом:
Время выполнения: 9.147318400000003 сек.
Использованная память: 0.00390625 Mib.
"""
