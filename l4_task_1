from timeit import timeit
from collections import Counter


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


# лист компрехеншен range
def func_2(nums):
    return [i for i in range(len(nums)) if nums[i] % 2 == 0]


# лист компрехеншен enumerate
def func_3(nums):
    return [i for i, v in enumerate(nums) if v % 2 == 0]


# лист компрехеншен Counter
def func_4(nums):
    c = Counter(nums)
    return [i for i in range(sum(c.values())) if nums[i] % 2 == 0]


# генератор
def func_5(nums):
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            yield i


num = list(range(1, 1000))

code_to_test = """
def gen(nums):
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            yield i
num = list(range(1, 1000))
a = list(gen(num))
"""

code_to_test_2 = """
def func_6(nums):
    return [i for i in range(len(nums)) if nums[i] % 2 == 0]
num = list(range(1, 1000))
func_6(num)
"""

elapsed_time = timeit(code_to_test, number=1000)
elapsed_time_2 = timeit(code_to_test, number=1000)

print(f'Время выполнения исходной функции: {timeit("func_1(num)", number=1000, globals=globals())}')
print(f'Время выполнения лист компрехеншен range: {timeit("func_2(num)", number=1000, globals=globals())}')
print(f'Время выполнения лист компрехеншен enumerate: {timeit("func_3(num)", number=1000, globals=globals())}')
print(f'Время выполнения лист компрехеншен Counter: {timeit("func_4(num)", number=1000, globals=globals())}')
print(f'Время выполнения генератора: {timeit("func_5(num)", number=1000, globals=globals())}')

print(f'Время выполнения скрипта с преобразованием в список: {elapsed_time}')
print(f'Время выполнения скрипта с LC: {elapsed_time_2}')

"""
Время выполнения исходной функции: 0.05793190000000001
Время выполнения лист компрехеншен range: 0.04730550000000003
Время выполнения лист компрехеншен enumerate: 0.051867799999999964
Время выполнения лист компрехеншен Counter: 0.08697440000000001
Время выполнения генератора: 0.00013980000000002324

Время выполнения скрипта с преобразованием в список: 0.06519920000000001
Время выполнения скрипта с LC: 0.06533850000000001
"""
"""Из приведенных выше данных можно судить, что быстрее всего выполняется генератор,но результатом его работы 
является объект генератора, функция с использование листа компрехеншен совместно с range для вывода списка 
отрабатывает быстрее остальных. Если рассмотреть скрипт получения списка то разница между использованием генератора и 
фукции с листом компрехеншен незначительная и варьируется как в пользу генератора так и в пользу функции.
"""
