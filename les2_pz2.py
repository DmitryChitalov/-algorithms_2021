"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def count_even_odd_numbs(number, even=0, odd=0):
    if number == 0:
        return even, odd
    else:
        if number % 10 % 2 == 0:
            even += 1
        else:
            odd += 1
        return count_even_odd_numbs(number // 10, even, odd)


def count_even_odd_numbs2(number, even=0, odd=0):
    return count_even_odd_numbs2(number // 10 if number != 0 else 0, even + 1 if number % 10 % 2 == 0 else even,
                                 odd + 1 if number % 10 % 2 != 0 else odd) if number != 0 else (even, odd)


print(f'Четных и нечетных чисел: {count_even_odd_numbs(6552002)}')
print(f'Четных и нечетных чисел: {count_even_odd_numbs2(6552002)}')
