"""
Задание 3 *.
Сделать профилировку для скриптов с рекурсией и сделать описание,
можно ли так профилировать и есть ли 'подводные камни' в профилировании?
Придумать как это решить!
Есть очень простое решение
"""

'''
'Подводные камни' профилирования рекурсивных функций заключаются в том, что декоратор сработает для каждого вызова
функции. В результате получим по 1 таблице для каждого вызова, а нам нужно итоговое значение.

2 способа профилировки скриптов с рекурсией:

1. Вложить рекурсию в другую функцию и выполнить профилировку внешней функции.
Этот вариант профилировки рекурсии использовала в 3-м примере к заданию 1 текущего урока, поэтому не повторяю здесь.

2. Написать декоратор, который накопительным эффектом вычислит итоговый размер задействованной памяти.
Этот вариант узнала после разбора ДЗ, переписала для закрепления.

'''


from memory_profiler import memory_usage


user_number = int(input('Для вычисления факториала введите целое положительно число: '))
lst = []  # для хранения задействоаванной памяти при каждом рекурсивном вызове


def mem_usage_decorator(some_func):
    """ Вычисляет память, выделяемую под выполнение декорируемой функции"""

    def wrapper(*args, **kwargs):
        result = some_func(*args, **kwargs)
        lst.append(str(memory_usage()))  # добавляем в список значение задействованной памяти
        return result

    return wrapper


@mem_usage_decorator
def fact(number):
    """Вычисляем факториал числа"""
    if number == 1:
        return 1
    else:
        n = [el for el in range(10 ** 6)]  # для увеличения нагрузки на память
        return number * fact(number - 1)


print(f'Задействованная память до запуска рекурсивной функции: '
      f'{str(memory_usage())} MB')
print(f'Факториал числа: {fact(user_number)}')

for i, memory in enumerate(list(reversed(lst)), 1):
    print(f'Задействованная память после рекурсивного вызова: '
          f'{i}-й раз: {memory} MB')
"""

Результат замеров:
Для вычисления факториала введите целое положительно число: 10
Задействованная память до запуска рекурсивной функции: [15.3125] MB
Факториал числа: 3628800
Задействованная память после рекурсивного вызова: 1-й раз: [15.9765625] MB
Задействованная память после рекурсивного вызова: 2-й раз: [35.31640625] MB
Задействованная память после рекурсивного вызова: 3-й раз: [54.63671875] MB
Задействованная память после рекурсивного вызова: 4-й раз: [73.97265625] MB
Задействованная память после рекурсивного вызова: 5-й раз: [92.83984375] MB
Задействованная память после рекурсивного вызова: 6-й раз: [111.98828125] MB
Задействованная память после рекурсивного вызова: 7-й раз: [131.0625] MB
Задействованная память после рекурсивного вызова: 8-й раз: [150.3828125] MB
Задействованная память после рекурсивного вызова: 9-й раз: [169.4765625] MB
Задействованная память после рекурсивного вызова: 10-й раз: [188.57421875] MB

"""