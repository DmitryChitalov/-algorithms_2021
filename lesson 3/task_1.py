"""
Задание 1.
Реализуйте свои пользовательские функции, в которых реализуйте:
a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать,
   так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import random
import time

def filling_list(): # O(1)

    start_val = time.time() # O(1)

    my_list = [] #O(1)
    limitet = 100000 #O(1)
    i = 0 # O(1)
    while i < limitet: # O(1)
        number = random.randint(1, 100) # O(1)
        my_list.append(number) #O(1)
        i += 1 #O(1)

    end_val = time.time() #O(1)
    print(f'Заполнение списка: {end_val - start_val}')

    start_val = time.time()
    pop_my_list = my_list.pop()
    end_val = time.time()
    print(f'Удаление элемента из списка: {end_val - start_val}') # O(1)
    return
    #return print(f'{my_list}\n{end_val - start_val}')

filling_list()

def filling_dict(): #O(1)

    start_val = time.time() #O(1)

    my_dict = {} #O(1)
    limitet = 100000 #O(1)
    i = 0 #O(1)
    while i < limitet: # O(1)
        number = random.randint(1, 100) #O(1)
        new_data = {number: number + 1} #O(1)
        my_dict.update(new_data) #O(1)
        i += 1 #O(1)

    end_val = time.time() #O(1)
    print(f'Заполнение словаря: {end_val - start_val}') #O(1)

    start_val = time.time()
    pop_my_list = my_dict.popitem()
    end_val = time.time()
    print(f'Удаление элемента из словаря: {end_val - start_val}') # O(1)

    return
    #return print(my_dict)

filling_dict()

"""a) 
   Сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   Заполнение списка работает быстрее, потому что список - это упорядоченный набор элементов по индексу, 
   а словарь - это связь ключа и его значения
"""


"""b) 
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   Нет разницы при удалении элемента из словаря и списка.
"""

