
"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

"""Сортировка пузырьком (по убыванию)"""

import timeit
import random

"""Сортировка пузырьком ОПТИМИЗИРОВАННАЯ 
Идея: Если за проход не совершается ни одной замены, т.е. массив отсортирован и цикл ЗАВЕРШАЕТСЯ"""

def bubble_sort_o(lst_obj):

    # n = 1
    flag = True# Если пара эл-тов меняется местами, тогда True. Продолжаем перебор.
    while flag:
        flag = False# Если перестановок нет, тогда False, т. е. массив отсортирован
        for i in range(len(lst_obj)-1):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                flag = True
        # n += 1
    return lst_obj

"""Сортировка пузырьком из Методички (медленная)"""
def bubble_sort_m(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj

"""Сортировка  ОПТИМИЗИРОВАННАЯ_1 
Идея: В результате одного прохода минимальное число перегоняется в крайне левую позицию[0].
Таким образом массив, который проходится за второй проход меньше на 1 эл-т. И так далее. Т. е. в последующих проходах
приходиться обрабатывать все уменьшенный массив на число проходов. В этом экономия!
"""

def bubble_sort_o_1(lst_obj):

    num_pass = 0# Счетчик проходов
    flag = True# Если пара эл-тов меняется местами, тогда True. Продолжаем перебор.
    while flag:
        flag = False# Если перестановок нет, тогда False, т. е. массив отсортирован
        for i in range(len(lst_obj) - num_pass - 1):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                flag = True
        num_pass = num_pass + 1
    return lst_obj

orig_list = [random.randint(-100, 100) for _ in range(1000)]

#print('Исходный массив: ', orig_list)
#print('Отсортированный: ', bubble_sort_m(orig_list))

# замеры 1000
print('1000 замеров')
print('Сортировка пузырьком из Методички (медленная)', timeit.timeit("bubble_sort_m(orig_list[:])", globals=globals(), number=100))
print('Сортировка пузырьком ОПТИМИЗИРОВАННАЯ', timeit.timeit("bubble_sort_o(orig_list[:])", globals=globals(), number=100))
print('Сортировка Реально ОПТИМИЗИРОВАННАЯ_1', timeit.timeit("bubble_sort_o_1(orig_list[:])", globals=globals(), number=100))


"""
ОБСУЖДЕНИЕ: Вероятность того, что случайно созданный список чисел окажется ОТСОРТИРОВАННЫМ - крайне мала!
Предлогаемый метод оптимизации может улучьшить время. Но это был бы РЕДКИЙ случай. Т. е. времена должны быть 
сранимого порядка. 
ПОМНИТЬ! В функцию подставлять не массив orig_list = [xxxxxx], а его копия orig_list = [:]

После сокращения числа итераций на число проходов ситуация улучшилась процентов на 15
1000 замеров
Сортировка пузырьком из Методички (медленная) 6.3676625
Сортировка пузырьком ОПТИМИЗИРОВАННАЯ 9.788494800000002
Сортировка Реально ОПТИМИЗИРОВАННАЯ_1 5.9532311

НО ПОЧЕМУ получился таким СРЕДНИЙ ВАРИАНТ - НЕ ПОНИМАЮ!

"""

