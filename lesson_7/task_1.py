"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
import random
import timeit


def bubble_sort_not_optimize(lst_obj):
    n = 1
    while n < len(lst_obj) - 1:
        for i in range(len(lst_obj) - 1):
            if lst_obj[i] < lst_obj[i + 1]:
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
        n += 1
    return lst_obj


def bubble_sort_optimize(lst_obj):
    n = 1
    flag = 1
    while flag:
        flag = 0
        for i in range(len(lst_obj) - n):
            if lst_obj[i] < lst_obj[i + 1]:
                flag = 1
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
        n += 1
    return lst_obj


def not_optimize(orig_list):
    return f'Длинна списка: {len(orig_list)}\n' \
           f'Список до сортировки: {orig_list}\n' \
           f'Список после сортировки без оптимизации: {bubble_sort_not_optimize(orig_list[:])}\n' \
           f'Замеры времени сортирокви до оптимизации: ' \
           f'{timeit.timeit(f"bubble_sort_not_optimize({orig_list[:]})", globals=globals(), number=1000)}\n'


def optimize(orig_list):
    return f'Длинна списка: {len(orig_list)}\n' \
           f'Список до сортировки: {orig_list}\n' \
           f'Список после сортировки с оптимизацией: {bubble_sort_optimize(orig_list[:])}\n' \
           f'Замеры времени сортирокви после оптимизации: ' \
           f'{timeit.timeit(f"bubble_sort_optimize({orig_list[:]})", globals=globals(), number=1000)}\n'


test_list_1 = [random.randint(-100, 100) for _ in range(10)]
test_list_2 = [random.randint(-100, 100) for _ in range(100)]
test_list_3 = [random.randint(-100, 100) for _ in range(1000)]

# До оптимизации
print(not_optimize(test_list_1))  # 0.0120928
print(not_optimize(test_list_2))  # 1.0917295999999999
print(not_optimize(test_list_3))  # 123.8070491

print()

# После оптимизации
print(optimize(test_list_1))  # 0.009521000000006552
print(optimize(test_list_2))  # 0.7862314000000055
print(optimize(test_list_3))  # 85.83653780000002

# Оптимизация за счет флага выхода при полностью отсортированном массиве не даёт результатов
# т.к. вероятность того что массив будет сгенерирован отсортированным очень мала.
# Добавлена оптимизация с помощью уменьшения колличества проверяемых элементов массива на 1 после каждого обхода массива
# т.к. после каждого обхода массива последний элемент всегда будет на своём месте.
# В результате оптимизации достигнуто снижение времени примерно равно 30%.
# Была попытка оптимизировать сортировку за счет еще большего уменьшения колличества проверяемых элементов
# за каждый обход с помощью счетчика (счетчик считал колличество не перемещаемых элементов в конце списка),
# но данная реализация увеличила время сортировки, поэтому была удалена.
