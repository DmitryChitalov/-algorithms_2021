"""
Задача 4.
Поработайте с обычным словарем и OrderedDict.
Выполните операции, равные по смыслу, с каждым из объектов и сделайте замеры.
Опишите полученные результаты, сделайте выводы.

И есть ли смысл исп-ть OrderedDict в Python 3.6 и более поздних версиях?
"""

from timeit import timeit
from collections import OrderedDict


my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'f': 5}

my_dict_ord = OrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('f', 5)])



# возврат списка ключей
print('Вернуть все ключи словаря:', end=' ')
print(timeit('my_dict.keys()', globals=globals(), number=1000000))  # для одной операции
print('Вернуть все ключи словаря (запоминающего):', end=' ')
print(timeit('my_dict_ord.keys()', globals=globals(), number=1000000))  # для одной операции

# возврат списка значений
print('Вернуть все значения словаря:', end=' ')
print(timeit('my_dict.values()', globals=globals(), number=1000000))  # для одной операции
print('Вернуть все значения словаря (запоминающего):', end=' ')
print(timeit('my_dict_ord.values()', globals=globals(), number=1000000))  # для одной операции

# возврат кортежей Ключ-значение
print('Вернуть кортежи ключ-значение словаря:', end=' ')
print(timeit('my_dict.items()', globals=globals(), number=1000000))  # для одной операции
print('Вернуть кортежи ключ-значение словаря (запоминающего):', end=' ')
print(timeit('my_dict_ord.items()', globals=globals(), number=1000000))  # для одной операции

# возврат значения по ключу
print('Вернуть значение по ключу словаря:', end=' ')
print(timeit('my_dict.get("b")', globals=globals(), number=1000000))  # для одной операции
print('Вернуть значение по ключу словаря (запоминающего):', end=' ')
print(timeit('my_dict_ord.get("a")', globals=globals(), number=1000000))  # для одной операции


# добавление пары ключ-значение
print('Добавить пару ключ-значение:', end=' ')
print(timeit('my_dict.update({"g" : 6})', globals=globals(), number=1000000))  # для одной операции
print('Добавить пару кюч-значение словаря (запоминающего):', end=' ')
print(timeit('my_dict_ord.update({"g": 6})', globals=globals(), number=1000000))  # для одной операции


"""
Вернуть все ключи словаря: 0.11695165499999999
Вернуть все ключи словаря (запоминающего): 0.105071779
Вернуть все значения словаря: 0.10137753199999999
Вернуть все значения словаря (запоминающего): 0.10376006400000004
Вернуть кортежи ключ-значение словаря: 0.10757234400000004
Вернуть кортежи ключ-значение словаря (запоминающего): 0.10131711399999999
Вернуть значение по ключу словаря: 0.08463623899999995
Вернуть значение по ключу словаря (запоминающего): 0.08102330099999999
Добавить пару ключ-значение: 0.23124602900000002
Добавить пару кюч-значение словаря (запоминающего): 0.48772468000000013

вывод: Нет смысла использовать OrderedDict в Python 3.6 и более поздних версиях, т.к. нет разницы в скорости работы
 в использовании обычного словаря и словаря запоминающего порядок
"""
